{"version":3,"sources":["Map.js","constants.js","Spinner.js","TopBar.js","MapStyleSwitcher.js","LayersPanel.js","OSMController.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["map","popup","selectedCycleway","MAPBOX_ACCESS_TOKEN","DEFAULT_LNG","DEFAULT_LAT","geocodingClient","mbxGeocoding","accessToken","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMapMoved","bind","assertThisInitialized","e","console","debug","features","coords","lngLat","properties","layer","layers","find","l","id","split","html","name","concat","setLngLat","setHTML","addTo","remove","sw","getBounds","getSouthWest","ne","getNorthEast","lat","lng","_this2","getCenter","zoom","getZoom","reverseGeocode","query","types","limit","send","then","response","match","body","mapMovedObj","area","place_name","catch","err","error","message","_this3","filters","toConsumableArray","f","f2","style","borderColor","addLayer","type","source","description","paint","objectSpread","line-color","line-width","lineWidth","borderStyle","line-dasharray","filter","lineColor","borderWidth","lineStyle","interactiveId","on","length","getCanvas","cursor","setFeatureState","highlight","showPopup","_this4","addSource","data","generateId","slice","reverse","forEach","addDynamicLayer","prevProps","getSource","setData","setStyle","center","setCenter","isActive","join","setLayoutProperty","_this5","mapboxgl","container","mapContainer","addControl","NavigationControl","showCompass","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","MapboxGeocoder","countries","language","initLayers","Popup","closeOnClick","_this6","react_default","a","createElement","ref","el","Component","Spinner","parts","city","state","className","viewBox","cx","cy","r","fill","strokeWidth","strokeMiterlimit","TopBar","Modal","info","title","content","onOk","height","es_button","onClick","divider","downloadData","icon","Option","Select","MapStyleSwitcher","url","onMapStyleChange","es_select","defaultValue","optionFilterProp","onChange","position","bottom","right","width","value","LayersPanel","newVal","onLayersChange","tooltip","placement","arrowPointAtCenter","key","background","borderLeft","borderRight","es_switch","size","checked","OSMController","constraints","bbox","areaId","f_inner","undefined","str","p","RegExp","toString","toLowerCase","replace","c","charAt","indexOf","slugify","massageLayersData","Promise","resolve","reject","geoJson","$","getJSON","encodeURI","nominatimData","osm_id","getQuery","encodedQuery","osmtogeojson","flatProperties","fail","notification","App","updateData","urlParams","getParamsFromURL","loading","getLayers","mapStyle","z","URLSearchParams","location","search","paramsObj","get","Date","updatedAt","isDataFresh","setState","getData","set","newMapStyle","newLayers","assign","exportObj","exportName","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","setAttribute","appendChild","click","downloadObjectAsJson","prevState","onRouteChanged","params","toFixed","history","push","newState","src_TopBar_0","src_Map_0","src_MapStyleSwitcher","src_LayersPanel_0","src_Spinner_0","withRouter","Boolean","window","hostname","ReactDOM","render","react_router_dom","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae75912f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport mapboxgl from 'mapbox-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder'\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css'\n\nimport mbxGeocoding from '@mapbox/mapbox-sdk/services/geocoding';\n\nimport { MAPBOX_ACCESS_TOKEN } from './constants.js'\n\nimport './Map.css'\n\n\nlet map, popup;\nlet selectedCycleway;\n\nconst geocodingClient = mbxGeocoding({ accessToken: MAPBOX_ACCESS_TOKEN });\n\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n\n        this.onMapMoved = this.onMapMoved.bind(this);\n    }\n\n    showPopup(e) {\n        console.debug(e.features[0]);\n\n        const coords = e.lngLat;\n        const props = e.features[0].properties;\n\n        const layer = this.props.layers.find(l =>\n            l.id === e.features[0].layer.id.split('--')[0]\n        );\n\n        let html = '';\n\n        if (props.name) {\n            html += `<h2>${props.name}</h2>`;\n        } else {\n            html += '<i>Sem nome</i>';\n        }\n        \n        html += `<p>Tipo: <b>${layer.name}</b></p>`;\n\n        // html += `<h3>Tipo: ${layer.name}</h3>`;\n        // html += `<p>${layer.description}</p>`;\n\n        // const prettyProps = JSON.stringify(props, null, 2)\n        //     .replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')\n        //     .replace(/\"|,|\\{|\\}/g, '');\n        // html += prettyProps;\n\n        html += `\n            <a\n                target=\"_BLANK\"\n                rel=\"noopener\"\n                href=\"https://www.openstreetmap.org/${props.id}\"\n            >\n                Editar no OSM\n            </a>\n    `;\n\n        popup.setLngLat(coords)\n            .setHTML(html)\n            .addTo(map);\n    }\n\n    hidePopup() {\n        popup.remove();\n    }\n\n    // southern-most latitude, western-most longitude, northern-most latitude, eastern-most longitude\n    getCurrentBBox() {\n        const fallback = \"-23.036345361742164,-43.270405878917785,-22.915284125684607,-43.1111041211104\";\n\n        if (map) {\n            const sw = map.getBounds().getSouthWest();\n            const ne = map.getBounds().getNorthEast();\n            return `${sw.lat},${sw.lng},${ne.lat},${ne.lng}`;\n        } else {\n            return fallback;\n        }\n    }\n\n    onMapMoved() {\n        const lat = map.getCenter().lat;\n        const lng = map.getCenter().lng;\n        const zoom = map.getZoom();\n\n        // @todo: Doing this query at every map change is making everything super slow!\n        //   Could we use something like map.queryRenderedFeatures() instead?\n        geocodingClient\n            .reverseGeocode({\n                query: [lng, lat],\n                types: ['place'],\n                limit: 1\n            })\n            .send()\n            .then(response => {\n                const match = response.body;\n                let mapMovedObj = {\n                    lat: lat,\n                    lng: lng,\n                    zoom: zoom,\n                }\n\n                console.debug('onMapMoved', match.features);\n\n                if (match.features && match.features[0]) {\n                    mapMovedObj.area = match.features[0].place_name;\n                }\n\n                this.props.onMapMoved(mapMovedObj);\n            })\n            .catch(err => {\n                console.error(err.message);\n            });\n\n        // this.props.onMapMoved({\n        //     lat: lat,\n        //     lng: lng,\n        //     zoom: zoom,\n        // });\n    }\n\n    addDynamicLayer(l) {\n        const filters = [\n            \"any\",\n            ...l.filters.map(f => \n                typeof f[0] === 'string' ?\n                    [\"==\", [\"get\", f[0]], f[1]]\n                    :\n                    [ \"all\",\n                        ...f.map(f2 =>\n                            [\"==\", [\"get\", f2[0]], f2[1]]\n                        )\n                    ]\n                )\n        ];\n\n        // Check if layer has a border color set. If that's the case the logic is a\n        //  little different and we'll need 2 layers, one for the line itself and \n        //  another for the line underneath which creates the illusion of a border.\n        if (l.style.borderColor) {\n            // Border\n            map.addLayer({\n                \"id\": l.id+'--border',\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.borderColor,\n                    \"line-width\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"highlight\"], false],\n                        12,\n                        l.style.lineWidth\n                    ],\n                    ...(l.style.borderStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            });\n\n            // Line\n            map.addLayer({\n                \"id\": l.id,\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.lineColor,\n                    \"line-width\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"highlight\"], false],\n                        12,\n                        l.style.lineWidth - l.style.borderWidth\n                    ],\n                    ...(l.style.lineStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            });\n        } else {\n            map.addLayer({\n                \"id\": l.id,\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.lineColor,\n                    \"line-width\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"highlight\"], false],\n                        12,\n                        l.style.lineWidth\n                    ],\n                    ...(l.style.lineStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            });\n        }\n\n        \n        // Interactions\n\n        const interactiveId = l.style.borderColor ? \n            l.id + '--border'\n            : l.id;\n\n        map.on(\"mouseenter\", interactiveId, e => {\n            if (e.features.length > 0) {\n                // Cursor\n                map.getCanvas().style.cursor = 'pointer';\n\n                // Hover style\n                // if (hoveredCycleway) {\n                //     map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: false });\n                // }\n                // hoveredCycleway = e.features[0].id;\n                // map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: true });\n            }\n        });\n\n        map.on(\"mouseleave\", interactiveId, e => {\n            // Hover style\n            // if (hoveredCycleway && !selectedCycleway) {\n                // map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: false });\n\n                // Cursor cursor\n                map.getCanvas().style.cursor = '';\n            // }\n            // hoveredCycleway = null;\n        });\n\n        map.on(\"click\", interactiveId, e => {\n            if (e.features.length > 0) {\n                if (selectedCycleway) {\n                    map.setFeatureState({ source: 'osm', id: selectedCycleway }, { highlight: false });\n                }\n                selectedCycleway = e.features[0].id;\n                map.setFeatureState({ source: 'osm', id: selectedCycleway }, { highlight: true });\n\n                this.showPopup(e);\n            }\n        });\n    }\n\n    initLayers() {\n        map.addSource(\"osm\", {\n            \"type\": \"geojson\",\n            \"data\": this.props.data || {\n                'type': 'FeatureCollection',\n                'features': []\n            },\n            \"generateId\": true\n        });\n\n        // In GeoJSON layers are from most important to least important, but we \n        //   want the most important ones to be on top.\n        // Slice is used here to don't destructively reverse the original array.\n        this.props.layers.slice().reverse().forEach(l => {\n            this.addDynamicLayer(l);\n        }); \n    }\n\n    componentDidUpdate(prevProps) {\n        if (!map || !map.getSource('osm')) {\n            return;\n        }\n\n        if (this.props.data !== prevProps.data) {\n            map.getSource('osm').setData(this.props.data);\n        }\n        \n        if (this.props.style !== prevProps.style) {\n            map.setStyle(this.props.style);\n        }\n        \n        // if (this.props.zoom !== prevProps.zoom) {\n        //     map.setZoom(this.props.zoom);\n        // }\n        \n        if (this.props.center !== prevProps.center) {\n            map.setCenter(this.props.center);\n        }\n        \n        // Compare only 'isActive' field of layers\n        if (this.props.layers.map(l => l.isActive).join() === prevProps.layers.map(l => l.isActive).join()) {\n            this.props.layers.forEach( l => {\n                map.setLayoutProperty(l.id, 'visibility', l.isActive ? 'visible' : 'none');\n                if (l.style.borderColor) {\n                    map.setLayoutProperty(l.id+'--border', 'visibility', l.isActive ? 'visible' : 'none');\n                }\n            })\n        }\n    }\n    \n    componentDidMount() {\n        mapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;\n        \n        map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: this.props.style,\n            center: this.props.center,\n            zoom: this.props.zoom\n        });\n\n        \n        // Native Mapbox map controls\n\n        map.addControl(\n            new mapboxgl.NavigationControl({\n                showCompass: false\n            }),\n            'bottom-right'\n        );\n        map.addControl(new mapboxgl.GeolocateControl({\n            positionOptions: {\n                enableHighAccuracy: true\n            },\n            trackUserLocation: true\n        }),\n            'bottom-right'\n        );\n        // map.addControl(new mapboxgl.FullscreenControl({ container: document.querySelector('body') }));\n        map.addControl(new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl,\n            countries: 'br',\n            language: 'pt-br'\n        }),\n            'top-left'\n        );\n\n\n        // Listeners\n\n        map.on('load', () => {\n            this.initLayers();\n            this.onMapMoved();\n\n            map.on('moveend', this.onMapMoved);\n\n            // Further chages on styles reinitilizes layers\n            map.on('style.load', () => {\n                this.initLayers();\n                this.onMapMoved();\n            });\n        });\n\n\n        popup = new mapboxgl.Popup({\n            closeOnClick: false\n        });\n        popup.on('close', e => {\n            if (selectedCycleway) {\n                map.setFeatureState({ source: 'osm', id: selectedCycleway }, { highlight: false });\n            }\n            selectedCycleway = null;\n        });\n    }\n\n    render() {\n        return (\n            // Thanks https://blog.mapbox.com/mapbox-gl-js-react-764da6cc074a\n            <div ref={el => this.mapContainer = el}></div>\n        )\n    }\n}\n\nexport default Map;","export const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21kYWxiZW0iLCJhIjoiY2pnbXhjZnplMDJ6MjMzbnk0OGthZGE1ayJ9.n1flNO8ndRYKQcR9wNIT9w';\n\nexport const DEFAULT_BORDER_WIDTH = 3;\n\nexport const DEFAULT_AREA = 'Niterói, Rio De Janeiro, Brazil';\nexport const DEFAULT_LNG = -43.1098110;\nexport const DEFAULT_LAT = -22.8948963;\n\nconst ONE_DAY_MS = 1000 * 60 * 60 * 24;\nexport const OSM_DATA_MAX_AGE_MS = 7 * ONE_DAY_MS;\n\nexport const MIN_ZOOM_TO_LOAD_DATA = 10;\n\nexport const TOPBAR_HEIGHT = 64;","import React, { Component } from 'react';\n\nimport './Spinner.css'\n\nclass Spinner extends Component {\n    render() {\n        const parts = this.props.area.split(',');\n        const city = parts[0],\n            state = parts[1],\n            country = parts[2];\n\n        return (\n            <div id=\"spinner\" className=\"loader-container\">\n                <div className=\"loader\">\n                    <svg className=\"spinnersvg\" viewBox='25 25 50 50'>\n                        <circle className=\"path\" cx='50' cy='50' r='20' fill='none' strokeWidth='6' strokeMiterlimit='10'\n                        />\n                    </svg>\n\n                    <div className=\"content\">\n                        <h2>\n                            Carregando mapa cicloviário de <b>{city} ({state})</b>\n                        </h2>\n\n                        <div>\n                            Como é a primeira vez que você carrega esta área do OSM pode demorar um pouquinho :)\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Spinner;","import React, { Component } from 'react';\n\nimport { TOPBAR_HEIGHT } from './constants'\n\nimport { Modal, Button, Divider, Icon } from 'antd';\n\nimport './TopBar.css'\n\nclass TopBar extends Component {\n    info() {\n        Modal.info({\n            title: 'Sobre',\n            content: (\n                <p>\n                    A plataforma BICIMAPA é uma ferramenta que buscar ampliar a visibilidade das infraestruturas cicloviárias mapeadas no OpenStreetMap e engajar uma comunidade de mapeadores para atualização colaborativa de dados e incidência em políticas públicas de mobilidade urbana.\n                </p>\n            ),\n            onOk() { },\n        });\n    }\n\n    render() {\n        const parts = this.props.title.split(',');\n        const city = parts[0], \n            state = parts[1], \n            country = parts[2];\n        \n        return (\n            <div className=\"topbar\" style={{height: TOPBAR_HEIGHT}}>\n                <div>\n                    <h1 className=\"logo\">\n                        BICIMAPA\n                    </h1>\n                </div>\n\n                <h2 className=\"city\">\n                    <span className=\"state\">\n                        {state}\n                    </span>\n                    {city}\n                </h2>\n                \n                <div>\n                    <Button type=\"link\" onClick={this.info}>Sobre</Button>\n\n                    <Divider type=\"vertical\" />\n\n                    <Button type=\"link\" onClick={this.props.downloadData}>\n                        <Icon type=\"download\" /> Baixar dados\n                    </Button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TopBar;","import React, { Component } from 'react';\n\nimport { Select } from 'antd';\n\nconst { Option } = Select;\n\nclass MapStyleSwitcher extends Component {\n\n    onChange(url) {\n        this.props.onMapStyleChange(url)\n    }\n\n    render() {\n        return (\n            <Select\n                defaultValue=\"Mapa light\"\n                optionFilterProp=\"children\"\n                onChange={this.onChange.bind(this)}\n                style={{\n                    position: 'fixed',\n                    bottom: '32px',\n                    right: '50px',\n                    width: '160px'\n                }}\n            >\n                <Option value='mapbox://styles/cmdalbem/cjxseldep7c0a1doc7ezn6aeb'>Mapa light</Option>\n                <Option value='mapbox://styles/mapbox/streets-v11'>Mapa normal</Option>\n                <Option value='mapbox://styles/cmdalbem/cjgmxgkbw000n2rqtucat5zjz'>Dorsia</Option>\n                {/* <Option value='mapbox://styles/mapbox/outdoors-v11'>Outdoors</Option> */}\n                <Option value='mapbox://styles/cmdalbem/cjxsdwb907bfi1cqevxio2bst'>Mapa com satélite</Option>\n            </Select>\n        )\n    }\n}\n\nexport default MapStyleSwitcher;","import React, { Component } from 'react';\n\nimport { Switch, Tooltip } from 'antd';\n\nimport './LayersPanel.css';\n\n\nclass LayersPanel extends Component {\n    onChange(id, newVal) {\n        this.props.onLayersChange(id, newVal)\n    }\n\n    render() {\n        return (\n            <div className=\"layers-panel\">\n                {\n                    this.props.layers &&\n                    this.props.layers.map(l =>\n                        <Tooltip\n                            placement=\"left\"\n                            title={l.description}\n                            arrowPointAtCenter={true}\n                        >\n                            <div\n                                key={l.name}\n                                className=\"layer-row\"\n                                onClick={this.onChange.bind(this, l.id, !l.isActive)}\n                            >\n                                <div>\n                                    <span\n                                        className=\"layer-miniature\" \n                                        style={{\n                                            height: l.style.lineWidth * 2,\n                                            background: l.style.lineStyle === 'solid' ?\n                                                l.style.lineColor\n                                                : `repeating-linear-gradient(90deg, ${l.style.lineColor}, ${l.style.lineColor} 3px, white 3px, white 6px)`,\n                                            borderColor: l.style.borderColor,\n                                            borderStyle: l.style.borderStyle,\n                                            borderWidth: l.style.borderWidth ? l.style.borderWidth/2 : '0',\n                                            borderLeft: 'none',\n                                            borderRight: 'none'\n                                    }}\n                                    ></span>\n\n                                    <span className=\"layer-name\">\n                                        {l.name}\n                                    </span>\n                                </div>\n\n                                <Switch size=\"small\" checked={l.isActive}/>\n                            </div>\n                        </Tooltip>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default LayersPanel;","import osmtogeojson from 'osmtogeojson'\n\nimport $ from 'jquery'\n\nimport { notification } from 'antd';\n\nimport { DEFAULT_BORDER_WIDTH } from './constants.js'\nimport { slugify } from './utils.js'\n\nimport * as layers from './layers.json';\n\nclass OSMController {\n    static getQuery(constraints) {\n        const bbox = constraints.bbox;\n        // const area = constraints.area.split(',')[0];\n        const areaId = constraints.areaId;\n\n        const body = layers.default.map(l =>\n            l.filters.map(f =>\n                'way'\n                + (typeof f[0] === 'string' ?\n                    `[\"${f[0]}\"=\"${f[1]}\"]`\n                    :\n                    f.map(f_inner =>\n                        `[\"${f_inner[0]}\"=\"${f_inner[1]}\"]`\n                    ).join(\"\"))\n                 + (bbox ? \n                    `(${bbox});\\n`\n                    :\n                    `(area.a);\\n`)\n            ).join(\"\")\n        ).join(\"\");\n\n        return `\n            [out:json][timeout:500];\n            ${!bbox && `area(${areaId})->.a;`}\n            (\n                ${body}\n            );\n            out body geom;\n        `;\n    }\n\n    static massageLayersData() {\n        layers.default.forEach(l => {\n            // Omitted values\n            l.style.lineStyle = l.style.lineStyle || 'solid';\n            l.isActive = l.isActive !== undefined ? l.isActive : true;\n\n            if (l.style.borderColor) {\n                l.style.borderStyle = l.style.borderStyle || 'solid';\n                l.style.borderWidth = l.style.borderWidth || DEFAULT_BORDER_WIDTH;\n            }\n            \n            // Generate an ID based on name\n            l.id = slugify(l.name);\n        });\n\n        return layers.default;\n    }\n\n    static getLayers() {\n        return this.massageLayersData();\n    }\n\n    static getData(constraints) {\n        return new Promise((resolve, reject) => {\n            let geoJson;\n\n            $.getJSON(\n                `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURI(constraints.area)}`,\n                nominatimData => {\n                    console.debug('nominatimData', nominatimData);\n\n                    // Source: https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#By_area_.28area.29\n                    const areaId = 3600000000 + nominatimData[0].osm_id;\n\n                    const query = OSMController.getQuery({ areaId: areaId});\n                    \n                    console.debug('generated query: ', query);\n\n                    const encodedQuery = encodeURI(query);\n\n                    $.getJSON(\n                        // `https://overpass-api.de/api/interpreter?data=${encodedQuery}`,\n                        `https://overpass.kumi.systems/api/interpreter?data=${encodedQuery}`,\n                        data => {\n                            console.debug('osm data: ', data);\n                            geoJson = osmtogeojson(data, { flatProperties: true });\n                            console.debug('converted to geoJSON: ', geoJson);\n\n                            resolve({\n                                geoJson: geoJson\n                            });\n                        }).fail(e => {\n                            console.error(\"Deu erro! Saca só:\", e);\n                            notification['error']({\n                                message: 'Erro',\n                                description:\n                                    'Ops, erro na API do Overpass. Abra o console para ver mais detalhes.',\n                            });\n\n                            reject();\n                        });\n                }).fail(e => {\n                    console.error(\"Deu erro! Saca só:\", e);\n                    notification['error']({\n                        message: 'Erro',\n                        description:\n                            'Ops, erro na API do Nominatim. Abra o console para ver mais detalhes.',\n                    });\n\n                    reject();\n                });\n        });\n    }\n}\n\nexport default OSMController;","export function doesAContainsB(a, b) {\n    if (a && b) {\n        return a.getNorth() >= b.getNorth()\n            && a.getSouth() <= b.getSouth()\n            && a.getEast() >= b.getEast()\n            && a.getWest() <= b.getWest();\n    } else {\n        return null;\n    }\n}\n\n// Thanks https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\nexport function downloadObjectAsJson(exportObj, exportName) {\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exportObj));\n    var downloadAnchorNode = document.createElement('a');\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", exportName + \".json\");\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n}\n\nexport function createPolygonFromBBox(bbox) {\n    return {\n        'type': 'Feature',\n        'geometry': {\n            'type': 'Polygon',\n            'coordinates': [\n                [\n                    bbox.getNorthWest().toArray(),\n                    bbox.getNorthEast().toArray(),\n                    bbox.getSouthEast().toArray(),\n                    bbox.getSouthWest().toArray(),\n                    bbox.getNorthWest().toArray()\n                ]\n            ]\n        }\n    };\n}\n\n// Thanks https://medium.com/@mhagemann/the-ultimate-way-to-slugify-a-url-string-in-javascript-b8e4a0d849e1\nexport function slugify(str) {\n  const a = 'àáäâãåăæçèéëêǵḧìíïîḿńǹñòóöôœøṕŕßśșțùúüûǘẃẍÿź·/_,:;'\n  const b = 'aaaaaaaaceeeeghiiiimnnnooooooprssstuuuuuwxyz------'\n  const p = new RegExp(a.split('').join('|'), 'g')\n  return str.toString().toLowerCase()\n    .replace(/\\s+/g, '-') // Replace spaces with -\n    .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\n    .replace(/&/g, '-and-') // Replace & with ‘and’\n    .replace(/[^\\w-]+/g, '') // Remove all non-word characters\n    .replace(/--+/g, '-') // Replace multiple - with single -\n    .replace(/^-+/, '') // Trim - from start of text\n    .replace(/-+$/, '') // Trim - from end of text\n}","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport { get, set } from 'idb-keyval';\n\nimport { notification } from 'antd';\nimport \"antd/dist/antd.css\";\n\nimport Map from './Map.js'\nimport Spinner from './Spinner.js'\nimport TopBar from './TopBar.js'\nimport MapStyleSwitcher from './MapStyleSwitcher.js'\nimport LayersPanel from './LayersPanel.js'\nimport OSMController from './OSMController.js'\nimport { DEFAULT_LAT, DEFAULT_LNG, OSM_DATA_MAX_AGE_MS, MIN_ZOOM_TO_LOAD_DATA } from './constants.js'\nimport { downloadObjectAsJson } from './utils.js'\n\nimport './App.css';\n\nclass App extends Component {\n    geoJson;\n\n    constructor(props) {\n        super(props);\n\n        this.updateData = this.updateData.bind(this);\n        this.onMapStyleChange = this.onMapStyleChange.bind(this);\n        this.onMapMoved = this.onMapMoved.bind(this);\n        this.onLayersChange = this.onLayersChange.bind(this);\n        this.downloadData = this.downloadData.bind(this);\n\n        const urlParams = this.getParamsFromURL();\n        this.state = {\n            geoJson: null,\n            loading: false,\n            layers: OSMController.getLayers(),\n            mapStyle: 'mapbox://styles/cmdalbem/cjxseldep7c0a1doc7ezn6aeb',\n            zoom: urlParams.z || 13,\n            area: 'Niterói, Rio De Janeiro, Brazil',\n            center: [\n                urlParams.lng || DEFAULT_LNG,\n                urlParams.lat || DEFAULT_LAT]\n        };\n\n        if (this.state.area) {\n            this.updateData();\n        }\n    }\n\n    getParamsFromURL() {\n        const possibleParams = ['z', 'lat', 'lng'];\n        const urlParams = new URLSearchParams(this.props.location.search);\n        let paramsObj = {}\n\n        possibleParams.forEach( p => {\n            let value = urlParams.get(p);\n            if (value) {\n                paramsObj[p] = value;\n            }\n        })\n\n        return paramsObj;\n    }\n\n    isDataFresh(data) {\n        const now = new Date();\n        const dataLastUpdate = new Date(data.updatedAt);\n\n        return now - dataLastUpdate < OSM_DATA_MAX_AGE_MS;\n    }\n\n    updateData() {\n        if (this.state.zoom > MIN_ZOOM_TO_LOAD_DATA && this.state.area) {\n            // Try to retrieve previously saved data for this area\n            get(this.state.area)\n                .then(data => {\n                    console.debug('IndexedDB result:', data);\n                    \n                    if (data && this.isDataFresh(data)) {\n                        console.debug('IndexedDB data is fresh.');\n                        this.setState({ geoJson: data.geoJson })\n                    } else {\n                        console.debug(`Couldn't find data for area ${this.state.area} or it isn't fresh, hitting OSM...`);\n                        this.setState({ loading: true });\n\n                        OSMController.getData({ area: this.state.area })\n                            .then(data => {\n                                set(this.state.area, {\n                                    geoJson: data.geoJson,\n                                    updatedAt: new Date()\n                                });\n\n                                this.setState({\n                                    geoJson: data.geoJson,\n                                    loading: false\n                                });\n                            });\n                    }\n                })\n                .catch(e => {\n                    notification['error']({\n                        message: 'Erro',\n                        description:\n                            'Ocorreu um erro ao tentar recuperar os dados salvos no IndexedDB.',\n                    });\n                });\n        } else {\n            this.setState({ loading: false });\n        }\n    }\n\n    onMapStyleChange(newMapStyle) {\n        this.setState({ mapStyle: newMapStyle});\n    }\n\n    onLayersChange(id, newVal) {\n        let newLayers = Object.assign([], this.state.layers);\n        let modifiedLayer = newLayers.filter(l => l.id === id)[0];\n        modifiedLayer.isActive = newVal;\n\n        this.setState({ layers: newLayers });\n    }\n\n    downloadData() {\n        downloadObjectAsJson(this.state.geoJson, `mapa-cicloviario-${this.state.area}`);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.location !== prevProps.location) {\n            this.onRouteChanged();\n        }\n\n        if (this.state.area !== prevState.area) {\n            console.debug(`Changed area from ${prevState.area} to ${this.state.area}`);\n            \n            this.updateData();\n\n            // Only redo the query if we need new data\n            // if (!doesAContainsB(largestBoundsYet, newBounds)) {\n            //     this.updateData();\n            //     largestBoundsYet = newBounds;\n\n            //     if (DEBUG_BOUNDS_OPTIMIZATION) {\n            //         this.updateDebugPolygon(largestBoundsYet, 1);\n            //     }\n            // }\n        }\n        \n        if (this.state.zoom !== prevState.zoom ||\n            this.state.lat !== prevState.lat ||\n            this.state.lng !== prevState.lng) {\n                let params = '?';\n                params += `lat=${this.state.lat.toFixed(7)}`;\n                params += `&lng=${this.state.lng.toFixed(7)}`;\n                params += `&z=${this.state.zoom.toFixed(2)}`;\n                this.props.history.push({\n                    search: params\n                })\n        }\n    }\n\n    onRouteChanged() {\n        // @todo Fix infinite loop\n        // this.setState(this.getParamsFromURL());\n    }\n\n    onMapMoved(newState) {\n        // Ignore new area changes from Map\n        // if (this.state.area) {\n        //     delete newState.area;\n        // }\n\n        this.setState(newState);\n    }\n\n    render() {\n        return (\n            <div>\n                <TopBar\n                    title={this.state.area}\n                    downloadData={this.downloadData}\n                />\n\n                <Map\n                    data={this.state.geoJson}\n                    layers={this.state.layers}\n                    style={this.state.mapStyle}\n                    zoom={this.state.zoom}\n                    center={this.state.center}\n                    updateData={this.updateData}\n                    onMapMoved={this.onMapMoved}\n                />\n\n                <MapStyleSwitcher onMapStyleChange={this.onMapStyleChange}/>\n \n                <LayersPanel\n                    layers={this.state.layers}\n                    onLayersChange={this.onLayersChange}\n                />\n\n                {\n                    this.state.loading &&\n                    <Spinner area={this.state.area}/>\n                }\n            </div>\n        );\n    }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}