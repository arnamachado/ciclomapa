{"version":3,"sources":["img/itdp.png","img/ucb.png","img/light.png","img/normal.png","img/satelite.png","Map.js","constants.js","Spinner.js","TopBar.js","MapStyleSwitcher.js","LayersPanel.js","utils.js","OSMController.js","Storage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","map","popup","selectedCycleway","MAPBOX_ACCESS_TOKEN","DEFAULT_LNG","DEFAULT_LAT","geocodingClient","mbxGeocoding","accessToken","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMapMoved","bind","assertThisInitialized","e","console","debug","features","coords","lngLat","properties","layer","layers","find","l","id","split","html","name","concat","setLngLat","setHTML","addTo","remove","sw","getBounds","getSouthWest","ne","getNorthEast","lat","lng","_this2","reverseGeocode","query","types","limit","send","then","response","match","body","area","place_name","catch","err","error","message","getCenter","zoom","getZoom","_this3","filters","toConsumableArray","f","f2","style","borderColor","addLayer","type","source","description","paint","objectSpread","line-color","line-width","lineWidth","borderStyle","line-dasharray","filter","lineColor","borderWidth","lineStyle","interactiveId","on","length","getCanvas","cursor","setFeatureState","highlight","showPopup","_this4","addSource","data","generateId","slice","reverse","forEach","addDynamicLayer","prevProps","getSource","setData","setStyle","center","setCenter","isActive","join","setLayoutProperty","_this5","mapboxgl","container","mapContainer","addControl","NavigationControl","showCompass","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","geocoder","MapboxGeocoder","language","placeholder","countries","marker","result","log","initLayers","Popup","closeOnClick","_this6","react_default","a","createElement","ref","el","Component","Spinner","city","className","fontSize","role","aria-label","viewBox","cx","cy","r","fill","strokeWidth","strokeMiterlimit","TopBar","Modal","info","title","content","href","target","rel","src","itdp","alt","ucb","onOk","value","get","set","parts","state","height","es_button","onClick","divider","downloadData","icon","MapStyleSwitcher","selected","options","img","normal","url","light","satelite","prevState","onMapStyleChange","option","i","setState","key","LayersPanel","newVal","onLayersChange","tooltip","placement","arrowPointAtCenter","onChange","background","borderLeft","borderRight","es_switch","size","checked","slugify","str","RegExp","toString","toLowerCase","replace","c","charAt","indexOf","typeSizes","undefined","boolean","number","string","item","object","keys","reduce","total","sizeOf","servers","OSMController","constraints","bbox","areaId","f_inner","massageLayersData","Promise","resolve","reject","geoJson","$","getJSON","encodeURI","nominatimData","osm_id","getQuery","encodedQuery","requests","_loop","endpoint","elements","abort","osmtogeojson","flatProperties","fail","statusText","notification","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Storage","firebase","initializeApp","db","firestore","collection","querySnapshot","doc","compressed","pako","deflate","JSON","stringify","to","updatedAt","slug","local","exists","parse","toDate","App","updateData","urlParams","getParamsFromURL","loading","getLayers","mapStyle","z","parseFloat","storage","URLSearchParams","location","search","paramsObj","Date","load","isDataFresh","dataUpdatedAt","getData","now","save","newMapStyle","newLayers","assign","feature","propertyKey","exportObj","exportName","dataStr","encodeURIComponent","downloadAnchorNode","document","setAttribute","appendChild","click","downloadObjectAsJson","onRouteChanged","params","toFixed","history","push","newState","src_TopBar_0","lastUpdate","src_Map_0","src_MapStyleSwitcher_0","src_LayersPanel_0","src_Spinner_0","withRouter","Boolean","window","hostname","ReactDOM","render","react_router_dom","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d558d2de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/itdp.c441e7e0.png\";","module.exports = __webpack_public_path__ + \"static/media/ucb.8a36a689.png\";","module.exports = __webpack_public_path__ + \"static/media/light.aead2e19.png\";","module.exports = __webpack_public_path__ + \"static/media/normal.e409dcfc.png\";","module.exports = __webpack_public_path__ + \"static/media/satelite.a853a709.png\";","import React, { Component } from 'react';\n\nimport mapboxgl from 'mapbox-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder'\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css'\n\nimport mbxGeocoding from '@mapbox/mapbox-sdk/services/geocoding';\n\nimport { MAPBOX_ACCESS_TOKEN } from './constants.js'\n\nimport './Map.css'\n\n\nlet map, popup;\nlet selectedCycleway;\n\nconst geocodingClient = mbxGeocoding({ accessToken: MAPBOX_ACCESS_TOKEN });\n\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n\n        this.onMapMoved = this.onMapMoved.bind(this);\n    }\n\n    showPopup(e) {\n        console.debug(e.features[0]);\n\n        const coords = e.lngLat;\n        const props = e.features[0].properties;\n\n        const layer = this.props.layers.find(l =>\n            l.id === e.features[0].layer.id.split('--')[0]\n        );\n\n        let html = '';\n\n        if (props.name) {\n            html += `<h2>${props.name}</h2>`;\n        } else {\n            html += '<i>Sem nome</i>';\n        }\n        \n        html += `<p>Tipo: <b>${layer.name}</b></p>`;\n\n        // html += `<h3>Tipo: ${layer.name}</h3>`;\n        // html += `<p>${layer.description}</p>`;\n\n        // const prettyProps = JSON.stringify(props, null, 2)\n        //     .replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')\n        //     .replace(/\"|,|\\{|\\}/g, '');\n        // html += prettyProps;\n\n        html += `\n            <a\n                target=\"_BLANK\"\n                rel=\"noopener\"\n                href=\"https://www.openstreetmap.org/${props.id}\"\n            >\n                Editar no OSM\n            </a>\n    `;\n\n        popup.setLngLat(coords)\n            .setHTML(html)\n            .addTo(map);\n    }\n\n    hidePopup() {\n        popup.remove();\n    }\n\n    // southern-most latitude, western-most longitude, northern-most latitude, eastern-most longitude\n    getCurrentBBox() {\n        const fallback = \"-23.036345361742164,-43.270405878917785,-22.915284125684607,-43.1111041211104\";\n\n        if (map) {\n            const sw = map.getBounds().getSouthWest();\n            const ne = map.getBounds().getNorthEast();\n            return `${sw.lat},${sw.lng},${ne.lat},${ne.lng}`;\n        } else {\n            return fallback;\n        }\n    }\n\n    reverseGeocode(lngLat) {\n        geocodingClient\n            .reverseGeocode({\n                query: lngLat,\n                types: ['place'],\n                limit: 1\n            })\n            .send()\n            .then(response => {\n                const match = response.body;\n\n                console.debug('reverseGeocode', match.features);\n\n                if (match.features && match.features[0]) {\n                    this.props.onMapMoved({area: match.features[0].place_name});\n                }\n            })\n            .catch(err => {\n                console.error(err.message);\n            });\n    }\n\n    onMapMoved() {\n        const lat = map.getCenter().lat;\n        const lng = map.getCenter().lng;\n        const zoom = map.getZoom();\n\n        this.props.onMapMoved({\n            lat: lat,\n            lng: lng,\n            zoom: zoom,\n        });\n    }\n\n    addDynamicLayer(l) {\n        const filters = [\n            \"any\",\n            ...l.filters.map(f => \n                typeof f[0] === 'string' ?\n                    [\"==\", [\"get\", f[0]], f[1]]\n                    :\n                    [ \"all\",\n                        ...f.map(f2 =>\n                            [\"==\", [\"get\", f2[0]], f2[1]]\n                        )\n                    ]\n                )\n        ];\n\n        // Check if layer has a border color set. If that's the case the logic is a\n        //  little different and we'll need 2 layers, one for the line itself and \n        //  another for the line underneath which creates the illusion of a border.\n        if (l.style.borderColor) {\n            // Border\n            map.addLayer({\n                \"id\": l.id+'--border',\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.borderColor,\n                    \"line-width\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"highlight\"], false],\n                        12,\n                        l.style.lineWidth\n                    ],\n                    ...(l.style.borderStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            });\n\n            // Line\n            map.addLayer({\n                \"id\": l.id,\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.lineColor,\n                    \"line-width\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"highlight\"], false],\n                        12,\n                        l.style.lineWidth - l.style.borderWidth\n                    ],\n                    ...(l.style.lineStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            });\n        } else {\n            map.addLayer({\n                \"id\": l.id,\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.lineColor,\n                    \"line-width\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"highlight\"], false],\n                        12,\n                        l.style.lineWidth\n                    ],\n                    ...(l.style.lineStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            });\n        }\n\n        \n        // Interactions\n\n        const interactiveId = l.style.borderColor ? \n            l.id + '--border'\n            : l.id;\n\n        map.on(\"mouseenter\", interactiveId, e => {\n            if (e.features.length > 0) {\n                // Cursor\n                map.getCanvas().style.cursor = 'pointer';\n\n                // Hover style\n                // if (hoveredCycleway) {\n                //     map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: false });\n                // }\n                // hoveredCycleway = e.features[0].id;\n                // map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: true });\n            }\n        });\n\n        map.on(\"mouseleave\", interactiveId, e => {\n            // Hover style\n            // if (hoveredCycleway && !selectedCycleway) {\n                // map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: false });\n\n                // Cursor cursor\n                map.getCanvas().style.cursor = '';\n            // }\n            // hoveredCycleway = null;\n        });\n\n        map.on(\"click\", interactiveId, e => {\n            if (e.features.length > 0) {\n                if (selectedCycleway) {\n                    map.setFeatureState({ source: 'osm', id: selectedCycleway }, { highlight: false });\n                }\n                selectedCycleway = e.features[0].id;\n                map.setFeatureState({ source: 'osm', id: selectedCycleway }, { highlight: true });\n\n                this.showPopup(e);\n            }\n        });\n    }\n\n    initLayers() {\n        map.addSource(\"osm\", {\n            \"type\": \"geojson\",\n            \"data\": this.props.data || {\n                'type': 'FeatureCollection',\n                'features': []\n            },\n            \"generateId\": true\n        });\n\n        // In GeoJSON layers are from most important to least important, but we \n        //   want the most important ones to be on top.\n        // Slice is used here to don't destructively reverse the original array.\n        this.props.layers.slice().reverse().forEach(l => {\n            this.addDynamicLayer(l);\n        }); \n    }\n\n    componentDidUpdate(prevProps) {\n        if (!map || !map.getSource('osm')) {\n            return;\n        }\n\n        if (this.props.data !== prevProps.data) {\n            map.getSource('osm').setData(this.props.data);\n        }\n        \n        if (this.props.style !== prevProps.style) {\n            map.setStyle(this.props.style);\n        }\n        \n        // if (this.props.zoom !== prevProps.zoom) {\n        //     map.setZoom(this.props.zoom);\n        // }\n        \n        if (this.props.center !== prevProps.center) {\n            map.setCenter(this.props.center);\n        }\n        \n        // Compare only 'isActive' field of layers\n        if (this.props.layers.map(l => l.isActive).join() === prevProps.layers.map(l => l.isActive).join()) {\n            this.props.layers.forEach( l => {\n                map.setLayoutProperty(l.id, 'visibility', l.isActive ? 'visible' : 'none');\n                if (l.style.borderColor) {\n                    map.setLayoutProperty(l.id+'--border', 'visibility', l.isActive ? 'visible' : 'none');\n                }\n            })\n        }\n    }\n    \n    componentDidMount() {\n        this.reverseGeocode(this.props.center);\n\n        mapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;\n        \n        map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: this.props.style,\n            center: this.props.center,\n            zoom: this.props.zoom\n        });\n\n        \n        // Native Mapbox map controls\n\n        map.addControl(\n            new mapboxgl.NavigationControl({\n                showCompass: false\n            }),\n            'bottom-right'\n        );\n        map.addControl(new mapboxgl.GeolocateControl({\n            positionOptions: {\n                enableHighAccuracy: true\n            },\n            trackUserLocation: true\n        }),\n            'bottom-right'\n        );\n        // map.addControl(new mapboxgl.FullscreenControl({ container: document.querySelector('body') }));\n        \n        const geocoder = new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl,\n            language: 'pt-br',\n            placeholder: 'Buscar cidades',\n            countries: 'br',\n            types: 'place',\n            marker: false\n        });\n        geocoder.on('result', result => {\n            console.log('geocoder result', result);\n\n            this.reverseGeocode(result.result.center);\n        });\n\n        map.addControl(geocoder, 'top-left');\n\n\n        // Listeners\n\n        map.on('load', () => {\n            this.initLayers();\n            this.onMapMoved();\n\n            map.on('moveend', this.onMapMoved);\n\n            // Further chages on styles reinitilizes layers\n            map.on('style.load', () => {\n                this.initLayers();\n                this.onMapMoved();\n            });\n        });\n\n\n        popup = new mapboxgl.Popup({\n            closeOnClick: false\n        });\n        popup.on('close', e => {\n            if (selectedCycleway) {\n                map.setFeatureState({ source: 'osm', id: selectedCycleway }, { highlight: false });\n            }\n            selectedCycleway = null;\n        });\n    }\n\n    render() {\n        return (\n            // Thanks https://blog.mapbox.com/mapbox-gl-js-react-764da6cc074a\n            <div ref={el => this.mapContainer = el}></div>\n        )\n    }\n}\n\nexport default Map;","export const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21kYWxiZW0iLCJhIjoiY2pnbXhjZnplMDJ6MjMzbnk0OGthZGE1ayJ9.n1flNO8ndRYKQcR9wNIT9w';\n\nexport const DEFAULT_BORDER_WIDTH = 3;\n\nexport const DEFAULT_AREA = 'Niterói, Rio De Janeiro, Brazil';\nexport const DEFAULT_LNG = -43.1098110;\nexport const DEFAULT_LAT = -22.8948963;\n\nconst ONE_DAY_MS = 1000 * 60 * 60 * 24;\nexport const OSM_DATA_MAX_AGE_MS = 7 * ONE_DAY_MS;\n\nexport const MIN_ZOOM_TO_LOAD_DATA = 10;\n\nexport const TOPBAR_HEIGHT = 64;","import React, { Component } from 'react';\n\nimport './Spinner.css'\n\nclass Spinner extends Component {\n    render() {\n        const parts = this.props.area.split(',');\n        const city = parts[0];\n            // state = parts[1],\n            // country = parts[2];\n\n        return (\n            <div id=\"spinner\" className=\"loader-container\">\n                <div className=\"loader\">\n                    {\n                        this.props.error ?\n                            <div>\n                                <div style={{fontSize: '42px'}}>\n                                    <span role=\"img\" aria-label=\"Emoji triste\">😓</span>\n                                </div>\n\n                                <div className=\"content\">\n                                    <h2>\n                                        Ops!\n                                    </h2>\n\n                                    <div>\n                                        O OSM está mal humorado neste momento. Atualize a página para tentar denovo.\n                                    </div>\n                                </div>\n                            </div>\n                            :\n                            <div>\n                                <svg className=\"spinnersvg\" viewBox='25 25 50 50'>\n                                    <circle className=\"path\" cx='50' cy='50' r='20' fill='none' strokeWidth='6' strokeMiterlimit='10'\n                                    />\n                                </svg>\n\n                                <div className=\"content\">\n                                    <h2>\n                                        Carregando mapa cicloviário de <b>{city}</b>.\n                                    </h2>\n\n                                    <div>\n                                        Como é a primeira vez que você carrega esta cidade pode demorar um pouquinho :)\n                                    </div>\n                                </div>\n                            </div>\n\n                    }\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Spinner;","import React, { Component } from 'react';\n\nimport { TOPBAR_HEIGHT } from './constants'\n\nimport { Modal, Button, Divider, Icon } from 'antd';\n\nimport { get, set } from 'idb-keyval';\n\nimport itdp from './img/itdp.png';\nimport ucb from './img/ucb.png';\n\nimport './TopBar.css'\n\nclass TopBar extends Component {\n    info() {\n        Modal.info({\n            title: 'Sobre',\n            className: 'about-modal',\n            content: (\n                <div>\n                    <p>\n                        A plataforma CicloMapa é uma ferramenta que buscar ampliar a visibilidade das infraestruturas cicloviárias mapeadas no OpenStreetMap e engajar uma comunidade de mapeadores para atualização colaborativa de dados e incidência em políticas públicas de mobilidade urbana.\n                    </p>\n\n                    <p>\n                        Este é um projeto Open Source, e seu código pode ser encontrado no <a href=\"https://github.com/cmdalbem/ciclomapa/\">Github</a>.\n                    </p>\n\n                    <div>\n                        Apoio:\n\n                        <div className=\"logos\">\n                            <a href=\"http://itdpbrasil.org\" target=\"_BLANK\" rel=\"noopener noreferrer\">\n                                <img src={itdp} alt=\"Logo do ITDP\"></img>\n                            </a>\n                            <a href=\"https://www.uniaodeciclistas.org.br/\" target=\"_BLANK\" rel=\"noopener noreferrer\">\n                                <img src={ucb} alt=\"Logo da UCB\"></img>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            ),\n            onOk() { },\n        });\n    }\n\n    onChange(value) {\n        console.log(`selected ${value}`);\n        this.props.onMapMoved({ area: value });\n    }\n\n    componentDidMount() {\n        get('hasSeenWelcomeMsg')\n                .then(data => {\n                    if (!data) {\n                        this.info();\n                        set('hasSeenWelcomeMsg', true);\n                    }\n                });\n    }\n\n    render() {\n        const parts = this.props.title.split(',');\n        const city = parts[0], \n            state = parts[1];\n            // country = parts[2];\n\n        // const updatedAt = this.props.lastUpdate;// && this.props.lastUpdate.format();\n\n        // const citySelector = <Select\n        //     showSearch\n        //     style={{ width: 200 }}\n        //     onChange={this.onChange.bind(this)}\n        // >\n        //     <Option value=\"Porto Alegre, Rio Grande Do Sul, Brazil\">\n        //         Porto Alegre\n        //                 </Option>\n        //     <Option value=\"Rio De Janeiro, Rio De Janeiro, Brazil\"\t>\n        //         Rio de Janeiro\n        //                 </Option>\n        //     <Option value=\"São Paulo, São Paulo, Brazil\">\n        //         São Paulo\n        //                 </Option>\n        //     <Option value=\"Fortaleza, Ceará\">\n        //         Fortaleza\n        //                 </Option>\n        // </Select>\n        \n        return (\n            <div className=\"topbar\" style={{height: TOPBAR_HEIGHT}}>\n                <div>\n                    <h1 className=\"logo\">\n                        CicloMapa\n                    </h1>\n                </div>\n\n                <h2 className=\"city\">\n                    <span className=\"state\">\n                        {state}\n                    </span>\n                    {city}\n\n                    {/* {citySelector} */}\n\n                    {/* <span className=\"lastUpdate\">\n                        atualizado em {updatedAt}\n                    </span>  */}\n                </h2>\n                \n                <div>\n                    <Button type=\"link\" onClick={this.info}>Sobre</Button>\n\n                    <Divider type=\"vertical\" />\n\n                    <Button type=\"link\" onClick={this.props.downloadData}>\n                        <Icon type=\"download\" /> Baixar dados\n                    </Button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TopBar;","import React, { Component } from 'react';\n\nimport light from './img/light.png';\nimport normal from './img/normal.png';\nimport satelite from './img/satelite.png';\n\nimport './MapStyleSwitcher.css'\n\nclass MapStyleSwitcher extends Component {\n    state = { selected: 0 };\n\n    options = [\n        {\n            img: normal,\n            // url: 'mapbox://styles/mapbox/streets-v11'\n            url: 'mapbox://styles/cmdalbem/cjgmxgkbw000n2rqtucat5zjz'\n        },\n        {\n            img: light,\n            url: 'mapbox://styles/cmdalbem/cjxseldep7c0a1doc7ezn6aeb'\n        },\n        {\n            img: satelite,\n            url: 'mapbox://styles/cmdalbem/cjxsdwb907bfi1cqevxio2bst'\n        },\n    ];\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state !== prevState) {\n            const selected = this.options[this.state.selected]\n            this.props.onMapStyleChange(selected.url)\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"switcher-bar\">\n                {\n                    this.options.map( (option, i) =>\n                        <div\n                            onClick={() => this.setState({ selected: i })}\n                            className={this.state.selected === i ? 'selected' : ''}\n                            key={option.img}\n                        >\n                            <img src={option.img} alt=\"\"/>\n                        </div>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default MapStyleSwitcher;","import React, { Component } from 'react';\n\nimport { Switch, Tooltip } from 'antd';\n\nimport './LayersPanel.css';\n\n\nclass LayersPanel extends Component {\n    onChange(id, newVal) {\n        this.props.onLayersChange(id, newVal)\n    }\n\n    render() {\n        return (\n            <div className=\"layers-panel\">\n                {\n                    this.props.layers &&\n                    this.props.layers.map(l =>\n                        <Tooltip\n                            placement=\"left\"\n                            title={l.description}\n                            arrowPointAtCenter={true}\n                            key={l.name}\n                        >\n                            <div\n                                className=\"layer-row\"\n                                onClick={this.onChange.bind(this, l.id, !l.isActive)}\n                            >\n                                <div>\n                                    <span\n                                        className=\"layer-miniature\" \n                                        style={{\n                                            height: l.style.lineWidth * 2,\n                                            background: l.style.lineStyle === 'solid' ?\n                                                l.style.lineColor\n                                                : `repeating-linear-gradient(90deg, ${l.style.lineColor}, ${l.style.lineColor} 3px, white 3px, white 6px)`,\n                                            borderColor: l.style.borderColor,\n                                            borderStyle: l.style.borderStyle,\n                                            borderWidth: l.style.borderWidth ? l.style.borderWidth/2 : '0',\n                                            borderLeft: 'none',\n                                            borderRight: 'none'\n                                    }}\n                                    ></span>\n\n                                    <span className=\"layer-name\">\n                                        {l.name}\n                                    </span>\n                                </div>\n\n                                <Switch size=\"small\" checked={l.isActive}/>\n                            </div>\n                        </Tooltip>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default LayersPanel;","export function doesAContainsB(a, b) {\n    if (a && b) {\n        return a.getNorth() >= b.getNorth()\n            && a.getSouth() <= b.getSouth()\n            && a.getEast() >= b.getEast()\n            && a.getWest() <= b.getWest();\n    } else {\n        return null;\n    }\n}\n\n// Thanks https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\nexport function downloadObjectAsJson(exportObj, exportName) {\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exportObj));\n    var downloadAnchorNode = document.createElement('a');\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", exportName + \".json\");\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n}\n\nexport function createPolygonFromBBox(bbox) {\n    return {\n        'type': 'Feature',\n        'geometry': {\n            'type': 'Polygon',\n            'coordinates': [\n                [\n                    bbox.getNorthWest().toArray(),\n                    bbox.getNorthEast().toArray(),\n                    bbox.getSouthEast().toArray(),\n                    bbox.getSouthWest().toArray(),\n                    bbox.getNorthWest().toArray()\n                ]\n            ]\n        }\n    };\n}\n\n// Thanks https://medium.com/@mhagemann/the-ultimate-way-to-slugify-a-url-string-in-javascript-b8e4a0d849e1\nexport function slugify(str) {\n  const a = 'àáäâãåăæçèéëêǵḧìíïîḿńǹñòóöôœøṕŕßśșțùúüûǘẃẍÿź·/_,:;'\n  const b = 'aaaaaaaaceeeeghiiiimnnnooooooprssstuuuuuwxyz------'\n  const p = new RegExp(a.split('').join('|'), 'g')\n  return str.toString().toLowerCase()\n    .replace(/\\s+/g, '-') // Replace spaces with -\n    .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\n    .replace(/&/g, '-and-') // Replace & with ‘and’\n    .replace(/[^\\w-]+/g, '') // Remove all non-word characters\n    .replace(/--+/g, '-') // Replace multiple - with single -\n    .replace(/^-+/, '') // Trim - from start of text\n    .replace(/-+$/, '') // Trim - from end of text\n}\n\nconst typeSizes = {\n    \"undefined\": () => 0,\n    \"boolean\": () => 4,\n    \"number\": () => 8,\n    \"string\": item => 2 * item.length,\n    \"object\": item => !item ? 0 : Object\n        .keys(item)\n        .reduce((total, key) => sizeOf(key) + sizeOf(item[key]) + total, 0)\n};\n\nexport const sizeOf = value => typeSizes[typeof value](value);","/* eslint-disable no-loop-func */\nimport osmtogeojson from 'osmtogeojson'\n\nimport $ from 'jquery'\n\nimport { notification } from 'antd';\n\nimport { DEFAULT_BORDER_WIDTH } from './constants.js'\nimport { slugify } from './utils.js'\n\nimport * as layers from './layers.json';\n\nconst servers = [\n    'https://overpass.kumi.systems/api/interpreter',\n    'https://overpass-api.de/api/interpreter',\n    'http://overpass.openstreetmap.fr/api/interpreter',\n    'http://overpass.osm.ch/api/interpreter',\n    'https://overpass.nchc.org.tw'\n];\n\nclass OSMController {\n    static getQuery(constraints) {\n        const bbox = constraints.bbox;\n        // const area = constraints.area.split(',')[0];\n        const areaId = constraints.areaId;\n\n        const body = layers.default.map(l =>\n            l.filters.map(f =>\n                'way'\n                + (typeof f[0] === 'string' ?\n                    `[\"${f[0]}\"=\"${f[1]}\"]`\n                    :\n                    f.map(f_inner =>\n                        `[\"${f_inner[0]}\"=\"${f_inner[1]}\"]`\n                    ).join(\"\"))\n                 + (bbox ? \n                    `(${bbox});\\n`\n                    :\n                    `(area.a);\\n`)\n            ).join(\"\")\n        ).join(\"\");\n\n        return `\n            [out:json][timeout:500];\n            ${!bbox && `area(${areaId})->.a;`}\n            (\n                ${body}\n            );\n            out body geom;\n        `;\n    }\n\n    static massageLayersData() {\n        layers.default.forEach(l => {\n            // Omitted values\n            l.style.lineStyle = l.style.lineStyle || 'solid';\n            l.isActive = l.isActive !== undefined ? l.isActive : true;\n\n            if (l.style.borderColor) {\n                l.style.borderStyle = l.style.borderStyle || 'solid';\n                l.style.borderWidth = l.style.borderWidth || DEFAULT_BORDER_WIDTH;\n            }\n            \n            // Generate an ID based on name\n            l.id = slugify(l.name);\n        });\n\n        return layers.default;\n    }\n\n    static getLayers() {\n        return this.massageLayersData();\n    }\n\n    static getData(constraints) {\n        return new Promise((resolve, reject) => {\n            let geoJson;\n\n            $.getJSON(\n                `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURI(constraints.area)}`,\n                nominatimData => {\n                    console.debug('nominatimData', nominatimData);\n\n                    // Source: https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#By_area_.28area.29\n                    const areaId = 3600000000 + nominatimData[0].osm_id;\n\n                    const query = OSMController.getQuery({ areaId: areaId});\n                    \n                    console.debug('generated query: ', query);\n\n                    const encodedQuery = encodeURI(query);\n\n                    let requests = [];\n                    for (let i = 0; i < servers.length; i++) {\n                        const endpoint = servers[i] + '?data=' + encodedQuery;\n                        \n                        console.debug('Attempting OSM server: ' + servers[i]);\n\n                        requests[i] = $.getJSON(\n                            endpoint,\n                            data => {\n                                if (data.elements.length > 0) {\n                                    console.debug('SUCCESS! @ ' + i);\n                                    for (let r = 0; r < requests.length; r++) {\n                                        if (r !== i) {\n                                            console.debug('Aborting ' + r);\n                                            requests[r].abort();\n                                        }\n                                    }\n    \n                                    console.debug('osm data: ', data);\n                                    geoJson = osmtogeojson(data, { flatProperties: true });\n                                    console.debug('converted to geoJSON: ', geoJson);\n        \n                                    resolve({\n                                        geoJson: geoJson\n                                    });\n                                }\n                            }).fail(e => {\n                                if (e.statusText !== 'abort') {\n                                    console.error(\"Deu erro! Saca só:\", e);\n                                }\n                            });\n                    }\n                    \n                    // console.error(\"Deu erro! Saca só:\", e);\n                    // notification['error']({\n                    //     message: 'Erro',\n                    //     description:\n                    //         `Ops, erro na API do Overpass (erro ${e.status}). Abra o console para ver mais detalhes.`,\n                    // });\n                    // reject();\n\n                }).fail(e => {\n                    console.error(\"Deu erro! Saca só:\", e);\n                    notification['error']({\n                        message: 'Erro',\n                        description:\n                            'Ops, erro na API do Nominatim. Abra o console para ver mais detalhes.',\n                    });\n\n                    reject();\n                });\n        });\n    }\n}\n\nexport default OSMController;","import { get, set } from 'idb-keyval';\n\nimport firebase from 'firebase';\n\nimport { slugify, sizeOf } from './utils.js'\n\nimport pako from 'pako';\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDUbMY3UuyJ9vVVBblhUR9L1B3TV6a3eRU\",\n    authDomain: \"ciclomapa-app.firebaseapp.com\",\n    databaseURL: \"https://ciclomapa-app.firebaseio.com\",\n    projectId: \"ciclomapa-app\",\n    storageBucket: \"ciclomapa-app.appspot.com\",\n    messagingSenderId: \"377722964538\",\n    appId: \"1:377722964538:web:bc0fada0b3db0587514303\"\n};\n\nclass Storage {\n    db;\n    \n    constructor() {\n        firebase.initializeApp({\n            apiKey: firebaseConfig.apiKey,\n            authDomain: firebaseConfig.authDomain,\n            projectId: firebaseConfig.projectId\n        });\n\n        this.db = firebase.firestore();\n\n        this.db.collection(\"cities\").get().then((querySnapshot) => {\n            console.log('[Firestore] Documents found:');\n            querySnapshot.forEach((doc) => {\n                console.debug('• ' + doc.id);\n            });\n        });\n    }\n\n    compressJson(data) {\n        console.log('Before: ', sizeOf(data));\n        \n        // // Minimize size by cleaning clearing OSM tags\n        // data.features.forEach(feature => {\n        //     Object.keys(feature.properties).forEach(propertyKey => {\n        //         if (propertyKey !== 'id' &&\n        //             propertyKey !== 'name' &&\n        //             propertyKey !== 'type')\n        //             delete feature.properties[propertyKey];\n        //     });\n        // });\n\n        // Compress with gzip\n        const compressed = pako.deflate(JSON.stringify(data), { to: 'string' });\n\n        console.log('After: ', sizeOf(compressed));\n\n        // test\n        // const decompressed = JSON.parse(pako.inflate(compressed), { to: 'string' });\n        // console.log(decompressed);\n\n        return compressed;\n    }\n\n    save(name, geoJson, updatedAt) {\n        const slug = slugify(name);\n\n        // Save to Local Storage\n        set(name, {\n            geoJson: geoJson,\n            updatedAt: updatedAt\n        });\n\n        // Save to Firestore\n        try {\n            // geoJson = this.compressJson(geoJson);\n\n            this.db.collection('cities').doc(slug).set({\n                name: name,\n                geoJson: JSON.stringify(geoJson),\n                updatedAt: updatedAt\n            }).then(() => {\n                console.debug(\"[Firebase] Document written successfully.\");\n            }).catch(error => {\n                console.error(\"[Firebase] Error adding document: \", error);\n            });\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    load(name) {\n        const slug = slugify(name);\n\n        return new Promise((resolve, reject) => {\n            get(name).then( local => {\n                if (local) {\n                    resolve(local);\n                } else {\n                    this.db.collection(\"cities\").doc(slug).get().then(doc => {\n                        if (doc.exists) {\n                            let data = doc.data();\n                            \n                            console.debug(\"[Firebase] Document data:\", data);\n\n                            // Decompress gzip\n                            // data.geoJson = JSON.parse(pako.inflate(data.geoJson), { to: 'string' });\n                            \n                            // Massage data\n                            data.geoJson = JSON.parse(data.geoJson);\n                            data.updatedAt = data.updatedAt.toDate();\n                            \n                            resolve(data);\n                        } else {\n                            console.debug(\"[Firebase] No document for: \", name);\n                            resolve();\n                        }\n                    }).catch(error => {\n                        console.error(`[Firebase] Error getting document: ${name}`, error);\n                        reject();\n                    });\n                }\n            })\n        });\n    }\n}\n\nexport default Storage;","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport { notification } from 'antd';\nimport \"antd/dist/antd.css\";\n\nimport Map from './Map.js'\nimport Spinner from './Spinner.js'\nimport TopBar from './TopBar.js'\nimport MapStyleSwitcher from './MapStyleSwitcher.js'\nimport LayersPanel from './LayersPanel.js'\nimport OSMController from './OSMController.js'\nimport Storage from './Storage.js'\nimport { DEFAULT_LAT, DEFAULT_LNG, OSM_DATA_MAX_AGE_MS } from './constants.js'\nimport { downloadObjectAsJson } from './utils.js'\n\nimport './App.css';\n\nclass App extends Component {\n    geoJson;\n    storage;\n\n    constructor(props) {\n        super(props);\n\n        this.updateData = this.updateData.bind(this);\n        this.onMapStyleChange = this.onMapStyleChange.bind(this);\n        this.onMapMoved = this.onMapMoved.bind(this);\n        this.onLayersChange = this.onLayersChange.bind(this);\n        this.downloadData = this.downloadData.bind(this);\n\n        const urlParams = this.getParamsFromURL();\n        this.state = {\n            geoJson: null,\n            loading: false,\n            layers: OSMController.getLayers(),\n            mapStyle: 'mapbox://styles/cmdalbem/cjgmxgkbw000n2rqtucat5zjz',\n            zoom: urlParams.z || 13,\n            area: '',\n            center: [\n                parseFloat(urlParams.lng) || DEFAULT_LNG,\n                parseFloat(urlParams.lat) || DEFAULT_LAT]\n        };\n\n        this.storage = new Storage();\n\n        if (this.state.area) {\n            this.updateData();\n        }\n    }\n\n    getParamsFromURL() {\n        const possibleParams = ['z', 'lat', 'lng'];\n        const urlParams = new URLSearchParams(this.props.location.search);\n        let paramsObj = {}\n\n        possibleParams.forEach( p => {\n            let value = urlParams.get(p);\n            if (value) {\n                paramsObj[p] = value;\n            }\n        })\n\n        return paramsObj;\n    }\n\n    isDataFresh(data) {\n        const now = new Date();\n        const dataLastUpdate = new Date(data.updatedAt);\n\n        return now - dataLastUpdate < OSM_DATA_MAX_AGE_MS;\n    }\n\n    updateData() {\n        // if (this.state.zoom > MIN_ZOOM_TO_LOAD_DATA && this.state.area) {\n        if (this.state.area) {\n            // Try to retrieve previously saved data for this area\n            this.storage.load(this.state.area)\n                .then(data => {\n                    if (data && this.isDataFresh(data)) {\n                        console.debug('Database data is fresh.');\n                        this.setState({\n                            geoJson: data.geoJson,\n                            dataUpdatedAt: new Date(data.updatedAt)\n                        });\n                    } else { \n                        console.debug(`Couldn't find data for area ${this.state.area} or it isn't fresh, hitting OSM...`);\n                        this.setState({ loading: true });\n\n                        OSMController.getData({ area: this.state.area })\n                            .then(data => {\n                                // Persist data\n                                const now = new Date();\n                                this.storage.save(this.state.area, data.geoJson, now);\n                                \n                                this.setState({\n                                    geoJson: data.geoJson,\n                                    loading: false,\n                                    dataUpdatedAt: now\n                                });\n                            }).catch(e => {\n                                this.setState({\n                                    error: true\n                                });\n                            });\n                    }\n                }).catch(e => {\n                    notification['error']({\n                        message: 'Erro',\n                        description:\n                            'Ocorreu um erro ao acessar o banco de dados.',\n                    });\n                });\n        } else {\n            this.setState({ loading: false });\n        }\n    }\n\n    onMapStyleChange(newMapStyle) {\n        this.setState({ mapStyle: newMapStyle});\n    }\n\n    onLayersChange(id, newVal) {\n        let newLayers = Object.assign([], this.state.layers);\n        let modifiedLayer = newLayers.filter(l => l.id === id)[0];\n        modifiedLayer.isActive = newVal;\n\n        this.setState({ layers: newLayers });\n    }\n\n    downloadData() {\n        // Fill out typologies\n        this.state.geoJson.features.forEach( feature => {\n            this.state.layers.forEach( layer => {\n                layer.filters.forEach( filter => {\n                    Object.keys(feature.properties).forEach(propertyKey => {\n                        // console.debug(propertyKey, filter[0]);\n                        // console.debug(feature.properties[propertyKey], filter[1]);\n                        if ((typeof filter[0] === 'object'\n                            &&\n                             (propertyKey === filter[0][0] &&\n                              feature.properties[propertyKey] === filter[0][1]) ||\n                             (propertyKey === filter[1][0] &&\n                              feature.properties[propertyKey] === filter[1][1]))\n                            ||\n                            (propertyKey === filter[0] &&\n                             feature.properties[propertyKey] === filter[1]))\n                        {\n                            feature.properties['type'] = layer.name;\n                            // console.debug(feature.properties.id + ' ' + feature.properties.name, layer.name);\n                        } \n                    });\n                })\n            });\n        });\n\n        // Delete unwanted OSM properties\n        this.state.geoJson.features.forEach(feature => {\n            Object.keys(feature.properties).forEach(propertyKey => {\n                if (propertyKey !== 'id' &&\n                    propertyKey !== 'name' &&\n                    propertyKey !== 'type')\n                    delete feature.properties[propertyKey];\n            });\n        });\n        \n        downloadObjectAsJson(this.state.geoJson, `ciclomapa-${this.state.area}`);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.location !== prevProps.location) {\n            this.onRouteChanged();\n        }\n\n        if (this.state.area !== prevState.area) {\n            console.debug(`Changed area from ${prevState.area} to ${this.state.area}`);\n            \n            this.updateData();\n\n            // Only redo the query if we need new data\n            // if (!doesAContainsB(largestBoundsYet, newBounds)) {\n            //     this.updateData();\n            //     largestBoundsYet = newBounds;\n\n            //     if (DEBUG_BOUNDS_OPTIMIZATION) {\n            //         this.updateDebugPolygon(largestBoundsYet, 1);\n            //     }\n            // }\n        }\n\n        if (this.state.geoJson !== prevState.geoJson) {\n            if (!this.state.geoJson.features.length || this.state.geoJson.features.length === 0) {\n                notification['warning']({\n                    message: 'Ops',\n                    description:\n                        'Não encontramos dados cicloviários para esta cidade.',\n                });\n            }\n        }\n        \n        if (this.state.zoom !== prevState.zoom ||\n            this.state.lat !== prevState.lat ||\n            this.state.lng !== prevState.lng) {\n                let params = '?';\n                params += `lat=${this.state.lat.toFixed(7)}`;\n                params += `&lng=${this.state.lng.toFixed(7)}`;\n                params += `&z=${this.state.zoom.toFixed(2)}`;\n                this.props.history.push({\n                    search: params\n                })\n        }\n    }\n\n    onRouteChanged() {\n        // @todo Fix infinite loop\n        // this.setState(this.getParamsFromURL());\n    }\n\n    onMapMoved(newState) {\n        // Ignore new area changes from Map\n        // if (this.state.area) {\n        //     delete newState.area;\n        // }\n\n        this.setState(newState);\n    }\n\n    render() {\n        return (\n            <div>\n                <TopBar\n                    title={this.state.area}\n                    lastUpdate={this.state.dataUpdatedAt}\n                    downloadData={this.downloadData}\n                    onMapMoved={this.onMapMoved}\n                />\n\n                <Map\n                    data={this.state.geoJson}\n                    layers={this.state.layers}\n                    style={this.state.mapStyle}\n                    zoom={this.state.zoom}\n                    center={this.state.center}\n                    updateData={this.updateData}\n                    onMapMoved={this.onMapMoved}\n                />\n\n                <MapStyleSwitcher onMapStyleChange={this.onMapStyleChange}/>\n \n                <LayersPanel\n                    layers={this.state.layers}\n                    onLayersChange={this.onLayersChange}\n                />\n\n                {\n                    this.state.loading &&\n                    <Spinner area={this.state.area} error={this.state.error}/>\n                }\n            </div>\n        );\n    }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}