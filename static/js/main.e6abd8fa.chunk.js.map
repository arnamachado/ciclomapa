{"version":3,"sources":["constants.js","Map.js","utils.js","Spinner.js","MapStyleSwitcher.js","LayersPanel.js","OSMController.js","App.js","serviceWorker.js","index.js"],"names":["map","popup","selectedCycleway","MAPBOX_ACCESS_TOKEN","DEFAULT_LNG","DEFAULT_LAT","geocodingClient","mbxGeocoding","accessToken","MapboxGLButtonControl","_ref","_ref$className","className","_ref$title","title","_ref$eventHandler","eventHandler","Object","classCallCheck","this","_className","_title","_eventHandler","_btn","document","createElement","type","onclick","_container","appendChild","parentNode","removeChild","_map","undefined","Map","props","_this","possibleConstructorReturn","getPrototypeOf","call","onMapMoved","bind","assertThisInitialized","e","console","debug","features","coords","lngLat","properties","layer","layers","find","l","id","split","html","name","concat","JSON","stringify","replace","setLngLat","setHTML","addTo","remove","sw","getBounds","getSouthWest","ne","getNorthEast","lat","lng","_this2","getCenter","zoom","getZoom","reverseGeocode","query","types","limit","send","then","response","match","body","mapMovedObj","area","place_name","catch","err","error","message","_this3","filters","toConsumableArray","f","f2","style","borderColor","addLayer","source","description","paint","objectSpread","line-color","line-width","lineWidth","borderStyle","line-dasharray","filter","lineColor","borderWidth","lineStyle","interactiveId","on","length","getCanvas","cursor","setFeatureState","highlight","showPopup","_this4","addSource","data","generateId","slice","reverse","forEach","addDynamicLayer","prevProps","getSource","setData","setStyle","center","setCenter","isActive","join","setLayoutProperty","_this5","mapboxgl","container","mapContainer","addControl","NavigationControl","showCompass","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","MapboxGeocoder","exportObj","exportName","dataStr","encodeURIComponent","downloadAnchorNode","setAttribute","click","downloadObjectAsJson","currentBBox","initLayers","Popup","closeOnClick","_this6","react_default","a","ref","el","Component","Spinner","viewBox","cx","cy","r","fill","strokeWidth","strokeMiterlimit","Option","Select","MapStyleSwitcher","url","onMapStyleChange","es_select","defaultValue","optionFilterProp","onChange","position","top","right","width","value","LayersPanel","newVal","onLayersChange","key","onClick","height","background","borderLeft","borderRight","marginRight","tooltip","placement","icon","opacity","es_switch","size","checked","OSMController","constraints","bbox","areaId","f_inner","str","p","RegExp","toString","toLowerCase","c","charAt","indexOf","slugify","massageLayersData","Promise","resolve","reject","geoJson","$","getJSON","encodeURI","nominatimData","osm_id","getQuery","encodedQuery","osmtogeojson","flatProperties","fail","notification","App","updateData","urlParams","getParamsFromURL","state","loading","getLayers","mapStyle","z","URLSearchParams","location","search","paramsObj","get","Date","updatedAt","isDataFresh","setState","getData","set","newMapStyle","newLayers","assign","prevState","onRouteChanged","params","toFixed","history","push","newState","src_Map_0","src_MapStyleSwitcher","src_LayersPanel_0","src_Spinner_0","withRouter","Boolean","window","hostname","ReactDOM","render","react_router_dom","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6abd8fa.chunk.js","sourcesContent":["export const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21kYWxiZW0iLCJhIjoiY2pnbXhjZnplMDJ6MjMzbnk0OGthZGE1ayJ9.n1flNO8ndRYKQcR9wNIT9w';\n\nexport const DEFAULT_BORDER_WIDTH = 3;\n\nexport const DEFAULT_AREA = 'Niterói, Rio De Janeiro, Brazil';\nexport const DEFAULT_LNG = -43.1098110;\nexport const DEFAULT_LAT = -22.8948963;\n\nconst ONE_DAY_MS = 1000 * 60 * 60 * 24;\nexport const OSM_DATA_MAX_AGE_MS = 7 * ONE_DAY_MS;\n\nexport const MIN_ZOOM_TO_LOAD_DATA = 10;","import React, { Component } from 'react';\n\nimport mapboxgl from 'mapbox-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder'\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css'\n\nimport mbxGeocoding from '@mapbox/mapbox-sdk/services/geocoding';\n\nimport { downloadObjectAsJson } from './utils.js'\n\nimport { MAPBOX_ACCESS_TOKEN } from './constants.js'\n\nimport './Map.css'\n\n\nlet map, popup;\nlet selectedCycleway;\nlet currentBBox;\n\nconst geocodingClient = mbxGeocoding({ accessToken: MAPBOX_ACCESS_TOKEN });\n\n\nclass MapboxGLButtonControl {\n    constructor({\n        className = \"\",\n        title = \"\",\n        eventHandler = null\n    }) {\n        this._className = className;\n        this._title = title;\n        this._eventHandler = eventHandler;\n    }\n\n    onAdd(map) {\n        this._btn = document.createElement(\"button\");\n        this._btn.className = \"mapboxgl-ctrl-icon \" + this._className;\n        this._btn.type = \"button\";\n        this._btn.title = this._title;\n        this._btn.onclick = this._eventHandler;\n\n        this._container = document.createElement(\"div\");\n        this._container.className = \"mapboxgl-ctrl-group mapboxgl-ctrl\";\n        this._container.appendChild(this._btn);\n\n        return this._container;\n    }\n\n    onRemove() {\n        this._container.parentNode.removeChild(this._container);\n        this._map = undefined;\n    }\n}\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n\n        this.onMapMoved = this.onMapMoved.bind(this);\n    }\n\n    showPopup(e) {\n        console.debug(e.features[0]);\n\n        const coords = e.lngLat;\n        const props = e.features[0].properties;\n\n        const layer = this.props.layers.find(l =>\n            l.id === e.features[0].layer.id.split('--')[0]\n        );\n\n        let html = '';\n\n        if (props.name) {\n            html += `<h2>${props.name}</h2>`;\n        } else {\n            html += '<i>Sem nome</i>';\n        }\n        \n        html += `<p>Tipo: <b>${layer.name}</b></p>`;\n\n        // html += `<h3>Tipo: ${layer.name}</h3>`;\n        // html += `<p>${layer.description}</p>`;\n\n        const prettyProps = JSON.stringify(props, null, 2)\n            .replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')\n            .replace(/\"|,|\\{|\\}/g, '');\n        html += prettyProps;\n\n        html += `\n            <br>\n            <a\n                target=\"_BLANK\"\n                rel=\"noopener\"\n                href=\"https://www.openstreetmap.org/${props.id}\"\n            >\n                Editar no OSM\n            </a>\n    `;\n\n        popup.setLngLat(coords)\n            .setHTML(html)\n            .addTo(map);\n    }\n\n    hidePopup() {\n        popup.remove();\n    }\n\n    // southern-most latitude, western-most longitude, northern-most latitude, eastern-most longitude\n    getCurrentBBox() {\n        const fallback = \"-23.036345361742164,-43.270405878917785,-22.915284125684607,-43.1111041211104\";\n\n        if (map) {\n            const sw = map.getBounds().getSouthWest();\n            const ne = map.getBounds().getNorthEast();\n            return `${sw.lat},${sw.lng},${ne.lat},${ne.lng}`;\n        } else {\n            return fallback;\n        }\n    }\n\n    onMapMoved() {\n        const lat = map.getCenter().lat;\n        const lng = map.getCenter().lng;\n        const zoom = map.getZoom();\n\n        // @todo: Doing this query at every map change is making everything super slow!\n        //   Could we use something like map.queryRenderedFeatures() instead?\n        geocodingClient\n            .reverseGeocode({\n                query: [lng, lat],\n                types: ['place'],\n                limit: 1\n            })\n            .send()\n            .then(response => {\n                const match = response.body;\n                let mapMovedObj = {\n                    lat: lat,\n                    lng: lng,\n                    zoom: zoom,\n                }\n\n                console.debug('onMapMoved', match.features);\n\n                if (match.features && match.features[0]) {\n                    mapMovedObj.area = match.features[0].place_name;\n                }\n\n                this.props.onMapMoved(mapMovedObj);\n            })\n            .catch(err => {\n                console.error(err.message);\n            });\n\n        // this.props.onMapMoved({\n        //     lat: lat,\n        //     lng: lng,\n        //     zoom: zoom,\n        // });\n    }\n\n    addDynamicLayer(l) {\n        const filters = [\n            \"any\",\n            ...l.filters.map(f => \n                typeof f[0] === 'string' ?\n                    [\"==\", [\"get\", f[0]], f[1]]\n                    :\n                    [ \"all\",\n                        ...f.map(f2 =>\n                            [\"==\", [\"get\", f2[0]], f2[1]]\n                        )\n                    ]\n                )\n        ];\n\n        // Check if layer has a border color set. If that's the case the logic is a\n        //  little different and we'll need 2 layers, one for the line itself and \n        //  another for the line underneath which creates the illusion of a border.\n        if (l.style.borderColor) {\n            // Border\n            map.addLayer({\n                \"id\": l.id+'--border',\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.borderColor,\n                    \"line-width\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"highlight\"], false],\n                        12,\n                        l.style.lineWidth\n                    ],\n                    ...(l.style.borderStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            });\n\n            // Line\n            map.addLayer({\n                \"id\": l.id,\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.lineColor,\n                    \"line-width\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"highlight\"], false],\n                        12,\n                        l.style.lineWidth - l.style.borderWidth\n                    ],\n                    ...(l.style.lineStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            });\n        } else {\n            map.addLayer({\n                \"id\": l.id,\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.lineColor,\n                    \"line-width\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"highlight\"], false],\n                        12,\n                        l.style.lineWidth\n                    ],\n                    ...(l.style.lineStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            });\n        }\n\n        \n        // Interactions\n\n        const interactiveId = l.style.borderColor ? \n            l.id + '--border'\n            : l.id;\n\n        map.on(\"mouseenter\", interactiveId, e => {\n            if (e.features.length > 0) {\n                // Cursor\n                map.getCanvas().style.cursor = 'pointer';\n\n                // Hover style\n                // if (hoveredCycleway) {\n                //     map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: false });\n                // }\n                // hoveredCycleway = e.features[0].id;\n                // map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: true });\n            }\n        });\n\n        map.on(\"mouseleave\", interactiveId, e => {\n            // Hover style\n            // if (hoveredCycleway && !selectedCycleway) {\n                // map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: false });\n\n                // Cursor cursor\n                map.getCanvas().style.cursor = '';\n            // }\n            // hoveredCycleway = null;\n        });\n\n        map.on(\"click\", interactiveId, e => {\n            if (e.features.length > 0) {\n                if (selectedCycleway) {\n                    map.setFeatureState({ source: 'osm', id: selectedCycleway }, { highlight: false });\n                }\n                selectedCycleway = e.features[0].id;\n                map.setFeatureState({ source: 'osm', id: selectedCycleway }, { highlight: true });\n\n                this.showPopup(e);\n            }\n        });\n    }\n\n    initLayers() {\n        map.addSource(\"osm\", {\n            \"type\": \"geojson\",\n            \"data\": this.props.data || {\n                'type': 'FeatureCollection',\n                'features': []\n            },\n            \"generateId\": true\n        });\n\n        // In GeoJSON layers are from most important to least important, but we \n        //   want the most important ones to be on top.\n        // Slice is used here to don't destructively reverse the original array.\n        this.props.layers.slice().reverse().forEach(l => {\n            this.addDynamicLayer(l);\n        }); \n    }\n\n    componentDidUpdate(prevProps) {\n        if (!map || !map.getSource('osm')) {\n            return;\n        }\n\n        if (this.props.data !== prevProps.data) {\n            map.getSource('osm').setData(this.props.data);\n        }\n        \n        if (this.props.style !== prevProps.style) {\n            map.setStyle(this.props.style);\n        }\n        \n        // if (this.props.zoom !== prevProps.zoom) {\n        //     map.setZoom(this.props.zoom);\n        // }\n        \n        if (this.props.center !== prevProps.center) {\n            map.setCenter(this.props.center);\n        }\n        \n        // Compare only 'isActive' field of layers\n        if (this.props.layers.map(l => l.isActive).join() === prevProps.layers.map(l => l.isActive).join()) {\n            this.props.layers.forEach( l => {\n                map.setLayoutProperty(l.id, 'visibility', l.isActive ? 'visible' : 'none');\n                if (l.style.borderColor) {\n                    map.setLayoutProperty(l.id+'--border', 'visibility', l.isActive ? 'visible' : 'none');\n                }\n            })\n        }\n    }\n    \n    componentDidMount() {\n        mapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;\n        \n        map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: this.props.style,\n            center: this.props.center,\n            zoom: this.props.zoom\n        });\n\n        \n        // Native Mapbox map controls\n\n        map.addControl(\n            new mapboxgl.NavigationControl({\n                showCompass: false\n            }),\n            'bottom-right'\n        );\n        map.addControl(new mapboxgl.GeolocateControl({\n            positionOptions: {\n                enableHighAccuracy: true\n            },\n            trackUserLocation: true\n        }),\n            'bottom-right'\n        );\n        // map.addControl(new mapboxgl.FullscreenControl({ container: document.querySelector('body') }));\n        map.addControl(new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl\n        }),\n            'top-left'\n        );\n\n        map.addControl(new MapboxGLButtonControl({\n            className: \"mapbox-gl-download-btn\",\n            title: \"Download\",\n            eventHandler: e => {\n                downloadObjectAsJson(this.props.data, `mapa-cicloviario-${currentBBox}`);\n            }\n        }),\n            \"bottom-right\"\n        );\n\n\n        // Listeners\n\n        map.on('load', () => {\n            this.initLayers();\n            this.onMapMoved();\n\n            map.on('moveend', this.onMapMoved);\n\n            // Further chages on styles reinitilizes layers\n            map.on('style.load', () => {\n                this.initLayers();\n                this.onMapMoved();\n            });\n        });\n\n\n        popup = new mapboxgl.Popup({\n            closeOnClick: false\n        });\n        popup.on('close', e => {\n            if (selectedCycleway) {\n                map.setFeatureState({ source: 'osm', id: selectedCycleway }, { highlight: false });\n            }\n            selectedCycleway = null;\n        });\n    }\n\n    render() {\n        return (\n            // Thanks https://blog.mapbox.com/mapbox-gl-js-react-764da6cc074a\n            <div ref={el => this.mapContainer = el}></div>\n        )\n    }\n}\n\nexport default Map;","export function doesAContainsB(a, b) {\n    if (a && b) {\n        return a.getNorth() >= b.getNorth()\n            && a.getSouth() <= b.getSouth()\n            && a.getEast() >= b.getEast()\n            && a.getWest() <= b.getWest();\n    } else {\n        return null;\n    }\n}\n\n// Thanks https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\nexport function downloadObjectAsJson(exportObj, exportName) {\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exportObj));\n    var downloadAnchorNode = document.createElement('a');\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", exportName + \".json\");\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n}\n\nexport function createPolygonFromBBox(bbox) {\n    return {\n        'type': 'Feature',\n        'geometry': {\n            'type': 'Polygon',\n            'coordinates': [\n                [\n                    bbox.getNorthWest().toArray(),\n                    bbox.getNorthEast().toArray(),\n                    bbox.getSouthEast().toArray(),\n                    bbox.getSouthWest().toArray(),\n                    bbox.getNorthWest().toArray()\n                ]\n            ]\n        }\n    };\n}\n\n// Thanks https://medium.com/@mhagemann/the-ultimate-way-to-slugify-a-url-string-in-javascript-b8e4a0d849e1\nexport function slugify(str) {\n  const a = 'àáäâãåăæçèéëêǵḧìíïîḿńǹñòóöôœøṕŕßśșțùúüûǘẃẍÿź·/_,:;'\n  const b = 'aaaaaaaaceeeeghiiiimnnnooooooprssstuuuuuwxyz------'\n  const p = new RegExp(a.split('').join('|'), 'g')\n  return str.toString().toLowerCase()\n    .replace(/\\s+/g, '-') // Replace spaces with -\n    .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\n    .replace(/&/g, '-and-') // Replace & with ‘and’\n    .replace(/[^\\w-]+/g, '') // Remove all non-word characters\n    .replace(/--+/g, '-') // Replace multiple - with single -\n    .replace(/^-+/, '') // Trim - from start of text\n    .replace(/-+$/, '') // Trim - from end of text\n}","import React, { Component } from 'react';\n\nimport './Spinner.css'\n\nclass Spinner extends Component {\n    render() {\n        return (\n            <div id=\"spinner\" className=\"loader-container\">\n                <div className=\"loader\">\n                    <svg className=\"circular\" viewBox='25 25 50 50'>\n                        <circle className=\"path\" cx='50' cy='50' r='20' fill='none' strokeWidth='6' strokeMiterlimit='10'\n                        />\n                    </svg>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Spinner;","import React, { Component } from 'react';\n\nimport { Select } from 'antd';\n\nconst { Option } = Select;\n\nclass MapStyleSwitcher extends Component {\n\n    onChange(url) {\n        this.props.onMapStyleChange(url)\n    }\n\n    render() {\n        return (\n            <Select\n                defaultValue=\"Mapa light\"\n                optionFilterProp=\"children\"\n                onChange={this.onChange.bind(this)}\n                style={{\n                    position: 'fixed',\n                    top: '10px',\n                    right: '10px',\n                    width: '200px'\n                }}\n            >\n                <Option value='mapbox://styles/cmdalbem/cjxseldep7c0a1doc7ezn6aeb'>Mapa light</Option>\n                <Option value='mapbox://styles/mapbox/streets-v11'>Mapa normal</Option>\n                <Option value='mapbox://styles/cmdalbem/cjgmxgkbw000n2rqtucat5zjz'>Dorsia</Option>\n                {/* <Option value='mapbox://styles/mapbox/outdoors-v11'>Outdoors</Option> */}\n                <Option value='mapbox://styles/cmdalbem/cjxsdwb907bfi1cqevxio2bst'>Mapa com satélite</Option>\n            </Select>\n        )\n    }\n}\n\nexport default MapStyleSwitcher;","import React, { Component } from 'react';\n\nimport { Switch, Tooltip, Icon } from 'antd';\n\nimport './LayersPanel.css';\n\n\nclass LayersPanel extends Component {\n    onChange(id, newVal) {\n        this.props.onLayersChange(id, newVal)\n    }\n\n    render() {\n        return (\n            <div className=\"layers-panel\">\n                {\n                    this.props.layers &&\n                    this.props.layers.map(l =>\n                        <div\n                            key={l.name}\n                            className=\"layer-row\"\n                            onClick={this.onChange.bind(this, l.id, !l.isActive)}\n                        >\n                            <div>\n                                <span\n                                    className=\"layer-miniature\" \n                                    style={{\n                                        height: l.style.lineWidth * 2,\n                                        background: l.style.lineStyle === 'solid' ?\n                                            l.style.lineColor\n                                            : `repeating-linear-gradient(90deg, ${l.style.lineColor}, ${l.style.lineColor} 3px, white 3px, white 6px)`,\n                                        borderColor: l.style.borderColor,\n                                        borderStyle: l.style.borderStyle,\n                                        borderWidth: l.style.borderWidth ? l.style.borderWidth/2 : '0',\n                                        borderLeft: 'none',\n                                        borderRight: 'none'\n                                }}\n                                ></span>\n\n                                <span className=\"layer-name\">\n                                    {l.name}\n                                </span>\n                            </div>\n\n                            <div>\n                                {\n                                    l.description &&\n                                    <div style={{marginRight: '6px'}}>\n                                        <Tooltip placement=\"left\" title={l.description}>\n                                            <Icon type=\"question-circle\" style={{ opacity: '.5' }} />\n                                        </Tooltip>\n                                    </div>\n                                }\n\n                                <Switch size=\"small\" checked={l.isActive}/>\n                            </div>\n\n                        </div>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default LayersPanel;","import osmtogeojson from 'osmtogeojson'\n\nimport $ from 'jquery'\n\nimport { notification } from 'antd';\n\nimport { DEFAULT_BORDER_WIDTH } from './constants.js'\nimport { slugify } from './utils.js'\n\nimport * as layers from './layers.json';\n\nclass OSMController {\n    static getQuery(constraints) {\n        const bbox = constraints.bbox;\n        // const area = constraints.area.split(',')[0];\n        const areaId = constraints.areaId;\n\n        const body = layers.default.map(l =>\n            l.filters.map(f =>\n                'way'\n                + (typeof f[0] === 'string' ?\n                    `[\"${f[0]}\"=\"${f[1]}\"]`\n                    :\n                    f.map(f_inner =>\n                        `[\"${f_inner[0]}\"=\"${f_inner[1]}\"]`\n                    ).join(\"\"))\n                 + (bbox ? \n                    `(${bbox});\\n`\n                    :\n                    `(area.a);\\n`)\n            ).join(\"\")\n        ).join(\"\");\n\n        return `\n            [out:json][timeout:100];\n            ${!bbox && `area(${areaId})->.a;`}\n            (\n                ${body}\n            );\n            out body geom;\n        `;\n    }\n\n    static massageLayersData() {\n        layers.default.forEach(l => {\n            // Omitted values\n            l.style.lineStyle = l.style.lineStyle || 'solid';\n            l.isActive = l.isActive !== undefined ? l.isActive : true;\n\n            if (l.style.borderColor) {\n                l.style.borderStyle = l.style.borderStyle || 'solid';\n                l.style.borderWidth = DEFAULT_BORDER_WIDTH;\n            }\n            \n            // Generate an ID based on name\n            l.id = slugify(l.name);\n        });\n\n        return layers.default;\n    }\n\n    static getLayers() {\n        return this.massageLayersData();\n    }\n\n    static getData(constraints) {\n        return new Promise((resolve, reject) => {\n            let geoJson;\n\n            $.getJSON(\n                `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURI(constraints.area)}`,\n                nominatimData => {\n                    console.debug('nominatimData', nominatimData);\n\n                    // Source: https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#By_area_.28area.29\n                    const areaId = 3600000000 + nominatimData[0].osm_id;\n\n                    const query = OSMController.getQuery({ areaId: areaId});\n                    \n                    console.debug('generated query: ', query);\n\n                    const encodedQuery = encodeURI(query);\n\n                    $.getJSON(\n                        // `https://overpass-api.de/api/interpreter?data=${encodedQuery}`,\n                        `https://overpass.kumi.systems/api/interpreter?data=${encodedQuery}`,\n                        data => {\n                            console.debug('osm data: ', data);\n                            geoJson = osmtogeojson(data, { flatProperties: true });\n                            console.debug('converted to geoJSON: ', geoJson);\n\n                            resolve({\n                                geoJson: geoJson\n                            });\n                        }).fail(e => {\n                            console.error(\"Deu erro! Saca só:\", e);\n                            notification['error']({\n                                message: 'Erro',\n                                description:\n                                    'Ops, erro na API do Overpass. Abra o console para ver mais detalhes.',\n                            });\n\n                            reject();\n                        });\n                }).fail(e => {\n                    console.error(\"Deu erro! Saca só:\", e);\n                    notification['error']({\n                        message: 'Erro',\n                        description:\n                            'Ops, erro na API do Nominatim. Abra o console para ver mais detalhes.',\n                    });\n\n                    reject();\n                });\n        });\n    }\n}\n\nexport default OSMController;","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport { get, set } from 'idb-keyval';\n\nimport Map from './Map.js'\nimport Spinner from './Spinner.js'\nimport MapStyleSwitcher from './MapStyleSwitcher.js'\nimport LayersPanel from './LayersPanel.js'\nimport OSMController from './OSMController.js'\nimport { DEFAULT_LAT, DEFAULT_LNG, OSM_DATA_MAX_AGE_MS, MIN_ZOOM_TO_LOAD_DATA } from './constants.js'\n\nimport { notification } from 'antd';\n\nimport \"antd/dist/antd.css\";\nimport './App.css';\n\nclass App extends Component {\n    geoJson;\n\n    constructor(props) {\n        super(props);\n\n        this.updateData = this.updateData.bind(this);\n        this.onMapStyleChange = this.onMapStyleChange.bind(this);\n        this.onMapMoved = this.onMapMoved.bind(this);\n        this.onLayersChange = this.onLayersChange.bind(this);\n\n        const urlParams = this.getParamsFromURL();\n        this.state = {\n            geoJson: null,\n            loading: false,\n            layers: OSMController.getLayers(),\n            mapStyle: 'mapbox://styles/cmdalbem/cjxseldep7c0a1doc7ezn6aeb',\n            zoom: urlParams.z || 13,\n            area: 'Niterói, Rio De Janeiro, Brazil',\n            center: [\n                urlParams.lng || DEFAULT_LNG,\n                urlParams.lat || DEFAULT_LAT]\n        };\n\n        if (this.state.area) {\n            this.updateData();\n        }\n    }\n\n    getParamsFromURL() {\n        const possibleParams = ['z', 'lat', 'lng'];\n        const urlParams = new URLSearchParams(this.props.location.search);\n        let paramsObj = {}\n\n        possibleParams.forEach( p => {\n            let value = urlParams.get(p);\n            if (value) {\n                paramsObj[p] = value;\n            }\n        })\n\n        return paramsObj;\n    }\n\n    isDataFresh(data) {\n        const now = new Date();\n        const dataLastUpdate = new Date(data.updatedAt);\n\n        return now - dataLastUpdate < OSM_DATA_MAX_AGE_MS;\n    }\n\n    updateData() {\n        if (this.state.zoom > MIN_ZOOM_TO_LOAD_DATA && this.state.area) {\n            // Try to retrieve previously saved data for this area\n            get(this.state.area)\n                .then(data => {\n                    console.debug('IndexedDB result:', data);\n                    \n                    if (data && this.isDataFresh(data)) {\n                        console.debug('IndexedDB data is fresh.');\n                        this.setState({ geoJson: data.geoJson })\n                    } else {\n                        console.debug(`Couldn't find data for area ${this.state.area} or it isn't fresh, hitting OSM...`);\n                        this.setState({ loading: true });\n\n                        OSMController.getData({ area: this.state.area })\n                            .then(data => {\n                                set(this.state.area, {\n                                    geoJson: data.geoJson,\n                                    updatedAt: new Date()\n                                });\n\n                                this.setState({\n                                    geoJson: data.geoJson,\n                                    loading: false\n                                });\n                            });\n                    }\n                })\n                .catch(e => {\n                    notification['error']({\n                        message: 'Erro',\n                        description:\n                            'Ocorreu um erro ao tentar recuperar os dados salvos no IndexedDB.',\n                    });\n                });\n        } else {\n            this.setState({ loading: false });\n        }\n    }\n\n    onMapStyleChange(newMapStyle) {\n        this.setState({ mapStyle: newMapStyle});\n    }\n\n    onLayersChange(id, newVal) {\n        let newLayers = Object.assign([], this.state.layers);\n        let modifiedLayer = newLayers.filter(l => l.id === id)[0];\n        modifiedLayer.isActive = newVal;\n\n        this.setState({ layers: newLayers });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.location !== prevProps.location) {\n            this.onRouteChanged();\n        }\n\n        if (this.state.area !== prevState.area) {\n            console.debug(`Changed area from ${prevState.area} to ${this.state.area}`);\n            \n            this.updateData();\n\n            // Only redo the query if we need new data\n            // if (!doesAContainsB(largestBoundsYet, newBounds)) {\n            //     this.updateData();\n            //     largestBoundsYet = newBounds;\n\n            //     if (DEBUG_BOUNDS_OPTIMIZATION) {\n            //         this.updateDebugPolygon(largestBoundsYet, 1);\n            //     }\n            // }\n        }\n        \n        if (this.state.zoom !== prevState.zoom ||\n            this.state.lat !== prevState.lat ||\n            this.state.lng !== prevState.lng) {\n                let params = '?';\n                params += `lat=${this.state.lat.toFixed(7)}`;\n                params += `&lng=${this.state.lng.toFixed(7)}`;\n                params += `&z=${this.state.zoom.toFixed(2)}`;\n                this.props.history.push({\n                    search: params\n                })\n        }\n    }\n\n    onRouteChanged() {\n        // @todo Fix infinite loop\n        // this.setState(this.getParamsFromURL());\n    }\n\n    onMapMoved(newState) {\n        // Ignore new area changes from Map\n        // if (this.state.area) {\n        //     delete newState.area;\n        // }\n\n        this.setState(newState);\n    }\n\n    render() {\n        return (\n            <div>\n                <Map\n                    data={this.state.geoJson}\n                    layers={this.state.layers}\n                    style={this.state.mapStyle}\n                    zoom={this.state.zoom}\n                    center={this.state.center}\n                    updateData={this.updateData}\n                    onMapMoved={this.onMapMoved}\n                />\n\n                <h1 className=\"areaName\">\n                    {this.state.area}\n                </h1>\n\n                <MapStyleSwitcher onMapStyleChange={this.onMapStyleChange}/>\n \n                <LayersPanel\n                    layers={this.state.layers}\n                    onLayersChange={this.onLayersChange}\n                />\n\n                {\n                    this.state.loading &&\n                    <Spinner />\n                }\n            </div>\n        );\n    }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}