{"version":3,"sources":["img/itdp.png","img/ucb.png","img/logo_green.svg","img/normal.png","img/satelite.png","constants.js","Map.js","Spinner.js","CitySwitcherBackdrop.js","TopBar.js","MapStyleSwitcher.js","LayersPanel.js","utils.js","OSMController.js","Storage.js","geojsonUtils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MAPBOX_ACCESS_TOKEN","DEFAULT_LNG","DEFAULT_LAT","DEFAULT_ZOOM","IS_MOBILE","window","matchMedia","concat","matches","geocodingClient","mbxGeocoding","accessToken","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMapMoved","bind","assertThisInitialized","e","coords","lngLat","features","properties","layer","layers","find","l","id","split","html","name","popup","setLngLat","setHTML","addTo","map","hoverPopup","remove","sw","getBounds","getSouthWest","ne","getNorthEast","lat","lng","_this2","console","debug","setMaxBounds","reverseGeocode","query","types","limit","send","then","response","body","place","searchBar","setBbox","bbox","once","area","place_name","catch","err","error","message","getCenter","zoom","getZoom","toConsumableArray","filters","f","f2","_this3","getMapboxFilterForLayer","style","borderColor","addLayer","type","source","description","paint","_objectSpread","line-color","line-width","lineWidth","borderStyle","line-dasharray","filter","lineColor","borderWidth","lineStyle","interactiveId","on","length","getCanvas","cursor","selectedCycleway","setFeatureState","highlight","showPopup","_this4","addSource","data","generateId","slice","reverse","forEach","addDynamicLayer","prevProps","_this5","getSource","setData","showSatellite","setLayoutProperty","center","setCenter","isActive","join","_this6","mapboxgl","container","mapContainer","MapboxGeocoder","language","placeholder","countries","addControl","cityPicker","marker","clearOnBlur","flyTo","result","flyToPos","document","querySelector","classList","clear","NavigationControl","showCompass","geolocate","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","longitude","latitude","initLayers","Popup","closeOnClick","closeButton","className","_this7","react_default","a","createElement","ref","el","Component","Spinner","city","fontSize","role","aria-label","viewBox","cx","cy","r","fill","strokeWidth","strokeMiterlimit","CitySwitcherBackdrop","onClick","onClose","es_button","size","TopBar","Modal","info","title","content","href","target","rel","src","itdp","alt","ucb","onOk","add","focus","get","set","updatedAt","parts","state","lastUpdate","toLocaleString","height","logo","showCityPicker","icon","color","popover","placement","maxWidth","ghost","forceUpdate","arrowPointAtCenter","marginLeft","divider","downloadData","MapStyleSwitcher","selected","options","img","normal","satellite","prevState","onMapShowSatelliteChanged","option","i","setState","key","LayersPanel","newVal","onLayersChange","tooltip","onChange","opacity","background","borderLeft","borderRight","lengths","keys","fontWeight","Math","round","es_switch","checked","slugify","str","RegExp","toString","toLowerCase","replace","c","charAt","indexOf","typeSizes","undefined","boolean","number","string","item","object","reduce","total","sizeOf","value","servers","OSMController","constraints","areaId","f_inner","massageLayersData","Promise","resolve","reject","geoJson","$","getJSON","encodeURI","nominatimData","osm_id","getQuery","encodedQuery","requests","_loop","endpoint","elements","abort","osmtogeojson","flatProperties","isLastRemainingRequest","status","fail","statusText","notification","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Storage","firebase","initializeApp","db","firestore","collection","querySnapshot","doc","compressed","pako","deflate","JSON","stringify","to","gzipCompress","jsonStr","part","slug","saveToFirestore","part1","ceil","part2","exists","buffer","getDataFromDB","parse","toDate","withRouterAndRef","Wrapped","WithRouter","withRouter","_ref","forwardRef","otherProps","objectWithoutProperties","assign","WithRouterAndRef","React","displayName","App","updateData","updateLengths","urlParams","getParamsFromURL","loading","getLayers","mapStyle","z","parseFloat","storage","newLengths","URLSearchParams","location","search","paramsObj","Date","getData","now","save","dataUpdatedAt","force","getDataFromOSM","load","isDataFresh","newLayers","feature","partsToMatch","propertyKey","cleanUpOSMTags","fileName","blob","Blob","saveAs","downloadObjectAsJson","onRouteChanged","params","toFixed","history","push","newState","src_TopBar_0","src_CitySwitcherBackdrop_0","src_Map_0","src_MapStyleSwitcher_0","src_LayersPanel_0","src_Spinner_0","Boolean","hostname","match","ReactDOM","render","react_router_dom","src_App_0","app","ciclomapa","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b0ac393.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/itdp.c441e7e0.png\";","module.exports = __webpack_public_path__ + \"static/media/ucb.8a36a689.png\";","module.exports = __webpack_public_path__ + \"static/media/logo_green.d4480602.svg\";","module.exports = __webpack_public_path__ + \"static/media/normal.9a5dc9c9.png\";","module.exports = __webpack_public_path__ + \"static/media/satelite.a853a709.png\";","export const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21kYWxiZW0iLCJhIjoiY2pnbXhjZnplMDJ6MjMzbnk0OGthZGE1ayJ9.n1flNO8ndRYKQcR9wNIT9w';\n\nexport const DEFAULT_BORDER_WIDTH = 3;\n\nexport const DEFAULT_AREA = 'Fortaleza, Ceará, Brazil';\nexport const DEFAULT_LNG = -38.5225359;\nexport const DEFAULT_LAT = -3.7719909;\nexport const DEFAULT_ZOOM = 10.9;\n\nconst ONE_DAY_MS = 1000 * 60 * 60 * 24;\nexport const OSM_DATA_MAX_AGE_MS = 7 * ONE_DAY_MS;\n\nexport const MIN_ZOOM_TO_LOAD_DATA = 10;\n\nexport const TOPBAR_HEIGHT = 64;\n\nexport const MOBILE_MAX_WIDTH = '430px';\nexport const DESKTOP_MIN_WIDTH = '430px';\nexport const IS_MOBILE = window.matchMedia && window.matchMedia(`(max-width: ${MOBILE_MAX_WIDTH})`).matches;","import React, { Component } from 'react';\n\nimport mapboxgl from 'mapbox-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\n// import turfLength from '@turf/length';\n\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder'\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css'\n\nimport mbxGeocoding from '@mapbox/mapbox-sdk/services/geocoding';\n\nimport { MAPBOX_ACCESS_TOKEN, IS_MOBILE } from './constants.js'\n\nimport './Map.css'\n\n\nconst geocodingClient = mbxGeocoding({ accessToken: MAPBOX_ACCESS_TOKEN });\n\n\nclass Map extends Component {\n    map;\n    popup;\n    searchBar;\n    hoverPopup;\n    selectedCycleway;\n\n    constructor(props) {\n        super(props);\n\n        this.onMapMoved = this.onMapMoved.bind(this);\n    }\n\n    showPopup(e) {\n        const coords = e.lngLat;\n        const props = e.features[0].properties;\n\n        const layer = this.props.layers.find(l =>\n            l.id === e.features[0].layer.id.split('--')[0]\n        );\n\n        let html = '';\n\n        if (props.name) {\n            html += `<h2>${props.name}</h2>`;\n        } else {\n            html += '<i>Sem nome</i>';\n        }\n        \n        html += `<p>Tipo: <b>${layer.name}</b></p>`;\n\n        // html += `<h3>Tipo: ${layer.name}</h3>`;\n        // html += `<p>${layer.description}</p>`;\n\n        // const prettyProps = JSON.stringify(props, null, 2)\n        //     .replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')\n        //     .replace(/\"|,|\\{|\\}/g, '');\n        // html += prettyProps;\n\n        html += `\n            <a\n                target=\"_BLANK\"\n                rel=\"noopener\"\n                href=\"https://www.openstreetmap.org/${props.id}\"\n            >\n                Editar no OSM ›\n            </a>\n    `;\n\n        this.popup.setLngLat(coords)\n            .setHTML(html)\n            .addTo(this.map);\n    }\n\n    showHoverPopup(e) {\n        const coords = e.lngLat;\n\n        const layer = this.props.layers.find(l =>\n            l.id === e.features[0].layer.id.split('--')[0]\n        );\n\n        this.hoverPopup.setLngLat(coords)\n            .setHTML(`<h3>${layer.name}<h3>`)\n            .addTo(this.map);\n    }\n\n    hidePopup() {\n        this.popup.remove();\n    }\n\n    // southern-most latitude, western-most longitude, northern-most latitude, eastern-most longitude\n    getCurrentBBox() {\n        const fallback = \"-23.036345361742164,-43.270405878917785,-22.915284125684607,-43.1111041211104\";\n\n        if (this.map) {\n            const sw = this.map.getBounds().getSouthWest();\n            const ne = this.map.getBounds().getNorthEast();\n            return `${sw.lat},${sw.lng},${ne.lat},${ne.lng}`;\n        } else {\n            return fallback;\n        }\n    }\n\n    reverseGeocode(lngLat) {\n        console.debug('lngLat', lngLat);\n\n        if (!lngLat || !lngLat[0] || !lngLat[1]) {\n            console.error('Something wrong with lngLat passed.');\n            return;\n        }\n\n        // Clear previous map panning limits\n        this.map.setMaxBounds();\n\n        geocodingClient\n            .reverseGeocode({\n                query: lngLat,\n                types: ['place'],\n                limit: 1\n            })\n            .send()\n            .then(response => {\n                const features = response.body.features;\n\n                console.debug('reverseGeocode', features);\n\n                if (features && features[0]) {\n                    const place = features[0];\n\n                    if (this.searchBar) {\n                        this.searchBar.setBbox(place.bbox);\n                    }\n\n                    this.map.once('moveend', () => {\n                        this.map.setMaxBounds([\n                            [place.bbox[0]-0.15, place.bbox[1]-0.15], // Southwest coordinates\n                            [place.bbox[2]+0.15, place.bbox[3]+0.15]  // Northeast coordinates\n                        ]); \n                    });\n                    \n                    this.props.onMapMoved({area: place.place_name});\n                }\n            })\n            .catch(err => {\n                console.error(err.message);\n            });\n    }\n\n    onMapMoved() {\n        const lat = this.map.getCenter().lat;\n        const lng = this.map.getCenter().lng;\n        const zoom = this.map.getZoom();\n\n        this.props.onMapMoved({\n            lat: lat,\n            lng: lng,\n            zoom: zoom,\n        });\n    }\n\n    getMapboxFilterForLayer(l) {\n        return [\n            \"any\",\n            ...l.filters.map(f =>\n                typeof f[0] === 'string' ?\n                    [\"==\", [\"get\", f[0]], f[1]]\n                    :\n                    [\"all\",\n                        ...f.map(f2 =>\n                            [\"==\", [\"get\", f2[0]], f2[1]]\n                        )\n                    ]\n            )\n        ];\n    }\n\n    addDynamicLayer(l) {\n        const filters = this.getMapboxFilterForLayer(l);\n\n        // Check if layer has a border color set. If that's the case the logic is a\n        //  little different and we'll need 2 layers, one for the line itself and \n        //  another for the line underneath which creates the illusion of a border.\n        if (l.style.borderColor) {\n            // Border\n            this.map.addLayer({\n                \"id\": l.id+'--border',\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.borderColor,\n                    \"line-width\": [\n                        \"interpolate\",\n                            [\"exponential\", 1.5],\n                            [\"zoom\"],\n                            10, 2,\n                            18, l.style.lineWidth*3\n                    ],\n                    ...(l.style.borderStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            }, 'road-label-small');\n\n            // Line\n            this.map.addLayer({\n                \"id\": l.id,\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.lineColor,\n                    \"line-width\": [\n                        \"interpolate\",\n                            [\"exponential\", 1.5],\n                            [\"zoom\"],\n                            10, 2,\n                            18, (l.style.lineWidth - l.style.borderWidth)*3\n                    ],\n                    ...(l.style.lineStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            }, 'road-label-small');\n        } else {\n            this.map.addLayer({\n                \"id\": l.id,\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.lineColor,\n                    \"line-width\": [\n                        \"interpolate\",\n                            [\"exponential\", 1.5],\n                            [\"zoom\"],\n                            10, 2,\n                            18, l.style.lineWidth*3\n                    ],\n                    ...(l.style.lineStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            }, 'road-label-small');\n        }\n\n        \n        // Interactions\n\n        const interactiveId = l.style.borderColor ? \n            l.id + '--border'\n            : l.id;\n\n        this.map.on(\"mouseenter\", interactiveId, e => {\n            if (e.features.length > 0) {\n                // Cursor\n                this.map.getCanvas().style.cursor = 'pointer';\n\n                // Hover style\n                // if (hoveredCycleway) {\n                //     this.map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: false });\n                // }\n                // hoveredCycleway = e.features[0].id;\n                // this.map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: true });\n\n                // this.showHoverPopup(e);\n            }\n        });\n\n        this.map.on(\"mouseleave\", interactiveId, e => {\n            // Hover style\n            // if (hoveredCycleway && !selectedCycleway) {\n                // this.map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: false });\n\n                // Cursor cursor\n                this.map.getCanvas().style.cursor = '';\n            // }\n            // hoveredCycleway = null;\n        });\n\n        this.map.on(\"click\", interactiveId, e => {\n            if (e.features.length > 0) {\n                if (this.selectedCycleway) {\n                    this.map.setFeatureState({ source: 'osm', id: this.selectedCycleway }, { highlight: false });\n                }\n                this.selectedCycleway = e.features[0].id;\n                this.map.setFeatureState({ source: 'osm', id: this.selectedCycleway }, { highlight: true });\n\n                this.showPopup(e);\n            }\n        });\n    }\n\n    initLayers() {\n        console.debug('initLayers');\n\n        this.map.addSource(\"osm\", {\n            \"type\": \"geojson\",\n            \"data\": this.props.data || {\n                'type': 'FeatureCollection',\n                'features': []\n            },\n            \"generateId\": true\n        });\n\n        // In GeoJSON layers are from most important to least important, but we \n        //   want the most important ones to be on top.\n        // Slice is used here to don't destructively reverse the original array.\n        this.props.layers.slice().reverse().forEach(l => {\n            this.addDynamicLayer(l);\n        }); \n\n        // Temporarily disable this feature\n        // if (!IS_MOBILE) {\n        //     this.map.on('sourcedata', e => {\n        //         if (e.isSourceLoaded) {\n        //             let lengths = {};\n        //             this.props.layers.forEach( l => {\n        //                 const features = this.map.querySourceFeatures('osm', { filter: this.getMapboxFilterForLayer(l) });\n                        \n        //                 let length = 0;\n        //                 features.forEach(f => {\n        //                     length += turfLength(f);\n        //                 })\n    \n        //                 lengths[l.id] = length;\n        //             }); \n    \n        //             this.props.updateLengths(lengths);\n        //         }\n        //     });\n        // }\n\n        // this.map.addSource('some id', {\n        //     type: 'geojson',\n        //     // data: 'http://overpass-api.de/api/interpreter?data=node[amenity=school](bbox);out;(way[amenity=school](bbox);node(w););out;'\n        //     // data: 'http://overpass-api.de/api/interpreter?data=node[name=%22Im Tannenbusch%22][highway=bus_stop];out+skel;'\n        //     data: 'https://firebasestorage.googleapis.com/v0/b/ciclomapa-app.appspot.com/o/ciclomapa-Nitero%CC%81i%2C%20Rio%20De%20Janeiro%2C%20Brazil.json?alt=media&token=79733a19-009d-46f1-af7b-e55bb3dd9bb5'\n        // });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!this.map || !this.map.getSource('osm')) {\n            return;\n        }\n\n        if (this.props.data !== prevProps.data) {\n            this.map.getSource('osm').setData(this.props.data);\n        }\n        \n        if (this.props.showSatellite !== prevProps.showSatellite) {\n            this.map.setLayoutProperty('satellite', 'visibility', this.props.showSatellite ? 'visible' : 'none');\n        }\n        \n        // if (this.props.zoom !== prevProps.zoom) {\n        //     this.map.setZoom(this.props.zoom);\n        // }\n        \n        if (this.props.center !== prevProps.center) {\n            this.map.setCenter(this.props.center);\n        }\n        \n        // Compare only 'isActive' field of layers\n        if (this.props.layers.map(l => l.isActive).join() === prevProps.layers.map(l => l.isActive).join()) {\n            this.props.layers.forEach( l => {\n                this.map.setLayoutProperty(l.id, 'visibility', l.isActive ? 'visible' : 'none');\n                if (l.style.borderColor) {\n                    this.map.setLayoutProperty(l.id+'--border', 'visibility', l.isActive ? 'visible' : 'none');\n                }\n            })\n        }\n    }\n    \n    componentDidMount() {\n        mapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;\n        \n        this.map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: this.props.style,\n            center: this.props.center,\n            zoom: this.props.zoom\n        });\n\n        \n        // Native Mapbox map controls\n\n        if (!IS_MOBILE) {\n            this.searchBar = new MapboxGeocoder({\n                accessToken: mapboxgl.accessToken,\n                mapboxgl: mapboxgl,\n                language: 'pt-br',\n                placeholder: 'Buscar endereços, estabelecimentos, ...',\n                countries: 'br',\n                // collapsed: IS_MOBILE\n            });\n            this.map.addControl(this.searchBar, 'bottom-right');\n        }\n\n        const cityPicker = new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl,\n            language: 'pt-br',\n            placeholder: 'Buscar cidades brasileiras',\n            countries: 'br',\n            types: 'place',\n            marker: false,\n            clearOnBlur: true,\n            flyTo: false\n        });\n        cityPicker.on('result', result => {\n            console.debug('geocoder result', result);\n\n            let flyToPos;\n            if (result.place_name === 'Vitória, Espírito Santo, Brasil') {\n                flyToPos = [-40.3144,-20.2944];\n            } else {\n                flyToPos = result.result.center;\n            }\n            this.map.flyTo({\n                center: flyToPos\n            });\n\n            this.reverseGeocode(result.result.center);\n            \n            // Hide UI\n            // @todo refactor this to use React state\n            document.querySelector('body').classList.remove('show-city-picker');\n            cityPicker.clear();\n        });\n        this.map.addControl(cityPicker, 'top-left');\n\n        this.map.addControl(\n            new mapboxgl.NavigationControl({\n                showCompass: false\n            }),\n            'bottom-right'\n        );\n        const geolocate = new mapboxgl.GeolocateControl({\n            positionOptions: {\n                enableHighAccuracy: true\n            },\n            trackUserLocation: false\n        });\n        geolocate.on('geolocate', result => {\n            console.debug('geolocate', result); \n            this.reverseGeocode([result.coords.longitude, result.coords.latitude]);\n        });\n        this.map.addControl(geolocate, 'bottom-right');\n        \n        \n        // map.addControl(new mapboxgl.FullscreenControl({ container: document.querySelector('body') }));\n\n\n        // Listeners\n\n        this.map.on('load', () => {\n            this.initLayers();\n            this.onMapMoved();\n\n            this.map.on('moveend', this.onMapMoved);\n\n            // Further chages on styles reinitilizes layers\n            // this.map.on('style.load', () => {\n            //     this.initLayers();\n            //     this.onMapMoved();\n            // });\n        });\n\n\n        this.popup = new mapboxgl.Popup({\n            closeOnClick: false\n        });\n        this.popup.on('close', e => {\n            if (this.selectedCycleway) {\n                this.map.setFeatureState({ source: 'osm', id: this.selectedCycleway }, { highlight: false });\n            }\n            this.selectedCycleway = null;\n        });\n\n        this.hoverPopup = new mapboxgl.Popup({\n            closeButton: false,\n            className: 'hover-popup'\n        });\n        \n        // Initialize map data center\n        this.reverseGeocode(this.props.center);\n    }\n\n    render() {\n        return (\n            // Thanks https://blog.mapbox.com/mapbox-gl-js-react-764da6cc074a\n            <div ref={el => this.mapContainer = el}></div>\n        )\n    }\n}\n\nexport default Map;","import React, { Component } from 'react';\n\nimport './Spinner.css'\n\nclass Spinner extends Component {\n    render() {\n        const parts = this.props.area.split(',');\n        const city = parts[0];\n            // state = parts[1],\n            // country = parts[2];\n\n        return (\n            <div id=\"spinner\" className=\"loader-container\">\n                <div className=\"loader\">\n                    {\n                        this.props.error ?\n                            <div>\n                                <div style={{fontSize: '42px'}}>\n                                    <span role=\"img\" aria-label=\"Emoji triste\">😓</span>\n                                </div>\n\n                                <div className=\"content\">\n                                    <h2>\n                                        Ops!\n                                    </h2>\n\n                                    <div>\n                                        O OSM está mal humorado neste momento. Atualize a página para tentar denovo.\n                                    </div>\n                                </div>\n                            </div>\n                            :\n                            <div>\n                                <svg className=\"spinnersvg\" viewBox='25 25 50 50'>\n                                    <circle className=\"path\" cx='50' cy='50' r='20' fill='none' strokeWidth='6' strokeMiterlimit='10'\n                                    />\n                                </svg>\n\n                                <div className=\"content\">\n                                    <h2>\n                                        Carregando mapa cicloviário de <b>{city}</b>.\n                                    </h2>\n\n                                    <div>\n                                        Como é a primeira vez que você carrega esta cidade pode demorar um pouquinho :)\n                                    </div>\n                                </div>\n                            </div>\n\n                    }\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Spinner;","import React, { Component } from 'react';\n\nimport './CitySwitcherBackdrop.css'\n\nimport { Button, Icon } from 'antd';\n\n\nclass CitySwitcherBackdrop extends Component {\n    onClose() {\n        let body = document.querySelector('body');\n        body.classList.remove('show-city-picker')\n    }\n\n    render() {\n        return (\n            <div id=\"backdrop\" onClick={this.onClose}>\n                <Button\n                    id=\"closeBtn\"\n                    // ghost\n                    // shape=\"circle\"\n                    // icon=\"close\"\n                    type=\"link\"\n                    size=\"large\"\n                    onClick={this.onClose}\n                >\n                    Cancelar\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default CitySwitcherBackdrop;","import React, { Component } from 'react';\n\nimport { TOPBAR_HEIGHT, IS_MOBILE } from './constants'\n\nimport { Modal, Button, Divider, Popover, Icon } from 'antd';\n\nimport { get, set } from 'idb-keyval';\n\nimport itdp from './img/itdp.png';\nimport ucb from './img/ucb.png';\nimport logo from './img/logo_green.svg';\n\nimport './TopBar.css'\n\nclass TopBar extends Component {\n    info() {\n        Modal.info({\n            title: 'Sobre',\n            className: 'about-modal',\n            content: (\n                <div>\n                    <p>\n                        A plataforma CicloMapa é uma ferramenta que buscar ampliar a visibilidade das infraestruturas cicloviárias mapeadas no OpenStreetMap e engajar uma comunidade de mapeadores para atualização colaborativa de dados e incidência em políticas públicas de mobilidade urbana.\n                    </p>\n\n                    <p>\n                        Este é um projeto Open Source, e seu código pode ser encontrado no <a href=\"https://github.com/cmdalbem/ciclomapa/\">GitHub</a>.\n                    </p>\n\n                    <p>\n                        Para mais informações sobre o projeto e tutoriais de como contribur com o mapeamento da sua cidade usando o OpenStreetMaps acesse nossos <a href=\"https://www.uniaodeciclistas.org.br/atuacao/ciclomapa/\">tutoriais no site da UCB</a>.\n                    </p>\n\n                    <div>\n                        Realização:\n\n                        <div className=\"logos\">\n                            <a href=\"http://itdpbrasil.org\" target=\"_BLANK\" rel=\"noopener noreferrer\">\n                                <img src={itdp} alt=\"Logo do ITDP\"></img>\n                            </a>\n                            <a href=\"https://www.uniaodeciclistas.org.br/\" target=\"_BLANK\" rel=\"noopener noreferrer\">\n                                <img src={ucb} alt=\"Logo da UCB\"></img>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            ),\n            onOk() { },\n        });\n    }\n\n    showCityPicker() {\n        let body = document.querySelector('body');\n        body.classList.add('show-city-picker');\n        body.querySelector('.mapboxgl-ctrl-top-left .mapboxgl-ctrl-geocoder input').focus();\n    }\n\n    componentDidMount() {\n        get('hasSeenWelcomeMsg')\n                .then(data => {\n                    if (!data) {\n                        this.info();\n                        set('hasSeenWelcomeMsg', true);\n                    }\n                });\n    }\n\n    render() {\n        const parts = this.props.title.split(',');\n        const city = parts[0], \n            state = parts[1];\n            // country = parts[2];\n        let updatedAt;\n\n        if (this.props.lastUpdate) {\n            updatedAt = this.props.lastUpdate.toLocaleString('pt-BR');\n        }\n        \n        return (\n            <div className=\"topbar\" style={{height: TOPBAR_HEIGHT}}>\n                <h1 id=\"logo\">\n                    <img src={logo} alt=\"CicloMapa\"></img>\n                </h1>\n\n                <div>\n                    <Button \n                        size={IS_MOBILE ? 'default' : 'large'}\n                        onClick={this.showCityPicker}\n                    >\n                        <h3 className=\"areaname\">\n                            <span className=\"state\">\n                                {state}\n                            </span>\n                            <span className=\"city\">\n                                {city}\n                            </span> \n\n                            <Icon\n                                type=\"down\"\n                                size=\"small\"\n                                style={{ fontSize: '16px', color: '#4ba96e' }}\n                            >\n                            </Icon>\n                        </h3>\n                    </Button>\n\n                    {\n                        updatedAt &&\n                        <span className=\"data-tooltip\">\n                            <Popover\n                                placement=\"bottom\"\n                                content={(\n                                    <div style={{maxWidth: 300}}>\n                                        <div>\n                                            Dados obtidos do OpenStreetMaps em <b>{updatedAt}</b>.\n                                        </div>\n\n                                        <Button\n                                            size=\"small\"\n                                            icon=\"redo\"\n                                            type=\"danger\" ghost\n                                            onClick={this.props.forceUpdate}\n                                        >\n                                            Atualizar\n                                        </Button>\n                                    </div>\n                                )}\n                                arrowPointAtCenter={true}\n                            >\n                                <Icon type=\"info-circle\" style={{ marginLeft: '8px' }}/>\n                            </Popover>\n                        </span>\n                            \n                    }\n                </div>\n                \n                <div className=\"nav-links\">\n                    <Button\n                        size=\"large\"\n                        type=\"link\"\n                        onClick={this.info}\n                    >\n                        Sobre\n                    </Button>\n\n                    <Divider type=\"vertical\" />\n\n                    <Button\n                        size=\"large\"\n                        type=\"link\"\n                        onClick={this.props.downloadData}\n                    >\n                        <Icon type=\"download\" /> Dados\n                    </Button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TopBar;","import React, { Component } from 'react';\n\n// import light from './img/light.png';\nimport normal from './img/normal.png';\nimport satellite from './img/satelite.png';\n\nimport './MapStyleSwitcher.css'\n\nclass MapStyleSwitcher extends Component {\n    state = { selected: 0 };\n\n    options = [\n        {\n            name: 'dark',\n            img: normal,\n            // url: 'mapbox://styles/cmdalbem/ck14cy14g1vb81cp8hprnh4nx'\n        },\n        // {\n        //     img: light,\n        //     url: 'mapbox://styles/cmdalbem/cjxseldep7c0a1doc7ezn6aeb'\n        // },\n        {\n            name: 'satellite',\n            img: satellite\n        },\n    ];\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state !== prevState) {\n            const selected = this.options[this.state.selected]\n            // this.props.onMapStyleChange(selected.url)\n\n            this.props.onMapShowSatelliteChanged(selected.name === 'satellite');\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"switcher-bar\">\n                {\n                    this.options.map( (option, i) =>\n                        <div\n                            onClick={() => this.setState({ selected: i })}\n                            className={this.state.selected === i ? 'selected' : ''}\n                            key={option.img}\n                        >\n                            <img src={option.img} alt=\"\"/>\n                        </div>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default MapStyleSwitcher;","import React, { Component } from 'react';\n\nimport { Switch, Tooltip } from 'antd';\n\nimport './LayersPanel.css';\n\n\nclass LayersPanel extends Component {\n    onChange(id, newVal) {\n        this.props.onLayersChange(id, newVal)\n    }\n\n    render() {\n        return (\n            <div className=\"layers-panel\">\n                {\n                    this.props.layers &&\n                    this.props.layers.map(l =>\n                        <Tooltip\n                            placement=\"left\"\n                            title={l.description}\n                            arrowPointAtCenter={true}\n                            key={l.name}\n                        >\n                            <div\n                                className=\"layer-row\"\n                                onClick={this.onChange.bind(this, l.id, !l.isActive)}\n                                style={{ opacity: l.isActive ? 1 : .5 }}\n                            >\n                                <div>\n                                    <span\n                                        className=\"layer-miniature\" \n                                        style={{\n                                            height: l.style.lineWidth * 2,\n                                            background: l.style.lineStyle === 'solid' ?\n                                                l.style.lineColor\n                                                : `repeating-linear-gradient(90deg, ${l.style.lineColor}, ${l.style.lineColor} 3px, transparent 3px, transparent 6px)`,\n                                            borderColor: l.style.borderColor,\n                                            borderStyle: l.style.borderStyle,\n                                            borderWidth: l.style.borderWidth ? l.style.borderWidth/2 : '0',\n                                            borderLeft: 'none',\n                                            borderRight: 'none'\n                                    }}\n                                    ></span>\n\n                                    <span className=\"layer-name\">\n                                        {l.name} \n                                    </span>\n\n                                    {\n                                        this.props.lengths\n                                            && Object.keys(this.props.lengths).length > 0\n                                            && this.props.lengths[l.id] > 0\n                                            && <span className=\"layer-length\" style={{ fontWeight: 300, opacity: .5 }}>\n                                                {Math.round(this.props.lengths[l.id])}km\n                                        </span>\n                                    }\n                                </div>\n\n                                <Switch size=\"small\" checked={l.isActive} />\n                            </div>\n                        </Tooltip>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default LayersPanel;","import { saveAs } from 'file-saver';\n\n\nexport function doesAContainsB(a, b) {\n    if (a && b) {\n        return a.getNorth() >= b.getNorth()\n            && a.getSouth() <= b.getSouth()\n            && a.getEast() >= b.getEast()\n            && a.getWest() <= b.getWest();\n    } else {\n        return null;\n    }\n}\n\n// Thanks https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\nexport function downloadObjectAsJson(data, fileName) {\n    const blob = new Blob([JSON.stringify(data)], {\n        type: 'application/json',\n        name: fileName\n    }); \n    saveAs(blob, fileName);\n}\n\nexport function createPolygonFromBBox(bbox) {\n    return {\n        'type': 'Feature',\n        'geometry': {\n            'type': 'Polygon',\n            'coordinates': [\n                [\n                    bbox.getNorthWest().toArray(),\n                    bbox.getNorthEast().toArray(),\n                    bbox.getSouthEast().toArray(),\n                    bbox.getSouthWest().toArray(),\n                    bbox.getNorthWest().toArray()\n                ]\n            ]\n        }\n    };\n}\n\n// Thanks https://medium.com/@mhagemann/the-ultimate-way-to-slugify-a-url-string-in-javascript-b8e4a0d849e1\nexport function slugify(str) {\n  const a = 'àáäâãåăæçèéëêǵḧìíïîḿńǹñòóöôœøṕŕßśșțùúüûǘẃẍÿź·/_,:;'\n  const b = 'aaaaaaaaceeeeghiiiimnnnooooooprssstuuuuuwxyz------'\n  const p = new RegExp(a.split('').join('|'), 'g')\n  return str.toString().toLowerCase()\n    .replace(/\\s+/g, '-') // Replace spaces with -\n    .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\n    .replace(/&/g, '-and-') // Replace & with ‘and’\n    .replace(/[^\\w-]+/g, '') // Remove all non-word characters\n    .replace(/--+/g, '-') // Replace multiple - with single -\n    .replace(/^-+/, '') // Trim - from start of text\n    .replace(/-+$/, '') // Trim - from end of text\n}\n\nconst typeSizes = {\n    \"undefined\": () => 0,\n    \"boolean\": () => 4,\n    \"number\": () => 8,\n    \"string\": item => 2 * item.length,\n    \"object\": item => !item ? 0 : Object\n        .keys(item)\n        .reduce((total, key) => sizeOf(key) + sizeOf(item[key]) + total, 0)\n};\n\nexport const sizeOf = value => typeSizes[typeof value](value);","/* eslint-disable no-loop-func */\nimport osmtogeojson from 'osmtogeojson'\n\nimport $ from 'jquery'\n\nimport { notification } from 'antd';\n\nimport { DEFAULT_BORDER_WIDTH } from './constants.js'\nimport { slugify } from './utils.js'\n\nimport * as layers from './layers.json';\n\nconst servers = [\n    'https://overpass.kumi.systems/api/interpreter',\n    'https://overpass-api.de/api/interpreter',\n    'http://overpass.openstreetmap.fr/api/interpreter',\n    'http://overpass.osm.ch/api/interpreter',\n    'https://overpass.nchc.org.tw'\n];\n\nclass OSMController {\n    static getQuery(constraints) {\n        const bbox = constraints.bbox;\n        // const area = constraints.area.split(',')[0];\n        const areaId = constraints.areaId;\n\n        const body = layers.default.map(l =>\n            l.filters.map(f =>\n                'way'\n                + (typeof f[0] === 'string' ?\n                    `[\"${f[0]}\"=\"${f[1]}\"]`\n                    :\n                    f.map(f_inner =>\n                        `[\"${f_inner[0]}\"=\"${f_inner[1]}\"]`\n                    ).join(\"\"))\n                 + (bbox ? \n                    `(${bbox});\\n`\n                    :\n                    `(area.a);\\n`)\n            ).join(\"\")\n        ).join(\"\");\n\n        return `\n            [out:json][timeout:500];\n            ${!bbox && `area(${areaId})->.a;`}\n            (\n                ${body}\n            );\n            out body geom;\n        `;\n    }\n\n    static massageLayersData() {\n        layers.default.forEach(l => {\n            // Omitted values\n            l.style.lineStyle = l.style.lineStyle || 'solid';\n            l.isActive = l.isActive !== undefined ? l.isActive : true;\n\n            if (l.style.borderColor) {\n                l.style.borderStyle = l.style.borderStyle || 'solid';\n                l.style.borderWidth = l.style.borderWidth || DEFAULT_BORDER_WIDTH;\n            }\n            \n            // Generate an ID based on name\n            l.id = slugify(l.name);\n        });\n\n        return layers.default;\n    }\n\n    static getLayers() {\n        return this.massageLayersData();\n    }\n\n    static getData(constraints) {\n        return new Promise((resolve, reject) => {\n            let geoJson;\n\n            $.getJSON(\n                `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURI(constraints.area)}`,\n                nominatimData => {\n                    console.debug('nominatimData', nominatimData);\n\n                    // Source: https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#By_area_.28area.29\n                    let areaId\n                    if (constraints.area === 'Vitória, Espirito Santo, Brazil') {\n                        areaId = 3601825817;\n                    } else if (constraints.area === 'Brasília, Distrito Federal, Brazil') {\n                        areaId = 3602662005;\n                    } else {\n                        areaId = 3600000000 + nominatimData[0].osm_id;\n                    }\n\n                    const query = OSMController.getQuery({ areaId: areaId});\n                    \n                    console.debug('generated query: ', query);\n\n                    const encodedQuery = encodeURI(query);\n\n                    let requests = [];\n                    for (let i = 0; i < servers.length; i++) {\n                        const endpoint = servers[i] + '?data=' + encodedQuery;\n                        \n                        console.debug(i + ' OSM server: ' + servers[i]);\n\n                        requests[i] = $.getJSON(\n                            endpoint,\n                            data => {\n                                if (data.elements.length > 0) {\n                                    console.debug('SUCCESS! @ ' + i);\n                                    for (let r = 0; r < requests.length; r++) {\n                                        if (r !== i) {\n                                            console.debug('Aborting ' + r);\n                                            requests[r].abort();\n                                        }\n                                    }\n    \n                                    console.debug('osm data: ', data);\n                                    geoJson = osmtogeojson(data, { flatProperties: true });\n                                    console.debug('converted to geoJSON: ', geoJson);\n                                    \n                                    resolve({\n                                        geoJson: geoJson\n                                    });\n                                } else {\n                                    console.debug(`Server ${i} returned an empty result.`);\n\n                                    // Check if I'm the last one\n                                    let isLastRemainingRequest = true;\n                                    for (let r = 0; r < requests.length; r++) {\n                                        if (r !== i) {\n                                            if (requests[r].status === undefined) {\n                                                isLastRemainingRequest = false;\n                                            }\n                                        }\n                                    }\n                                    if (isLastRemainingRequest) {\n                                        console.debug('I was the last one, so probably the result is empty.');\n                                        resolve({ geoJson: null });\n                                    }\n                                }\n                            }).fail(e => {\n                                if (e.statusText !== 'abort') {\n                                    console.error(`Servidor ${i} deu erro:`, e);\n                                }\n                            });\n                    }\n                    \n                    // console.error(\"Deu erro! Saca só:\", e);\n                    // notification['error']({\n                    //     message: 'Erro',\n                    //     description:\n                    //         `Ops, erro na API do Overpass (erro ${e.status}). Abra o console para ver mais detalhes.`,\n                    // });\n                    // reject();\n\n                }).fail(e => {\n                    console.error(\"Deu erro! Saca só:\", e);\n                    notification['error']({\n                        message: 'Erro',\n                        description:\n                            'Ops, erro na API do Nominatim. Abra o console para ver mais detalhes.',\n                    });\n\n                    reject();\n                });\n        });\n    }\n}\n\nexport default OSMController;","import { get, set } from 'idb-keyval';\n\nimport firebase from 'firebase';\n\nimport { slugify, sizeOf } from './utils.js'\nimport { cleanUpOSMTags, gzipCompress } from './geojsonUtils.js'\n\n\nconst DISABLE_LOCAL_STORAGE = true;\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDUbMY3UuyJ9vVVBblhUR9L1B3TV6a3eRU\",\n    authDomain: \"ciclomapa-app.firebaseapp.com\",\n    databaseURL: \"https://ciclomapa-app.firebaseio.com\",\n    projectId: \"ciclomapa-app\",\n    storageBucket: \"ciclomapa-app.appspot.com\",\n    messagingSenderId: \"377722964538\",\n    appId: \"1:377722964538:web:bc0fada0b3db0587514303\"\n};\n\nclass Storage {\n    db;\n    buffer;\n    \n    constructor() {\n        firebase.initializeApp({\n            apiKey: firebaseConfig.apiKey,\n            authDomain: firebaseConfig.authDomain,\n            projectId: firebaseConfig.projectId\n        });\n\n        this.db = firebase.firestore();\n    }\n\n    getAllCitiesDocs() {\n        return new Promise(resolve => {\n            this.db.collection(\"cities\").get().then((querySnapshot) => {\n                console.debug('[Firestore] Documents found:');\n                querySnapshot.forEach((doc) => {\n                    console.debug('• ' + doc.id, ' => ', doc.data());\n                });\n    \n                resolve(querySnapshot);\n            });\n        });\n    }\n\n    compressJson(data) {\n        console.debug('Before: ', sizeOf(data));\n\n        // Minimize size by cleaning clearing OSM tags\n        // @todo DOESNT WORK because Mapbox needs the OSM tags to render the layers\n        // cleanUpOSMTags(data);\n        \n        // Compress with gzip\n        const compressed = gzipCompress(data);\n\n        console.debug('After: ', sizeOf(compressed));\n\n        return compressed;\n    }\n\n    saveToFirestore(name, jsonStr, updatedAt, part) {\n        let slug = slugify(name);\n\n        if (part === 2) {\n            slug += 2;\n        }\n\n        return this.db.collection('cities').doc(slug).set({\n            name: name,\n            geoJson: jsonStr,\n            updatedAt: updatedAt,\n            part: part || ''\n        });\n    }\n\n    save(name, geoJson, updatedAt) {\n        // Save to Local Storage\n        set(name, {\n            geoJson: geoJson,\n            updatedAt: updatedAt\n        });\n\n        // Save to Firestore\n        try {\n            const jsonStr = JSON.stringify(geoJson);\n\n            console.debug(`[Firebase] Saving document ${name}...`, geoJson);\n\n            // geoJson = this.compressJson(geoJson);\n            this.saveToFirestore(name, jsonStr, updatedAt)\n                .then(() => {\n                    console.debug(`[Firebase] Document ${name} written successfully.`);\n                }).catch(error => {\n                    // console.error(\"[Firebase] Error adding document: \", error);\n                    console.debug('[Firestore] Failed saving full data, splitting in 2...')\n\n                    const part1 = jsonStr.slice(0, Math.ceil(jsonStr.length/2));\n                    const part2 = jsonStr.slice(Math.ceil(jsonStr.length/2));\n\n                    this.saveToFirestore(name, part1, updatedAt, 1) \n                    .then(() => {\n                        console.debug(`[Firebase] Document ${name}1 written successfully.`);\n                    }).catch(error => {\n                        console.error(\"[Firebase] Error adding document: \", error);\n                    });        \n \n                    this.saveToFirestore(name, part2, updatedAt, 2)\n                    .then(() => {\n                        console.debug(`[Firebase] Document ${name}2 written successfully.`);\n                    }).catch(error => {\n                        console.error(\"[Firebase] Error adding document: \", error);\n                    });        \n\n                });\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    getDataFromDB(slug, resolve, reject) {\n        this.db.collection(\"cities\").doc(slug).get().then(doc => {\n            if (doc.exists) {\n                let data = doc.data();\n\n                console.debug(\"[Firebase] Document data:\", data);\n\n                // Decompress gzip\n                // data.geoJson = gzipDecompress(data.geoJson)\n\n                if (data.part === 1) {\n                    this.buffer = data.geoJson; \n                    return this.getDataFromDB(slug + '2', resolve, reject);\n                } else if (data.part === 2) {\n                    data.geoJson = this.buffer + data.geoJson;\n                }\n\n                // Massage data\n                data.geoJson = JSON.parse(data.geoJson);\n                data.updatedAt = data.updatedAt.toDate();\n\n                resolve(data);\n            } else {\n                console.debug(\"[Firebase] No document for: \", slug);\n                resolve();\n            }\n        }).catch(error => {\n            console.error(`[Firebase] Error getting document: ${slug}`, error);\n            reject();\n        });\n    }\n\n    load(name) {\n        const slug = slugify(name);\n\n        return new Promise((resolve, reject) => {\n            if (!DISABLE_LOCAL_STORAGE) {\n                get(name).then( local => {\n                    if (local) {\n                        resolve(local);\n                    } else {\n                        this.getDataFromDB(slug, resolve, reject);\n                    }\n                })\n            } else {\n                this.getDataFromDB(slug, resolve, reject);\n            }\n        });\n    }\n}\n\nexport default Storage;","import pako from 'pako';\n// import { gzip } from 'zlib';\n\n\nexport function gzipDecompress(data) {\n    return JSON.parse(pako.inflate(data), { to: 'string' });\n}\n\nexport function gzipCompress(data) {\n    const compressed = pako.deflate(JSON.stringify(data), { to: 'string' });\n\n    // Test if compression went OK\n    // const decompressed = JSON.parse(pako.inflate(compressed), { to: 'string' });\n    // console.log(decompressed);\n\n    return compressed;\n}\n\nexport function cleanUpOSMTags(data) {\n    data.features.forEach(feature => {\n        Object.keys(feature.properties).forEach(propertyKey => {\n            if (propertyKey !== 'id' &&\n                propertyKey !== 'name' &&\n                propertyKey !== 'type')\n                delete feature.properties[propertyKey];\n        });\n    });\n}\n\nexport function computeTypologies(data, layers) {\n    const DEBUG = false;\n\n    data.features.forEach(feature => {\n        if (DEBUG) {\n            console.debug(`${feature.properties.id} (${feature.properties.name})`);\n        }\n\n        if (!feature.properties.type) {\n            // Reverse layers orders so the most important ones override less important ones.\n            //   Slice is used here to don't destructively reverse the original array.\n            layers.slice().reverse().forEach(layer => {\n                let match = false;\n                layer.filters.forEach(filter => {\n                    let partsToMatch;\n                    if (typeof filter[0] === 'object') {\n                        partsToMatch = [false, false];\n                    } else {\n                        partsToMatch = [false];\n                    }\n\n                    Object.keys(feature.properties).forEach(propertyKey => {\n                        if (typeof filter[0] === 'object') {\n                            if ((propertyKey === filter[0][0] &&\n                                feature.properties[propertyKey] === filter[0][1])) {\n                                partsToMatch[0] = true;\n                            }\n\n                            if ((propertyKey === filter[1][0] &&\n                                feature.properties[propertyKey] === filter[1][1])) {\n                                partsToMatch[1] = true;\n                            }\n                        } else {\n                            if ((propertyKey === filter[0] &&\n                                feature.properties[propertyKey] === filter[1])) {\n                                partsToMatch[0] = true;\n                            }\n                        }\n                    });\n\n                    if ((typeof filter[0] === 'object' && partsToMatch[0] && partsToMatch[1])\n                        || partsToMatch[0]) {\n                        match = true;\n                        \n                        // \"Proibido\" layer should have priority over the rest\n                        if (!feature.properties.type || feature.properties.type !== 'Proibido') {\n                            feature.properties.type = layer.name;\n                        }\n                        // console.debug(`.  .  → ${feature.properties.name} (${feature.properties.id}) = ${layer.name}`);\n                    }\n\n                    // console.debug(`.  .  ${filter} ${match ? '✓' : ''}`);\n                });\n\n                if (DEBUG && match) {\n                    console.debug(`.  ${layer.name}`);\n                }\n            });\n        }\n    });\n}","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport { notification } from 'antd';\nimport \"antd/dist/antd.css\";\n\nimport Map from './Map.js'\nimport Spinner from './Spinner.js'\nimport CitySwitcherBackdrop from './CitySwitcherBackdrop.js'\nimport TopBar from './TopBar.js'\nimport MapStyleSwitcher from './MapStyleSwitcher.js'\nimport LayersPanel from './LayersPanel.js'\nimport OSMController from './OSMController.js'\nimport Storage from './Storage.js'\nimport { DEFAULT_LAT, DEFAULT_LNG, DEFAULT_ZOOM, OSM_DATA_MAX_AGE_MS } from './constants.js'\nimport { downloadObjectAsJson } from './utils.js'\nimport { computeTypologies, cleanUpOSMTags } from './geojsonUtils.js'\n\nimport './App.css';\n\nclass App extends Component {\n    geoJson;\n    storage;\n\n    constructor(props) {\n        super(props);\n\n        this.updateData = this.updateData.bind(this);\n        // this.onMapStyleChange = this.onMapStyleChange.bind(this);\n        this.onMapShowSatelliteChanged = this.onMapShowSatelliteChanged.bind(this);\n        this.onMapMoved = this.onMapMoved.bind(this);\n        this.onLayersChange = this.onLayersChange.bind(this);\n        this.downloadData = this.downloadData.bind(this);\n        this.forceUpdate = this.forceUpdate.bind(this);\n        this.updateLengths = this.updateLengths.bind(this);\n\n        const urlParams = this.getParamsFromURL();\n        this.state = {\n            geoJson: null,\n            loading: false,\n            layers: OSMController.getLayers(),\n            mapStyle: 'mapbox://styles/cmdalbem/ck14cy14g1vb81cp8hprnh4nx',\n            showSatellite: false,\n            zoom: urlParams.z || DEFAULT_ZOOM,\n            lengths: {},\n            area: '',\n            center: [\n                parseFloat(urlParams.lng) || DEFAULT_LNG,\n                parseFloat(urlParams.lat) || DEFAULT_LAT]\n        };\n\n        this.storage = new Storage();\n\n        if (this.state.area) {\n            this.updateData();\n        }\n    }\n\n    updateLengths(newLengths) {\n        this.setState({\n            lengths: newLengths\n        });\n    }\n\n    getParamsFromURL() {\n        const possibleParams = ['z', 'lat', 'lng'];\n        const urlParams = new URLSearchParams(this.props.location.search);\n        let paramsObj = {}\n\n        possibleParams.forEach( p => {\n            let value = urlParams.get(p);\n            if (value) {\n                paramsObj[p] = value;\n            }\n        })\n\n        return paramsObj;\n    }\n\n    isDataFresh(data) {\n        const now = new Date();\n        const dataLastUpdate = new Date(data.updatedAt);\n\n        return now - dataLastUpdate < OSM_DATA_MAX_AGE_MS;\n    }\n\n    forceUpdate() {\n        this.updateData(true);\n    }\n\n    getDataFromOSM(area) {\n        return OSMController.getData({ area: area })\n            .then(data => {\n                // Persist data\n                const now = new Date();\n                this.storage.save(area, data.geoJson, now);\n\n                this.setState({\n                    geoJson: data.geoJson,\n                    dataUpdatedAt: now,\n                    loading: false\n                });\n            }).catch(e => {\n                this.setState({\n                    error: true\n                });\n            });\n    }\n\n    updateData(force) {\n        if (this.state.area) {\n            if (force) {\n                this.setState({ loading: true });\n                this.getDataFromOSM(this.state.area);\n            } else {\n                // Try to retrieve previously saved data for this area\n                this.storage.load(this.state.area, force)\n                    .then(data => {\n                        if (data && this.isDataFresh(data)) {\n                            console.debug('Database data is fresh.');\n                            this.setState({\n                                geoJson: data.geoJson,\n                                dataUpdatedAt: new Date(data.updatedAt)\n                            });\n                        } else { \n                            console.debug(`Couldn't find data for area ${this.state.area} or it isn't fresh, hitting OSM...`);\n                            this.setState({ loading: true });\n                            this.getDataFromOSM(this.state.area);\n                        }\n                    }).catch(e => {\n                        notification['error']({\n                            message: 'Erro',\n                            description:\n                                'Ocorreu um erro ao acessar o banco de dados.',\n                        });\n                    });\n            }\n        } else {\n            this.setState({ loading: false });\n        }\n    }\n\n    // onMapStyleChange(newMapStyle) {\n    //     this.setState({ mapStyle: newMapStyle});\n    // }\n\n    onMapShowSatelliteChanged(showSatellite) {\n        this.setState({ showSatellite: showSatellite });\n    }\n\n    onLayersChange(id, newVal) {\n        let newLayers = Object.assign([], this.state.layers);\n        let modifiedLayer = newLayers.filter(l => l.id === id)[0];\n        modifiedLayer.isActive = newVal;\n\n        this.setState({ layers: newLayers });\n    }\n\n    downloadData() {\n        computeTypologies(this.state.geoJson, this.state.layers);\n        cleanUpOSMTags(this.state.geoJson);\n        downloadObjectAsJson(this.state.geoJson, `ciclomapa-${this.state.area}`);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.location !== prevProps.location) {\n            this.onRouteChanged();\n        }\n\n        if (this.state.area !== prevState.area) {\n            console.debug(`Changed area from ${prevState.area} to ${this.state.area}`);\n            \n            this.updateData();\n\n            // Only redo the query if we need new data\n            // if (!doesAContainsB(largestBoundsYet, newBounds)) {\n            //     this.updateData();\n            //     largestBoundsYet = newBounds;\n\n            //     if (DEBUG_BOUNDS_OPTIMIZATION) {\n            //         this.updateDebugPolygon(largestBoundsYet, 1);\n            //     }\n            // }\n        }\n\n        if (this.state.geoJson !== prevState.geoJson) {\n            if (!this.state.geoJson || (this.state.geoJson.features && this.state.geoJson.features.length === 0)) {\n                notification['warning']({\n                    message: 'Ops',\n                    description:\n                        'Não há dados cicloviários para esta cidade.',\n                });\n\n                // this.setState({\n                //     isDownloadUnavailable: true\n                // });\n            } else {\n                // this.setState({\n                //     isDownloadUnavailable: false\n                // });\n            }\n        }\n        \n        if (this.state.zoom !== prevState.zoom ||\n            this.state.lat !== prevState.lat ||\n            this.state.lng !== prevState.lng) {\n                let params = '?';\n                params += `lat=${this.state.lat.toFixed(7)}`;\n                params += `&lng=${this.state.lng.toFixed(7)}`;\n                params += `&z=${this.state.zoom.toFixed(2)}`;\n                this.props.history.push({\n                    search: params\n                })\n        }\n    }\n\n    onRouteChanged() {\n        // @todo Fix infinite loop\n        // this.setState(this.getParamsFromURL());\n    }\n\n    onMapMoved(newState) {\n        // Ignore new area changes from Map\n        // if (this.state.area) {\n        //     delete newState.area;\n        // }\n\n        this.setState(newState);\n    }\n\n    render() {\n        return (\n            <div>\n                <TopBar\n                    title={this.state.area}\n                    lastUpdate={this.state.dataUpdatedAt}\n                    downloadData={this.downloadData}\n                    // isDownloadUnavailable={this.state.isDownloadUnavailable}\n                    onMapMoved={this.onMapMoved}\n                    forceUpdate={this.forceUpdate}\n                />\n\n                <CitySwitcherBackdrop/>\n\n                <Map\n                    ref={(map) => { window.map = map }}\n                    data={this.state.geoJson}\n                    layers={this.state.layers}\n                    style={this.state.mapStyle}\n                    zoom={this.state.zoom}\n                    center={this.state.center}\n                    showSatellite={this.state.showSatellite}\n                    updateData={this.updateData}\n                    onMapMoved={this.onMapMoved}\n                    updateLengths={this.updateLengths}\n                />\n\n                <MapStyleSwitcher onMapShowSatelliteChanged={this.onMapShowSatelliteChanged}/>\n \n                <LayersPanel\n                    layers={this.state.layers}\n                    lengths={this.state.lengths}\n                    onLayersChange={this.onLayersChange}\n                />\n\n                {\n                    this.state.loading &&\n                    <Spinner area={this.state.area} error={this.state.error}/>\n                }\n            </div>\n        );\n    }\n}\n\nconst withRouterAndRef = Wrapped => {\n    const WithRouter = withRouter(({ forwardRef, ...otherProps }) => (\n        <Wrapped ref={forwardRef} {...otherProps} />\n    ))\n    const WithRouterAndRef = React.forwardRef((props, ref) => (\n        <WithRouter {...props} forwardRef={ref} />\n    ))\n    const name = Wrapped.displayName || Wrapped.name\n    WithRouterAndRef.displayName = `withRouterAndRef(${name})`\n    return WithRouterAndRef\n}\n\nexport default withRouterAndRef(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App ref={(app) => { window.ciclomapa = app }}/>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}