{"version":3,"sources":["img/itdp.png","img/ucb.png","img/light.png","img/normal.png","img/satelite.png","Map.js","constants.js","Spinner.js","CitySwitcherBackdrop.js","TopBar.js","MapStyleSwitcher.js","LayersPanel.js","utils.js","OSMController.js","geojsonUtils.js","Storage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","map","popup","selectedCycleway","MAPBOX_ACCESS_TOKEN","DEFAULT_LNG","DEFAULT_LAT","geocodingClient","mbxGeocoding","accessToken","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMapMoved","bind","assertThisInitialized","e","console","debug","features","coords","lngLat","properties","layer","layers","find","l","id","split","html","name","concat","setLngLat","setHTML","addTo","remove","sw","getBounds","getSouthWest","ne","getNorthEast","lat","lng","_this2","reverseGeocode","query","types","limit","send","then","response","body","place","setMaxBounds","bbox","area","place_name","catch","err","error","message","getCenter","zoom","getZoom","_this3","filters","toConsumableArray","f","f2","style","borderColor","addLayer","type","source","description","paint","objectSpread","line-color","line-width","lineWidth","borderStyle","line-dasharray","filter","lineColor","borderWidth","lineStyle","interactiveId","on","length","getCanvas","cursor","setFeatureState","highlight","showPopup","_this4","addSource","data","generateId","slice","reverse","forEach","addDynamicLayer","prevProps","getSource","setData","setStyle","center","setCenter","isActive","join","setLayoutProperty","_this5","mapboxgl","container","mapContainer","searchBar","MapboxGeocoder","language","placeholder","countries","addControl","cityPicker","marker","clearOnBlur","result","document","querySelector","classList","clear","NavigationControl","showCompass","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","initLayers","Popup","closeOnClick","_this6","react_default","a","createElement","ref","el","Component","Spinner","city","className","fontSize","role","aria-label","viewBox","cx","cy","r","fill","strokeWidth","strokeMiterlimit","CitySwitcherBackdrop","onClick","onClose","es_button","size","TopBar","Modal","info","title","content","href","target","rel","src","itdp","alt","ucb","onOk","add","focus","value","log","get","set","updatedAt","parts","state","isDownloadUnavailable","lastUpdate","toLocaleString","height","showCityPicker","icon","color","popover","placement","forceUpdate","marginLeft","arrowPointAtCenter","divider","downloadData","disabled","opacity","MapStyleSwitcher","selected","options","img","normal","url","light","satelite","prevState","onMapStyleChange","option","i","setState","key","LayersPanel","newVal","onLayersChange","tooltip","onChange","background","borderLeft","borderRight","es_switch","checked","slugify","str","RegExp","toString","toLowerCase","replace","c","charAt","indexOf","typeSizes","undefined","boolean","number","string","item","object","keys","reduce","total","sizeOf","servers","OSMController","constraints","areaId","f_inner","massageLayersData","Promise","resolve","reject","geoJson","$","getJSON","encodeURI","nominatimData","osm_id","getQuery","encodedQuery","requests","_loop","endpoint","elements","abort","osmtogeojson","flatProperties","isLastRemainingRequest","status","fail","statusText","notification","DEBUG","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Storage","firebase","initializeApp","db","firestore","collection","querySnapshot","doc","compressed","pako","deflate","JSON","stringify","to","gzipCompress","jsonStr","part","slug","saveToFirestore","part1","Math","ceil","part2","exists","buffer","getDataFromDB","parse","toDate","App","updateData","urlParams","getParamsFromURL","loading","getLayers","mapStyle","z","parseFloat","storage","URLSearchParams","location","search","paramsObj","Date","getData","now","save","dataUpdatedAt","force","getDataFromOSM","load","isDataFresh","newMapStyle","newLayers","assign","feature","match","partsToMatch","propertyKey","cleanUpOSMTags","fileName","blob","Blob","saveAs","downloadObjectAsJson","onRouteChanged","params","toFixed","history","push","newState","src_TopBar_0","src_CitySwitcherBackdrop_0","src_Map_0","src_MapStyleSwitcher_0","src_LayersPanel_0","src_Spinner_0","withRouter","Boolean","window","hostname","ReactDOM","render","react_router_dom","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kRCepCC,EAAKC,EACLC,mMChBSC,EAAsB,6FAKtBC,GAAe,UACfC,GAAe,WDYtBC,UAAkBC,IAAa,CAAEC,YAAaL,KA2YrCM,cAvYX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,WAAaP,EAAKO,WAAWC,KAAhBP,OAAAQ,EAAA,EAAAR,CAAAD,IAHHA,yEAMTU,GACNC,QAAQC,MAAMF,EAAEG,SAAS,IAEzB,IAAMC,EAASJ,EAAEK,OACXhB,EAAQW,EAAEG,SAAS,GAAGG,WAEtBC,EAAQd,KAAKJ,MAAMmB,OAAOC,KAAK,SAAAC,GAAC,OAClCA,EAAEC,KAAOX,EAAEG,SAAS,GAAGI,MAAMI,GAAGC,MAAM,MAAM,KAG5CC,EAAO,GAEPxB,EAAMyB,KACND,GAAI,OAAAE,OAAW1B,EAAMyB,KAAjB,SAEJD,GAAQ,kBAGZA,GAAI,eAAAE,OAAmBR,EAAMO,KAAzB,YAUJD,GAAI,0IAAAE,OAI0C1B,EAAMsB,GAJhD,2EAUJ/B,EAAMoC,UAAUZ,GACXa,QAAQJ,GACRK,MAAMvC,uCAIXC,EAAMuC,kDAON,GAAIxC,EAAK,CACL,IAAMyC,EAAKzC,EAAI0C,YAAYC,eACrBC,EAAK5C,EAAI0C,YAAYG,eAC3B,SAAAT,OAAUK,EAAGK,IAAb,KAAAV,OAAoBK,EAAGM,IAAvB,KAAAX,OAA8BQ,EAAGE,IAAjC,KAAAV,OAAwCQ,EAAGG,KAE3C,MAPa,uHAWNrB,GAAQ,IAAAsB,EAAAlC,KACnBR,EACK2C,eAAe,CACZC,MAAOxB,EACPyB,MAAO,CAAC,SACRC,MAAO,IAEVC,OACAC,KAAK,SAAAC,GACF,IAAM/B,EAAW+B,EAASC,KAAKhC,SAI/B,GAFAF,QAAQC,MAAM,iBAAkBC,GAE5BA,GAAYA,EAAS,GAAI,CACzB,IAAMiC,EAAQjC,EAAS,GAEvBxB,EAAI0D,aAAa,CACb,CAACD,EAAME,KAAK,GAAG,IAAMF,EAAME,KAAK,GAAG,KACnC,CAACF,EAAME,KAAK,GAAG,IAAMF,EAAME,KAAK,GAAG,OAEvCX,EAAKtC,MAAMQ,WAAW,CAAC0C,KAAMH,EAAMI,gBAG1CC,MAAM,SAAAC,GACHzC,QAAQ0C,MAAMD,EAAIE,gDAK1B,IAAMnB,EAAM9C,EAAIkE,YAAYpB,IACtBC,EAAM/C,EAAIkE,YAAYnB,IACtBoB,EAAOnE,EAAIoE,UAEjBtD,KAAKJ,MAAMQ,WAAW,CAClB4B,IAAKA,EACLC,IAAKA,EACLoB,KAAMA,4CAIEpC,GAAG,IAAAsC,EAAAvD,KACTwD,EAAO,CACT,OADSlC,OAAAxB,OAAA2D,EAAA,EAAA3D,CAENmB,EAAEuC,QAAQtE,IAAI,SAAAwE,GAAC,MACE,kBAATA,EAAE,GACL,CAAC,KAAM,CAAC,MAAOA,EAAE,IAAKA,EAAE,IAD5B,CAGM,OAHNpC,OAAAxB,OAAA2D,EAAA,EAAA3D,CAIW4D,EAAExE,IAAI,SAAAyE,GAAE,MACP,CAAC,KAAM,CAAC,MAAOA,EAAG,IAAKA,EAAG,YAmB1C1C,EAAE2C,MAAMC,aAER3E,EAAI4E,SAAS,CACT5C,GAAMD,EAAEC,GAAG,WACX6C,KAAQ,OACRC,OAAU,MACV3C,KAAQJ,EAAEI,KACV4C,YAAehD,EAAEgD,YACjBC,MAAQpE,OAAAqE,EAAA,EAAArE,CAAA,CACJsE,aAAcnD,EAAE2C,MAAMC,YACtBQ,aAAc,CACV,cACI,CAAC,cAAe,KAChB,CAAC,QACD,GAAIpD,EAAE2C,MAAMU,UACZ,GAAsB,EAAlBrD,EAAE2C,MAAMU,YAEQ,WAAxBrD,EAAE2C,MAAMW,aAA4B,CAACC,iBAAkB,CAAC,EAAG,MAEnEC,OAAUjB,IAKdtE,EAAI4E,SAAS,CACT5C,GAAMD,EAAEC,GACR6C,KAAQ,OACRC,OAAU,MACV3C,KAAQJ,EAAEI,KACV4C,YAAehD,EAAEgD,YACjBC,MAAQpE,OAAAqE,EAAA,EAAArE,CAAA,CACJsE,aAAcnD,EAAE2C,MAAMc,UACtBL,aAAc,CACV,cACI,CAAC,cAAe,KAChB,CAAC,QACD,GAAKpD,EAAE2C,MAAMU,UAAYrD,EAAE2C,MAAMe,YACjC,GAA8C,GAAzC1D,EAAE2C,MAAMU,UAAYrD,EAAE2C,MAAMe,eAEf,WAAtB1D,EAAE2C,MAAMgB,WAA0B,CAACJ,iBAAkB,CAAC,EAAG,MAEjEC,OAAUjB,KAIdtE,EAAI4E,SAAS,CACT5C,GAAMD,EAAEC,GACR6C,KAAQ,OACRC,OAAU,MACV3C,KAAQJ,EAAEI,KACV4C,YAAehD,EAAEgD,YACjBC,MAAQpE,OAAAqE,EAAA,EAAArE,CAAA,CACJsE,aAAcnD,EAAE2C,MAAMc,UACtBL,aAAc,CACV,cACI,CAAC,cAAe,KAChB,CAAC,QACD,GAAIpD,EAAE2C,MAAMU,UACZ,GAAsB,EAAlBrD,EAAE2C,MAAMU,YAEM,WAAtBrD,EAAE2C,MAAMgB,WAA0B,CAACJ,iBAAkB,CAAC,EAAG,MAEjEC,OAAUjB,IAQlB,IAAMqB,EAAgB5D,EAAE2C,MAAMC,YAC1B5C,EAAEC,GAAK,WACLD,EAAEC,GAERhC,EAAI4F,GAAG,aAAcD,EAAe,SAAAtE,GAC5BA,EAAEG,SAASqE,OAAS,IAEpB7F,EAAI8F,YAAYpB,MAAMqB,OAAS,aAWvC/F,EAAI4F,GAAG,aAAcD,EAAe,SAAAtE,GAM5BrB,EAAI8F,YAAYpB,MAAMqB,OAAS,KAKvC/F,EAAI4F,GAAG,QAASD,EAAe,SAAAtE,GACvBA,EAAEG,SAASqE,OAAS,IAChB3F,GACAF,EAAIgG,gBAAgB,CAAElB,OAAQ,MAAO9C,GAAI9B,GAAoB,CAAE+F,WAAW,IAE9E/F,EAAmBmB,EAAEG,SAAS,GAAGQ,GACjChC,EAAIgG,gBAAgB,CAAElB,OAAQ,MAAO9C,GAAI9B,GAAoB,CAAE+F,WAAW,IAE1E5B,EAAK6B,UAAU7E,2CAKd,IAAA8E,EAAArF,KACTd,EAAIoG,UAAU,MAAO,CACjBvB,KAAQ,UACRwB,KAAQvF,KAAKJ,MAAM2F,MAAQ,CACvBxB,KAAQ,oBACRrD,SAAY,IAEhB8E,YAAc,IAMlBxF,KAAKJ,MAAMmB,OAAO0E,QAAQC,UAAUC,QAAQ,SAAA1E,GACxCoE,EAAKO,gBAAgB3E,gDAIV4E,GACV3G,GAAQA,EAAI4G,UAAU,SAIvB9F,KAAKJ,MAAM2F,OAASM,EAAUN,MAC9BrG,EAAI4G,UAAU,OAAOC,QAAQ/F,KAAKJ,MAAM2F,MAGxCvF,KAAKJ,MAAMgE,QAAUiC,EAAUjC,OAC/B1E,EAAI8G,SAAShG,KAAKJ,MAAMgE,OAOxB5D,KAAKJ,MAAMqG,SAAWJ,EAAUI,QAChC/G,EAAIgH,UAAUlG,KAAKJ,MAAMqG,QAIzBjG,KAAKJ,MAAMmB,OAAO7B,IAAI,SAAA+B,GAAC,OAAIA,EAAEkF,WAAUC,SAAWP,EAAU9E,OAAO7B,IAAI,SAAA+B,GAAC,OAAIA,EAAEkF,WAAUC,QACxFpG,KAAKJ,MAAMmB,OAAO4E,QAAS,SAAA1E,GACvB/B,EAAImH,kBAAkBpF,EAAEC,GAAI,aAAcD,EAAEkF,SAAW,UAAY,QAC/DlF,EAAE2C,MAAMC,aACR3E,EAAImH,kBAAkBpF,EAAEC,GAAG,WAAY,aAAcD,EAAEkF,SAAW,UAAY,uDAM1E,IAAAG,EAAAtG,KAChBA,KAAKmC,eAAenC,KAAKJ,MAAMqG,QAE/BM,IAAS7G,YAAcL,EAEvBH,EAAM,IAAIqH,IAAS5G,IAAI,CACnB6G,UAAWxG,KAAKyG,aAChB7C,MAAO5D,KAAKJ,MAAMgE,MAClBqC,OAAQjG,KAAKJ,MAAMqG,OACnB5C,KAAMrD,KAAKJ,MAAMyD,OAMrB,IAAMqD,EAAY,IAAIC,IAAe,CACjCjH,YAAa6G,IAAS7G,YACtB6G,SAAUA,IACVK,SAAU,QACVC,YAAa,6CACbC,UAAW,OAGf5H,EAAI6H,WAAWL,EAAW,gBAE1B,IAAMM,EAAa,IAAIL,IAAe,CAClCjH,YAAa6G,IAAS7G,YACtB6G,SAAUA,IACVK,SAAU,QACVC,YAAa,6BACbC,UAAW,KACXzE,MAAO,QACP4E,QAAQ,EACRC,aAAa,IAEjBF,EAAWlC,GAAG,SAAU,SAAAqC,GACpB3G,QAAQC,MAAM,kBAAmB0G,GACjCb,EAAKnE,eAAegF,EAAOA,OAAOlB,QAClCmB,SAASC,cAAc,QAAQC,UAAU5F,OAAO,oBAChDsF,EAAWO,UAEfrI,EAAI6H,WAAWC,EAAY,YAE3B9H,EAAI6H,WACA,IAAIR,IAASiB,kBAAkB,CAC3BC,aAAa,IAEjB,gBAEJvI,EAAI6H,WAAW,IAAIR,IAASmB,iBAAiB,CACzCC,gBAAiB,CACbC,oBAAoB,GAExBC,mBAAmB,IAEnB,gBAOJ3I,EAAI4F,GAAG,OAAQ,WACXwB,EAAKwB,aACLxB,EAAKlG,aAELlB,EAAI4F,GAAG,UAAWwB,EAAKlG,YAGvBlB,EAAI4F,GAAG,aAAc,WACjBwB,EAAKwB,aACLxB,EAAKlG,kBAKbjB,EAAQ,IAAIoH,IAASwB,MAAM,CACvBC,cAAc,KAEZlD,GAAG,QAAS,SAAAvE,GACVnB,GACAF,EAAIgG,gBAAgB,CAAElB,OAAQ,MAAO9C,GAAI9B,GAAoB,CAAE+F,WAAW,IAE9E/F,EAAmB,wCAIlB,IAAA6I,EAAAjI,KACL,OAEIkI,EAAAC,EAAAC,cAAA,OAAKC,IAAK,SAAAC,GAAE,OAAIL,EAAKxB,aAAe6B,YAnY9BC,aEoCHC,2LAnDP,IACMC,EADQzI,KAAKJ,MAAMkD,KAAK3B,MAAM,KACjB,GAInB,OACI+G,EAAAC,EAAAC,cAAA,OAAKlH,GAAG,UAAUwH,UAAU,oBACxBR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,UAEP1I,KAAKJ,MAAMsD,MACPgF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKxE,MAAO,CAAC+E,SAAU,SACnBT,EAAAC,EAAAC,cAAA,QAAMQ,KAAK,MAAMC,aAAW,gBAA5B,iBAGJX,EAAAC,EAAAC,cAAA,OAAKM,UAAU,WACXR,EAAAC,EAAAC,cAAA,kBAIAF,EAAAC,EAAAC,cAAA,mGAMRF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKM,UAAU,aAAaI,QAAQ,eAChCZ,EAAAC,EAAAC,cAAA,UAAQM,UAAU,OAAOK,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,OAAOC,YAAY,IAAIC,iBAAiB,QAIjGlB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,WACXR,EAAAC,EAAAC,cAAA,+CACmCF,EAAAC,EAAAC,cAAA,SAAIK,GADvC,KAIAP,EAAAC,EAAAC,cAAA,+GAvCdG,+BC4BPc,oLAvBIjC,SAASC,cAAc,QAC7BC,UAAU5F,OAAO,qDAItB,OACIwG,EAAAC,EAAAC,cAAA,OAAKlH,GAAG,WAAWoI,QAAStJ,KAAKuJ,SAC7BrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACItI,GAAG,WAIH6C,KAAK,OACL0F,KAAK,QACLH,QAAStJ,KAAKuJ,SAPlB,oBATmBhB,4FCyJpBmB,yLAjJPC,IAAMC,KAAK,CACPC,MAAO,QACPnB,UAAW,cACXoB,QACI5B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,6SAIAF,EAAAC,EAAAC,cAAA,qFACuEF,EAAAC,EAAAC,cAAA,KAAG2B,KAAK,0CAAR,UADvE,KAIA7B,EAAAC,EAAAC,cAAA,oBAGIF,EAAAC,EAAAC,cAAA,OAAKM,UAAU,SACXR,EAAAC,EAAAC,cAAA,KAAG2B,KAAK,wBAAwBC,OAAO,SAASC,IAAI,uBAChD/B,EAAAC,EAAAC,cAAA,OAAK8B,IAAKC,IAAMC,IAAI,kBAExBlC,EAAAC,EAAAC,cAAA,KAAG2B,KAAK,uCAAuCC,OAAO,SAASC,IAAI,uBAC/D/B,EAAAC,EAAAC,cAAA,OAAK8B,IAAKG,IAAKD,IAAI,oBAMvCE,KA3BO,wDAgCX,IAAI5H,EAAO0E,SAASC,cAAc,QAClC3E,EAAK4E,UAAUiD,IAAI,oBACnB7H,EAAK2E,cAAc,yDAAyDmD,yCAGvEC,GACLjK,QAAQkK,IAAR,YAAApJ,OAAwBmJ,IACxBzK,KAAKJ,MAAMQ,WAAW,CAAE0C,KAAM2H,gDAGd,IAAA5K,EAAAG,KAChB2K,YAAI,qBACKnI,KAAK,SAAA+C,GACGA,IACD1F,EAAK+J,OACLgB,YAAI,qBAAqB,uCAMzC,IAIIC,EAJEC,EAAQ9K,KAAKJ,MAAMiK,MAAM1I,MAAM,KAC/BsH,EAAOqC,EAAM,GACfC,EAAQD,EAAM,GAKZE,EAAiC,gBAATvC,EAM9B,OAJIzI,KAAKJ,MAAMqL,aACXJ,EAAY7K,KAAKJ,MAAMqL,WAAWC,eAAe,UAIjDhD,EAAAC,EAAAC,cAAA,OAAKM,UAAU,SAAS9E,MAAO,CAACuH,OHrEf,KGsEbjD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIM,UAAU,QAAd,cAKJR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACIC,KAAK,QACLH,QAAStJ,KAAKoL,gBAEdlD,EAAAC,EAAAC,cAAA,MAAIM,UAAU,YACVR,EAAAC,EAAAC,cAAA,QAAMM,UAAU,SACXqC,GAEL7C,EAAAC,EAAAC,cAAA,QAAMM,UAAU,QACXD,GAGLP,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CACItH,KAAK,OACL0F,KAAK,QACL7F,MAAO,CAAE+E,SAAU,OAAQ2C,MAAO,eAO1CT,GACA3C,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CACIC,UAAU,SACV1B,QACI5B,EAAAC,EAAAC,cAAA,iDACuCF,EAAAC,EAAAC,cAAA,SAAIyC,GAD3C,IAEI3C,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACIC,KAAK,QACL4B,KAAK,OACL/B,QAAStJ,KAAKJ,MAAM6L,YACpB7H,MAAO,CAAC8H,WAAY,aAKhCC,oBAAoB,GAEpBzD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAMtH,KAAK,cAAcH,MAAO,CAAE8H,WAAY,WAK1DxD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACIC,KAAK,QACL1F,KAAK,OACLuF,QAAStJ,KAAK4J,MAHlB,SAQA1B,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAS7H,KAAK,aAEdmE,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACIC,KAAK,QACL1F,KAAK,OACLuF,QAAStJ,KAAKJ,MAAMiM,aACpBC,SAAUd,EACVpH,MAAO,CAAEmI,QAASf,EAAwB,GAAK,IAE/C9C,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAMtH,KAAK,aAPf,0BApICwE,oECwCNyD,qNA5CXjB,MAAQ,CAAEkB,SAAU,KAEpBC,QAAU,CACN,CACIC,IAAKC,IAELC,IAAK,sDAET,CACIF,IAAKG,IACLD,IAAK,sDAET,CACIF,IAAKI,IACLF,IAAK,yIAIMxG,EAAW2G,GAC1B,GAAIxM,KAAK+K,QAAUyB,EAAW,CAC1B,IAAMP,EAAWjM,KAAKkM,QAAQlM,KAAK+K,MAAMkB,UACzCjM,KAAKJ,MAAM6M,iBAAiBR,EAASI,uCAIpC,IAAAnK,EAAAlC,KACL,OACIkI,EAAAC,EAAAC,cAAA,OAAKM,UAAU,gBAEP1I,KAAKkM,QAAQhN,IAAK,SAACwN,EAAQC,GAAT,OACdzE,EAAAC,EAAAC,cAAA,OACIkB,QAAS,kBAAMpH,EAAK0K,SAAS,CAAEX,SAAUU,KACzCjE,UAAWxG,EAAK6I,MAAMkB,WAAaU,EAAI,WAAa,GACpDE,IAAKH,EAAOP,KAEZjE,EAAAC,EAAAC,cAAA,OAAK8B,IAAKwC,EAAOP,IAAK/B,IAAI,gBApCvB7B,gCCmDhBuE,2LAnDF5L,EAAI6L,GACT/M,KAAKJ,MAAMoN,eAAe9L,EAAI6L,oCAGzB,IAAAlN,EAAAG,KACL,OACIkI,EAAAC,EAAAC,cAAA,OAAKM,UAAU,gBAEP1I,KAAKJ,MAAMmB,QACXf,KAAKJ,MAAMmB,OAAO7B,IAAI,SAAA+B,GAAC,OACnBiH,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CACIzB,UAAU,OACV3B,MAAO5I,EAAEgD,YACT0H,oBAAoB,EACpBkB,IAAK5L,EAAEI,MAEP6G,EAAAC,EAAAC,cAAA,OACIM,UAAU,YACVY,QAASzJ,EAAKqN,SAAS7M,KAAKR,EAAMoB,EAAEC,IAAKD,EAAEkF,WAE3C+B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QACIM,UAAU,kBACV9E,MAAO,CACHuH,OAA4B,EAApBlK,EAAE2C,MAAMU,UAChB6I,WAAkC,UAAtBlM,EAAE2C,MAAMgB,UAChB3D,EAAE2C,MAAMc,UADA,oCAAApD,OAE8BL,EAAE2C,MAAMc,UAFtC,MAAApD,OAEoDL,EAAE2C,MAAMc,UAF5D,+BAGZb,YAAa5C,EAAE2C,MAAMC,YACrBU,YAAatD,EAAE2C,MAAMW,YACrBI,YAAa1D,EAAE2C,MAAMe,YAAc1D,EAAE2C,MAAMe,YAAY,EAAI,IAC3DyI,WAAY,OACZC,YAAa,UAIrBnF,EAAAC,EAAAC,cAAA,QAAMM,UAAU,cACXzH,EAAEI,OAIX6G,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQ7D,KAAK,QAAQ8D,QAAStM,EAAEkF,uBA1CtCoC,iECmCnB,SAASiF,GAAQC,GACtB,IAAMtF,EAAI,4NAEJlJ,EAAI,IAAIyO,OAAOvF,EAAEhH,MAAM,IAAIiF,KAAK,KAAM,KAC5C,OAAOqH,EAAIE,WAAWC,cACnBC,QAAQ,OAAQ,KAChBA,QAAQ5O,EAAG,SAAA6O,GAAC,MAJL,qDAIWC,OAAO5F,EAAE6F,QAAQF,MACnCD,QAAQ,KAAM,SACdA,QAAQ,WAAY,IACpBA,QAAQ,OAAQ,KAChBA,QAAQ,MAAO,IACfA,QAAQ,MAAO,IAGpB,IAAMI,GAAY,CACdC,UAAa,kBAAM,GACnBC,QAAW,kBAAM,GACjBC,OAAU,kBAAM,GAChBC,OAAU,SAAAC,GAAI,OAAI,EAAIA,EAAKvJ,QAC3BwJ,OAAU,SAAAD,GAAI,OAAKA,EAAWxO,OACzB0O,KAAKF,GACLG,OAAO,SAACC,EAAO7B,GAAR,OAAgB8B,GAAO9B,GAAO8B,GAAOL,EAAKzB,IAAQ6B,GAAO,GAF3C,IAKjBC,GAAS,SAAAlE,GAAK,OAAIwD,UAAiBxD,GAAOA,aCtDjDmE,GAAU,CACZ,gDACA,0CACA,mDACA,yCACA,gCAuJWC,yGAnJKC,GACZ,IAAMjM,EAAOiM,EAAYjM,KAEnBkM,EAASD,EAAYC,OAErBrM,EAAO3B,GAAe7B,IAAI,SAAA+B,GAAC,OAC7BA,EAAEuC,QAAQtE,IAAI,SAAAwE,GAAC,MACX,OACmB,kBAATA,EAAE,GAAT,KAAApC,OACMoC,EAAE,GADR,OAAApC,OACgBoC,EAAE,GADlB,MAGCA,EAAExE,IAAI,SAAA8P,GAAO,WAAA1N,OACJ0N,EAAQ,GADJ,OAAA1N,OACY0N,EAAQ,GADpB,QAEX5I,KAAK,MACPvD,EAAI,IAAAvB,OACAuB,EADA,yBAIVuD,KAAK,MACTA,KAAK,IAEP,6DAAA9E,QAEOuB,GAAD,QAAAvB,OAAiByN,EAAjB,UAFN,qCAAAzN,OAIUoB,EAJV,sGAyBA,OAdA3B,GAAe4E,QAAQ,SAAA1E,GAEnBA,EAAE2C,MAAMgB,UAAY3D,EAAE2C,MAAMgB,WAAa,QACzC3D,EAAEkF,cAA0B+H,IAAfjN,EAAEkF,UAAyBlF,EAAEkF,SAEtClF,EAAE2C,MAAMC,cACR5C,EAAE2C,MAAMW,YAActD,EAAE2C,MAAMW,aAAe,QAC7CtD,EAAE2C,MAAMe,YAAc1D,EAAE2C,MAAMe,aP1DV,GO8DxB1D,EAAEC,GAAKsM,GAAQvM,EAAEI,QAGdN,uCAIP,OAAOf,KAAKiP,oDAGDH,GACX,OAAO,IAAII,QAAQ,SAACC,EAASC,GACzB,IAAIC,EAEJC,KAAEC,QAAF,4DAAAjO,OACgEkO,UAAUV,EAAYhM,OAClF,SAAA2M,GAII,IAAIV,EAHJvO,QAAQC,MAAM,gBAAiBgP,GAK3BV,EADqB,uCAArBD,EAAYhM,KACH,WAEA,KAAa2M,EAAc,GAAGC,OAG3C,IAAMtN,EAAQyM,EAAcc,SAAS,CAAEZ,OAAQA,IAE/CvO,QAAQC,MAAM,oBAAqB2B,GAKnC,IAHA,IAAMwN,EAAeJ,UAAUpN,GAE3ByN,EAAW,GAjBFC,EAAA,SAkBJnD,GACL,IAAMoD,EAAWnB,GAAQjC,GAAK,SAAWiD,EAEzCpP,QAAQC,MAAMkM,EAAI,gBAAkBiC,GAAQjC,IAE5CkD,EAASlD,GAAK2C,KAAEC,QACZQ,EACA,SAAAxK,GACI,GAAIA,EAAKyK,SAASjL,OAAS,EAAG,CAC1BvE,QAAQC,MAAM,cAAgBkM,GAC9B,IAAK,IAAI1D,EAAI,EAAGA,EAAI4G,EAAS9K,OAAQkE,IAC7BA,IAAM0D,IACNnM,QAAQC,MAAM,YAAcwI,GAC5B4G,EAAS5G,GAAGgH,SAIpBzP,QAAQC,MAAM,aAAc8E,GAC5B8J,EAAUa,KAAa3K,EAAM,CAAE4K,gBAAgB,IAC/C3P,QAAQC,MAAM,yBAA0B4O,GAExCF,EAAQ,CACJE,QAASA,QAEV,CACH7O,QAAQC,MAAR,UAAAa,OAAwBqL,EAAxB,+BAIA,IADA,IAAIyD,GAAyB,EACpBnH,EAAI,EAAGA,EAAI4G,EAAS9K,OAAQkE,IAC7BA,IAAM0D,QACqBuB,IAAvB2B,EAAS5G,GAAGoH,SACZD,GAAyB,GAIjCA,IACA5P,QAAQC,MAAM,wDACd0O,EAAQ,CAAEE,QAAS,WAG5BiB,KAAK,SAAA/P,GACiB,UAAjBA,EAAEgQ,YACF/P,QAAQ0C,MAAR,YAAA5B,OAA0BqL,EAA1B,cAAyCpM,MA3ChDoM,EAAI,EAAGA,EAAIiC,GAAQ7J,OAAQ4H,IAAKmD,EAAhCnD,KAwDV2D,KAAK,SAAA/P,GACJC,QAAQ0C,MAAM,wBAAsB3C,GACpCiQ,IAAY,MAAU,CAClBrN,QAAS,OACTc,YACI,0EAGRmL,yDC/JdqB,IAAQ,ECKd,IAEMC,GAAiB,CACnBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,6CAmJIC,cA5IX,SAAAA,IAAepR,OAAAC,EAAA,EAAAD,CAAAE,KAAAkR,GACXC,KAASC,cAAc,CACnBT,OAAQD,GAAeC,OACvBC,WAAYF,GAAeE,WAC3BE,UAAWJ,GAAeI,YAG9B9Q,KAAKqR,GAAKF,KAASG,YAEnBtR,KAAKqR,GAAGE,WAAW,UAAU5G,MAAMnI,KAAK,SAACgP,GACrChR,QAAQkK,IAAI,gCACZ8G,EAAc7L,QAAQ,SAAC8L,GACnBjR,QAAQC,MAAM,UAAOgR,EAAIvQ,iEAKxBqE,GACT/E,QAAQkK,IAAI,WAAYiE,GAAOpJ,IAO/B,IAAMmM,EDvCP,SAAsBnM,GAOzB,OANmBoM,KAAKC,QAAQC,KAAKC,UAAUvM,GAAO,CAAEwM,GAAI,WCsCrCC,CAAazM,GAIhC,OAFA/E,QAAQkK,IAAI,UAAWiE,GAAO+C,IAEvBA,0CAGKrQ,EAAM4Q,EAASpH,EAAWqH,GACtC,IAAIC,EAAO3E,GAAQnM,GAMnB,OAJa,IAAT6Q,IACAC,GAAQ,GAGLnS,KAAKqR,GAAGE,WAAW,UAAUE,IAAIU,GAAMvH,IAAI,CAC9CvJ,KAAMA,EACNgO,QAAS4C,EACTpH,UAAWA,EACXqH,KAAMA,GAAQ,kCAIjB7Q,EAAMgO,EAASxE,GAAW,IAAAhL,EAAAG,KAE3B4K,YAAIvJ,EAAM,CACNgO,QAASA,EACTxE,UAAWA,IAIf,IACI,IAAMoH,EAAUJ,KAAKC,UAAUzC,GAG/BrP,KAAKoS,gBAAgB/Q,EAAM4Q,EAASpH,GAC/BrI,KAAK,WACFhC,QAAQC,MAAM,+CACfuC,MAAM,SAAAE,GAEL1C,QAAQC,MAAM,0DAEd,IAAM4R,EAAQJ,EAAQxM,MAAM,EAAG6M,KAAKC,KAAKN,EAAQlN,OAAO,IAClDyN,EAAQP,EAAQxM,MAAM6M,KAAKC,KAAKN,EAAQlN,OAAO,IAErDlF,EAAKuS,gBAAgB/Q,EAAMgR,EAAOxH,EAAW,GAC5CrI,KAAK,WACFhC,QAAQC,MAAM,+CACfuC,MAAM,SAAAE,GACL1C,QAAQ0C,MAAM,qCAAsCA,KAGxDrD,EAAKuS,gBAAgB/Q,EAAMmR,EAAO3H,EAAW,GAC5CrI,KAAK,WACFhC,QAAQC,MAAM,+CACfuC,MAAM,SAAAE,GACL1C,QAAQ0C,MAAM,qCAAsCA,OAIlE,MAAO3C,GACLC,QAAQ0C,MAAM3C,0CAIR4R,EAAMhD,EAASC,GAAQ,IAAAlN,EAAAlC,KACjCA,KAAKqR,GAAGE,WAAW,UAAUE,IAAIU,GAAMxH,MAAMnI,KAAK,SAAAiP,GAC9C,GAAIA,EAAIgB,OAAQ,CACZ,IAAIlN,EAAOkM,EAAIlM,OAOf,GALA/E,QAAQC,MAAM,4BAA6B8E,GAKzB,IAAdA,EAAK2M,KAEL,OADAhQ,EAAKwQ,OAASnN,EAAK8J,QACZnN,EAAKyQ,cAAcR,EAAO,IAAKhD,EAASC,GAC1B,IAAd7J,EAAK2M,OACZ3M,EAAK8J,QAAUnN,EAAKwQ,OAASnN,EAAK8J,SAItC9J,EAAK8J,QAAUwC,KAAKe,MAAMrN,EAAK8J,SAC/B9J,EAAKsF,UAAYtF,EAAKsF,UAAUgI,SAEhC1D,EAAQ5J,QAER/E,QAAQC,MAAM,+BAAgC0R,GAC9ChD,MAELnM,MAAM,SAAAE,GACL1C,QAAQ0C,MAAR,sCAAA5B,OAAoD6Q,GAAQjP,GAC5DkM,mCAIH/N,GAAM,IAAAkC,EAAAvD,KACDmS,EAAO3E,GAAQnM,GAErB,OAAO,IAAI6N,QAAQ,SAACC,EAASC,GAUrB7L,EAAKoP,cAAcR,EAAMhD,EAASC,cC1I5C0D,uBAIF,SAAAA,EAAYlT,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8S,IACfjT,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgT,GAAA3S,KAAAH,KAAMJ,KAEDmT,WAAalT,EAAKkT,WAAW1S,KAAhBP,OAAAQ,EAAA,EAAAR,CAAAD,IAClBA,EAAK4M,iBAAmB5M,EAAK4M,iBAAiBpM,KAAtBP,OAAAQ,EAAA,EAAAR,CAAAD,IACxBA,EAAKO,WAAaP,EAAKO,WAAWC,KAAhBP,OAAAQ,EAAA,EAAAR,CAAAD,IAClBA,EAAKmN,eAAiBnN,EAAKmN,eAAe3M,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IACtBA,EAAKgM,aAAehM,EAAKgM,aAAaxL,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IACpBA,EAAK4L,YAAc5L,EAAK4L,YAAYpL,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IAEnB,IAAMmT,EAAYnT,EAAKoT,mBAVR,OAWfpT,EAAKkL,MAAQ,CACTsE,QAAS,KACT6D,SAAS,EACTnS,OAAQ8N,GAAcsE,YACtBC,SAAU,qDACV/P,KAAM2P,EAAUK,GAAK,GACrBvQ,KAAM,GACNmD,OAAQ,CACJqN,WAAWN,EAAU/Q,MAAQ3C,EAC7BgU,WAAWN,EAAUhR,MAAQzC,IAGrCM,EAAK0T,QAAU,IAAIrC,GAEfrR,EAAKkL,MAAMjI,MACXjD,EAAKkT,aA1BMlT,kFA+Bf,IACMmT,EAAY,IAAIQ,gBAAgBxT,KAAKJ,MAAM6T,SAASC,QACtDC,EAAY,GAShB,MAXuB,CAAC,IAAK,MAAO,OAIrBhO,QAAS,SAAA1G,GACpB,IAAIwL,EAAQuI,EAAUrI,IAAI1L,GACtBwL,IACAkJ,EAAU1U,GAAKwL,KAIhBkJ,sCAGCpO,GAIR,OAHY,IAAIqO,KACO,IAAIA,KAAKrO,EAAKsF,WV9DV,6CUoE3B7K,KAAK+S,YAAW,0CAGLjQ,GAAM,IAAAZ,EAAAlC,KACjB6O,GAAcgF,QAAQ,CAAE/Q,KAAMA,IACzBN,KAAK,SAAA+C,GAEF,IAAMuO,EAAM,IAAIF,KAChB1R,EAAKqR,QAAQQ,KAAKjR,EAAMyC,EAAK8J,QAASyE,GAEtC5R,EAAK0K,SAAS,CACVyC,QAAS9J,EAAK8J,QACd2E,cAAeF,EACfZ,SAAS,MAEdlQ,MAAM,SAAAzC,GACL2B,EAAK0K,SAAS,CACV1J,OAAO,yCAKZ+Q,GAAO,IAAA1Q,EAAAvD,KACVA,KAAK+K,MAAMjI,KACPmR,GACAjU,KAAK4M,SAAS,CAAEsG,SAAS,IACzBlT,KAAKkU,eAAelU,KAAK+K,MAAMjI,OACJ,0CAApB9C,KAAK+K,MAAMjI,KAGlB9C,KAAK4M,SAAS,CACVyC,QAAS,+BACT2E,cAAe,IAAIJ,KAAK,gEAI5B5T,KAAKuT,QAAQY,KAAKnU,KAAK+K,MAAMjI,KAAMmR,GAC9BzR,KAAK,SAAA+C,GACEA,GAAQhC,EAAK6Q,YAAY7O,IACzB/E,QAAQC,MAAM,2BACd8C,EAAKqJ,SAAS,CACVyC,QAAS9J,EAAK8J,QACd2E,cAAe,IAAIJ,KAAKrO,EAAKsF,eAGjCrK,QAAQC,MAAR,+BAAAa,OAA6CiC,EAAKwH,MAAMjI,KAAxD,uCACAS,EAAKqJ,SAAS,CAAEsG,SAAS,IACzB3P,EAAK2Q,eAAe3Q,EAAKwH,MAAMjI,SAEpCE,MAAM,SAAAzC,GACLiQ,IAAY,MAAU,CAClBrN,QAAS,OACTc,YACI,mDAKpBjE,KAAK4M,SAAS,CAAEsG,SAAS,6CAIhBmB,GACbrU,KAAK4M,SAAS,CAAEwG,SAAUiB,2CAGfnT,EAAI6L,GACf,IAAIuH,EAAYxU,OAAOyU,OAAO,GAAIvU,KAAK+K,MAAMhK,QACzBuT,EAAU7P,OAAO,SAAAxD,GAAC,OAAIA,EAAEC,KAAOA,IAAI,GACzCiF,SAAW4G,EAEzB/M,KAAK4M,SAAS,CAAE7L,OAAQuT,2CFrHzB,IAA2B/O,EAAMxE,EAANwE,EEyHRvF,KAAK+K,MAAMsE,QFzHGtO,EEyHMf,KAAK+K,MAAMhK,OFxHrDwE,EAAK7E,SAASiF,QAAQ,SAAA6O,GACd/D,IACAjQ,QAAQC,MAAR,GAAAa,OAAiBkT,EAAQ3T,WAAWK,GAApC,MAAAI,OAA2CkT,EAAQ3T,WAAWQ,KAA9D,MAGCmT,EAAQ3T,WAAWkD,MACpBhD,EAAO4E,QAAQ,SAAA7E,GACX,IAAI2T,GAAQ,EACZ3T,EAAM0C,QAAQmC,QAAQ,SAAAlB,GAClB,IAAIiQ,EAEAA,EADqB,kBAAdjQ,EAAO,GACC,EAAC,GAAO,GAER,EAAC,GAGpB3E,OAAO0O,KAAKgG,EAAQ3T,YAAY8E,QAAQ,SAAAgP,GACX,kBAAdlQ,EAAO,IACTkQ,IAAgBlQ,EAAO,GAAG,IAC3B+P,EAAQ3T,WAAW8T,KAAiBlQ,EAAO,GAAG,KAC9CiQ,EAAa,IAAK,GAGjBC,IAAgBlQ,EAAO,GAAG,IAC3B+P,EAAQ3T,WAAW8T,KAAiBlQ,EAAO,GAAG,KAC9CiQ,EAAa,IAAK,IAGjBC,IAAgBlQ,EAAO,IACxB+P,EAAQ3T,WAAW8T,KAAiBlQ,EAAO,KAC3CiQ,EAAa,IAAK,MAKJ,kBAAdjQ,EAAO,IAAmBiQ,EAAa,IAAMA,EAAa,IAC/DA,EAAa,MAChBF,EAAQ3T,WAAWkD,KAAOjD,EAAMO,KAChCoT,GAAQ,KAOZhE,IACAjQ,QAAQC,MAAR,MAAAa,OAAoBR,EAAMO,KAA1B,KAAAC,OAAkCmT,EAAQ,eAAO,SA1D9D,SAAwBlP,GAC3BA,EAAK7E,SAASiF,QAAQ,SAAA6O,GAClB1U,OAAO0O,KAAKgG,EAAQ3T,YAAY8E,QAAQ,SAAAgP,GAChB,OAAhBA,GACgB,SAAhBA,GACgB,SAAhBA,UACOH,EAAQ3T,WAAW8T,OE+HlCC,CAAe5U,KAAK+K,MAAMsE,SJ1I3B,SAA8B9J,EAAMsP,GACvC,IAAMC,EAAO,IAAIC,KAAK,CAAClD,KAAKC,UAAUvM,IAAQ,CAC1CxB,KAAM,mBACN1C,KAAMwT,IAEVG,kBAAOF,EAAMD,GIsITI,CAAqBjV,KAAK+K,MAAMsE,QAAZ,aAAA/N,OAAkCtB,KAAK+K,MAAMjI,kDAGlD+C,EAAW2G,GAuC1B,GAtCIxM,KAAKJ,MAAM6T,WAAa5N,EAAU4N,UAClCzT,KAAKkV,iBAGLlV,KAAK+K,MAAMjI,OAAS0J,EAAU1J,OAC9BtC,QAAQC,MAAR,qBAAAa,OAAmCkL,EAAU1J,KAA7C,QAAAxB,OAAwDtB,KAAK+K,MAAMjI,OAEnE9C,KAAK+S,cAaL/S,KAAK+K,MAAMsE,UAAY7C,EAAU6C,WAC5BrP,KAAK+K,MAAMsE,SAAYrP,KAAK+K,MAAMsE,QAAQ3O,UAAmD,IAAvCV,KAAK+K,MAAMsE,QAAQ3O,SAASqE,SACnFyL,IAAY,QAAY,CACpBrN,QAAS,MACTc,YACI,yDAaZjE,KAAK+K,MAAM1H,OAASmJ,EAAUnJ,MAC9BrD,KAAK+K,MAAM/I,MAAQwK,EAAUxK,KAC7BhC,KAAK+K,MAAM9I,MAAQuK,EAAUvK,IAAK,CAC9B,IAAIkT,EAAS,IACbA,GAAM,OAAA7T,OAAWtB,KAAK+K,MAAM/I,IAAIoT,QAAQ,IACxCD,GAAM,QAAA7T,OAAYtB,KAAK+K,MAAM9I,IAAImT,QAAQ,IACzCD,GAAM,MAAA7T,OAAUtB,KAAK+K,MAAM1H,KAAK+R,QAAQ,IACxCpV,KAAKJ,MAAMyV,QAAQC,KAAK,CACpB5B,OAAQyB,kFAUbI,GAMPvV,KAAK4M,SAAS2I,oCAId,OACIrN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoN,EAAD,CACI3L,MAAO7J,KAAK+K,MAAMjI,KAClBmI,WAAYjL,KAAK+K,MAAMiJ,cACvBnI,aAAc7L,KAAK6L,aAEnBzL,WAAYJ,KAAKI,WACjBqL,YAAazL,KAAKyL,cAGtBvD,EAAAC,EAAAC,cAACqN,EAAD,MAEAvN,EAAAC,EAAAC,cAACsN,EAAD,CACInQ,KAAMvF,KAAK+K,MAAMsE,QACjBtO,OAAQf,KAAK+K,MAAMhK,OACnB6C,MAAO5D,KAAK+K,MAAMqI,SAClB/P,KAAMrD,KAAK+K,MAAM1H,KACjB4C,OAAQjG,KAAK+K,MAAM9E,OACnB8M,WAAY/S,KAAK+S,WACjB3S,WAAYJ,KAAKI,aAGrB8H,EAAAC,EAAAC,cAACuN,EAAD,CAAkBlJ,iBAAkBzM,KAAKyM,mBAEzCvE,EAAAC,EAAAC,cAACwN,EAAD,CACI7U,OAAQf,KAAK+K,MAAMhK,OACnBiM,eAAgBhN,KAAKgN,iBAIrBhN,KAAK+K,MAAMmI,SACXhL,EAAAC,EAAAC,cAACyN,EAAD,CAAS/S,KAAM9C,KAAK+K,MAAMjI,KAAMI,MAAOlD,KAAK+K,MAAM7H,gBA5OpDqF,cAmPHuN,eAAWhD,IC3PNiD,QACW,cAA7BC,OAAOvC,SAASwC,UAEe,UAA7BD,OAAOvC,SAASwC,UAEhBD,OAAOvC,SAASwC,SAASxB,MACvB,wECXNyB,IAASC,OACPjO,EAAAC,EAAAC,cAACgO,GAAA,EAAD,KACElO,EAAAC,EAAAC,cAACiO,GAAD,OAEFjP,SAASkP,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjU,KAAK,SAAAkU,GACjCA,EAAaC","file":"static/js/main.cd1405d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/itdp.c441e7e0.png\";","module.exports = __webpack_public_path__ + \"static/media/ucb.8a36a689.png\";","module.exports = __webpack_public_path__ + \"static/media/light.aead2e19.png\";","module.exports = __webpack_public_path__ + \"static/media/normal.e409dcfc.png\";","module.exports = __webpack_public_path__ + \"static/media/satelite.a853a709.png\";","import React, { Component } from 'react';\n\nimport mapboxgl from 'mapbox-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder'\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css'\n\nimport mbxGeocoding from '@mapbox/mapbox-sdk/services/geocoding';\n\nimport { MAPBOX_ACCESS_TOKEN } from './constants.js'\n\nimport './Map.css'\n\n\nlet map, popup;\nlet selectedCycleway;\n\nconst geocodingClient = mbxGeocoding({ accessToken: MAPBOX_ACCESS_TOKEN });\n\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n\n        this.onMapMoved = this.onMapMoved.bind(this);\n    }\n\n    showPopup(e) {\n        console.debug(e.features[0]);\n\n        const coords = e.lngLat;\n        const props = e.features[0].properties;\n\n        const layer = this.props.layers.find(l =>\n            l.id === e.features[0].layer.id.split('--')[0]\n        );\n\n        let html = '';\n\n        if (props.name) {\n            html += `<h2>${props.name}</h2>`;\n        } else {\n            html += '<i>Sem nome</i>';\n        }\n        \n        html += `<p>Tipo: <b>${layer.name}</b></p>`;\n\n        // html += `<h3>Tipo: ${layer.name}</h3>`;\n        // html += `<p>${layer.description}</p>`;\n\n        // const prettyProps = JSON.stringify(props, null, 2)\n        //     .replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')\n        //     .replace(/\"|,|\\{|\\}/g, '');\n        // html += prettyProps;\n\n        html += `\n            <a\n                target=\"_BLANK\"\n                rel=\"noopener\"\n                href=\"https://www.openstreetmap.org/${props.id}\"\n            >\n                Editar no OSM\n            </a>\n    `;\n\n        popup.setLngLat(coords)\n            .setHTML(html)\n            .addTo(map);\n    }\n\n    hidePopup() {\n        popup.remove();\n    }\n\n    // southern-most latitude, western-most longitude, northern-most latitude, eastern-most longitude\n    getCurrentBBox() {\n        const fallback = \"-23.036345361742164,-43.270405878917785,-22.915284125684607,-43.1111041211104\";\n\n        if (map) {\n            const sw = map.getBounds().getSouthWest();\n            const ne = map.getBounds().getNorthEast();\n            return `${sw.lat},${sw.lng},${ne.lat},${ne.lng}`;\n        } else {\n            return fallback;\n        }\n    }\n\n    reverseGeocode(lngLat) {\n        geocodingClient\n            .reverseGeocode({\n                query: lngLat,\n                types: ['place'],\n                limit: 1\n            })\n            .send()\n            .then(response => {\n                const features = response.body.features;\n\n                console.debug('reverseGeocode', features);\n\n                if (features && features[0]) {\n                    const place = features[0];\n\n                    map.setMaxBounds([\n                        [place.bbox[0]-0.15, place.bbox[1]-0.15], // Southwest coordinates\n                        [place.bbox[2]+0.15, place.bbox[3]+0.15]  // Northeast coordinates\n                    ]);\n                    this.props.onMapMoved({area: place.place_name});\n                }\n            })\n            .catch(err => {\n                console.error(err.message);\n            });\n    }\n\n    onMapMoved() {\n        const lat = map.getCenter().lat;\n        const lng = map.getCenter().lng;\n        const zoom = map.getZoom();\n\n        this.props.onMapMoved({\n            lat: lat,\n            lng: lng,\n            zoom: zoom,\n        });\n    }\n\n    addDynamicLayer(l) {\n        const filters = [\n            \"any\",\n            ...l.filters.map(f => \n                typeof f[0] === 'string' ?\n                    [\"==\", [\"get\", f[0]], f[1]]\n                    :\n                    [ \"all\",\n                        ...f.map(f2 =>\n                            [\"==\", [\"get\", f2[0]], f2[1]]\n                        )\n                    ]\n                )\n        ];\n\n        // const layers = map.getStyle().layers;\n        // // Find the index of the first symbol layer in the map style\n        // let firstSymbolId;\n        // for (var i = 0; i < layers.length; i++) {\n        //     if (layers[i].type === 'symbol') {\n        //         firstSymbolId = layers[i].id;\n        //         break;\n        //     }\n        // }\n\n        // Check if layer has a border color set. If that's the case the logic is a\n        //  little different and we'll need 2 layers, one for the line itself and \n        //  another for the line underneath which creates the illusion of a border.\n        if (l.style.borderColor) {\n            // Border\n            map.addLayer({\n                \"id\": l.id+'--border',\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.borderColor,\n                    \"line-width\": [\n                        \"interpolate\",\n                            [\"exponential\", 1.5],\n                            [\"zoom\"],\n                            12, l.style.lineWidth,\n                            18, l.style.lineWidth*3\n                    ],\n                    ...(l.style.borderStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            // }, firstSymbolId);\n            });\n\n            // Line\n            map.addLayer({\n                \"id\": l.id,\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.lineColor,\n                    \"line-width\": [\n                        \"interpolate\",\n                            [\"exponential\", 1.5],\n                            [\"zoom\"],\n                            12, (l.style.lineWidth - l.style.borderWidth),\n                            18, (l.style.lineWidth - l.style.borderWidth)*3\n                    ],\n                    ...(l.style.lineStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            // }, firstSymbolId);\n            });\n        } else {\n            map.addLayer({\n                \"id\": l.id,\n                \"type\": \"line\",\n                \"source\": \"osm\",\n                \"name\": l.name,\n                \"description\": l.description,\n                \"paint\": {\n                    \"line-color\": l.style.lineColor,\n                    \"line-width\": [\n                        \"interpolate\",\n                            [\"exponential\", 1.5],\n                            [\"zoom\"],\n                            12, l.style.lineWidth,\n                            18, l.style.lineWidth*3\n                    ],\n                    ...(l.style.lineStyle === 'dashed' && {'line-dasharray': [1, 0.6]})\n                },\n                \"filter\": filters,\n            // }, firstSymbolId);\n            });\n        }\n\n        \n        // Interactions\n\n        const interactiveId = l.style.borderColor ? \n            l.id + '--border'\n            : l.id;\n\n        map.on(\"mouseenter\", interactiveId, e => {\n            if (e.features.length > 0) {\n                // Cursor\n                map.getCanvas().style.cursor = 'pointer';\n\n                // Hover style\n                // if (hoveredCycleway) {\n                //     map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: false });\n                // }\n                // hoveredCycleway = e.features[0].id;\n                // map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: true });\n            }\n        });\n\n        map.on(\"mouseleave\", interactiveId, e => {\n            // Hover style\n            // if (hoveredCycleway && !selectedCycleway) {\n                // map.setFeatureState({ source: 'osm', id: hoveredCycleway }, { highlight: false });\n\n                // Cursor cursor\n                map.getCanvas().style.cursor = '';\n            // }\n            // hoveredCycleway = null;\n        });\n\n        map.on(\"click\", interactiveId, e => {\n            if (e.features.length > 0) {\n                if (selectedCycleway) {\n                    map.setFeatureState({ source: 'osm', id: selectedCycleway }, { highlight: false });\n                }\n                selectedCycleway = e.features[0].id;\n                map.setFeatureState({ source: 'osm', id: selectedCycleway }, { highlight: true });\n\n                this.showPopup(e);\n            }\n        });\n    }\n\n    initLayers() {\n        map.addSource(\"osm\", {\n            \"type\": \"geojson\",\n            \"data\": this.props.data || {\n                'type': 'FeatureCollection',\n                'features': []\n            },\n            \"generateId\": true\n        });\n\n        // In GeoJSON layers are from most important to least important, but we \n        //   want the most important ones to be on top.\n        // Slice is used here to don't destructively reverse the original array.\n        this.props.layers.slice().reverse().forEach(l => {\n            this.addDynamicLayer(l);\n        }); \n    }\n\n    componentDidUpdate(prevProps) {\n        if (!map || !map.getSource('osm')) {\n            return;\n        }\n\n        if (this.props.data !== prevProps.data) {\n            map.getSource('osm').setData(this.props.data);\n        }\n        \n        if (this.props.style !== prevProps.style) {\n            map.setStyle(this.props.style);\n        }\n        \n        // if (this.props.zoom !== prevProps.zoom) {\n        //     map.setZoom(this.props.zoom);\n        // }\n        \n        if (this.props.center !== prevProps.center) {\n            map.setCenter(this.props.center);\n        }\n        \n        // Compare only 'isActive' field of layers\n        if (this.props.layers.map(l => l.isActive).join() === prevProps.layers.map(l => l.isActive).join()) {\n            this.props.layers.forEach( l => {\n                map.setLayoutProperty(l.id, 'visibility', l.isActive ? 'visible' : 'none');\n                if (l.style.borderColor) {\n                    map.setLayoutProperty(l.id+'--border', 'visibility', l.isActive ? 'visible' : 'none');\n                }\n            })\n        }\n    }\n    \n    componentDidMount() {\n        this.reverseGeocode(this.props.center);\n\n        mapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;\n        \n        map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: this.props.style,\n            center: this.props.center,\n            zoom: this.props.zoom\n        });\n\n        \n        // Native Mapbox map controls\n\n        const searchBar = new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl,\n            language: 'pt-br',\n            placeholder: 'Buscar endereços, estabelecimentos, ...',\n            countries: 'br',\n            // collapsed: true\n        });\n        map.addControl(searchBar, 'bottom-right');\n\n        const cityPicker = new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl,\n            language: 'pt-br',\n            placeholder: 'Buscar cidades brasileiras',\n            countries: 'br',\n            types: 'place',\n            marker: false,\n            clearOnBlur: true\n        });\n        cityPicker.on('result', result => {\n            console.debug('geocoder result', result);\n            this.reverseGeocode(result.result.center);\n            document.querySelector('body').classList.remove('show-city-picker');\n            cityPicker.clear();\n        });\n        map.addControl(cityPicker, 'top-left');\n\n        map.addControl(\n            new mapboxgl.NavigationControl({\n                showCompass: false\n            }),\n            'bottom-right'\n        );\n        map.addControl(new mapboxgl.GeolocateControl({\n            positionOptions: {\n                enableHighAccuracy: true\n            },\n            trackUserLocation: true\n        }),\n            'bottom-right'\n        );\n        // map.addControl(new mapboxgl.FullscreenControl({ container: document.querySelector('body') }));\n\n\n        // Listeners\n\n        map.on('load', () => {\n            this.initLayers();\n            this.onMapMoved();\n\n            map.on('moveend', this.onMapMoved);\n\n            // Further chages on styles reinitilizes layers\n            map.on('style.load', () => {\n                this.initLayers();\n                this.onMapMoved();\n            });\n        });\n\n\n        popup = new mapboxgl.Popup({\n            closeOnClick: false\n        });\n        popup.on('close', e => {\n            if (selectedCycleway) {\n                map.setFeatureState({ source: 'osm', id: selectedCycleway }, { highlight: false });\n            }\n            selectedCycleway = null;\n        });\n    }\n\n    render() {\n        return (\n            // Thanks https://blog.mapbox.com/mapbox-gl-js-react-764da6cc074a\n            <div ref={el => this.mapContainer = el}></div>\n        )\n    }\n}\n\nexport default Map;","export const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiY21kYWxiZW0iLCJhIjoiY2pnbXhjZnplMDJ6MjMzbnk0OGthZGE1ayJ9.n1flNO8ndRYKQcR9wNIT9w';\n\nexport const DEFAULT_BORDER_WIDTH = 3;\n\nexport const DEFAULT_AREA = 'Niterói, Rio De Janeiro, Brazil';\nexport const DEFAULT_LNG = -43.1098110;\nexport const DEFAULT_LAT = -22.8948963;\n\nconst ONE_DAY_MS = 1000 * 60 * 60 * 24;\nexport const OSM_DATA_MAX_AGE_MS = 7 * ONE_DAY_MS;\n\nexport const MIN_ZOOM_TO_LOAD_DATA = 10;\n\nexport const TOPBAR_HEIGHT = 64;","import React, { Component } from 'react';\n\nimport './Spinner.css'\n\nclass Spinner extends Component {\n    render() {\n        const parts = this.props.area.split(',');\n        const city = parts[0];\n            // state = parts[1],\n            // country = parts[2];\n\n        return (\n            <div id=\"spinner\" className=\"loader-container\">\n                <div className=\"loader\">\n                    {\n                        this.props.error ?\n                            <div>\n                                <div style={{fontSize: '42px'}}>\n                                    <span role=\"img\" aria-label=\"Emoji triste\">😓</span>\n                                </div>\n\n                                <div className=\"content\">\n                                    <h2>\n                                        Ops!\n                                    </h2>\n\n                                    <div>\n                                        O OSM está mal humorado neste momento. Atualize a página para tentar denovo.\n                                    </div>\n                                </div>\n                            </div>\n                            :\n                            <div>\n                                <svg className=\"spinnersvg\" viewBox='25 25 50 50'>\n                                    <circle className=\"path\" cx='50' cy='50' r='20' fill='none' strokeWidth='6' strokeMiterlimit='10'\n                                    />\n                                </svg>\n\n                                <div className=\"content\">\n                                    <h2>\n                                        Carregando mapa cicloviário de <b>{city}</b>.\n                                    </h2>\n\n                                    <div>\n                                        Como é a primeira vez que você carrega esta cidade pode demorar um pouquinho :)\n                                    </div>\n                                </div>\n                            </div>\n\n                    }\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Spinner;","import React, { Component } from 'react';\n\nimport './CitySwitcherBackdrop.css'\n\nimport { Button, Icon } from 'antd';\n\n\nclass CitySwitcherBackdrop extends Component {\n    onClose() {\n        let body = document.querySelector('body');\n        body.classList.remove('show-city-picker')\n    }\n\n    render() {\n        return (\n            <div id=\"backdrop\" onClick={this.onClose}>\n                <Button\n                    id=\"closeBtn\"\n                    // ghost\n                    // shape=\"circle\"\n                    // icon=\"close\"\n                    type=\"link\"\n                    size=\"large\"\n                    onClick={this.onClose}\n                >\n                    Cancelar\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default CitySwitcherBackdrop;","import React, { Component } from 'react';\n\nimport { TOPBAR_HEIGHT } from './constants'\n\nimport { Modal, Button, Divider, Popover, Icon } from 'antd';\n\nimport { get, set } from 'idb-keyval';\n\nimport itdp from './img/itdp.png';\nimport ucb from './img/ucb.png';\n\nimport './TopBar.css'\n\nclass TopBar extends Component {\n    info() {\n        Modal.info({\n            title: 'Sobre',\n            className: 'about-modal',\n            content: (\n                <div>\n                    <p>\n                        A plataforma CicloMapa é uma ferramenta que buscar ampliar a visibilidade das infraestruturas cicloviárias mapeadas no OpenStreetMap e engajar uma comunidade de mapeadores para atualização colaborativa de dados e incidência em políticas públicas de mobilidade urbana.\n                    </p>\n\n                    <p>\n                        Este é um projeto Open Source, e seu código pode ser encontrado no <a href=\"https://github.com/cmdalbem/ciclomapa/\">GitHub</a>.\n                    </p>\n\n                    <div>\n                        Apoio:\n\n                        <div className=\"logos\">\n                            <a href=\"http://itdpbrasil.org\" target=\"_BLANK\" rel=\"noopener noreferrer\">\n                                <img src={itdp} alt=\"Logo do ITDP\"></img>\n                            </a>\n                            <a href=\"https://www.uniaodeciclistas.org.br/\" target=\"_BLANK\" rel=\"noopener noreferrer\">\n                                <img src={ucb} alt=\"Logo da UCB\"></img>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            ),\n            onOk() { },\n        });\n    }\n\n    showCityPicker() {\n        let body = document.querySelector('body');\n        body.classList.add('show-city-picker');\n        body.querySelector('.mapboxgl-ctrl-top-left .mapboxgl-ctrl-geocoder input').focus();\n    }\n\n    onChange(value) {\n        console.log(`selected ${value}`);\n        this.props.onMapMoved({ area: value });\n    }\n\n    componentDidMount() {\n        get('hasSeenWelcomeMsg')\n                .then(data => {\n                    if (!data) {\n                        this.info();\n                        set('hasSeenWelcomeMsg', true);\n                    }\n                });\n    }\n\n    render() {\n        const parts = this.props.title.split(',');\n        const city = parts[0], \n            state = parts[1];\n            // country = parts[2];\n        let updatedAt;\n\n        // Super special case for Brasilia because it's so damn big and we're not loading the data into memory\n        const isDownloadUnavailable = city === 'Brasília';\n        \n        if (this.props.lastUpdate) {\n            updatedAt = this.props.lastUpdate.toLocaleString('pt-BR');\n        }\n        \n        return (\n            <div className=\"topbar\" style={{height: TOPBAR_HEIGHT}}>\n                <div>\n                    <h1 className=\"logo\">\n                        CicloMapa\n                    </h1>\n                </div>\n\n                <div>\n                    <Button \n                        size=\"large\"\n                        onClick={this.showCityPicker}\n                    >\n                        <h3 className=\"areaname\">\n                            <span className=\"state\">\n                                {state}\n                            </span>\n                            <span className=\"city\">\n                                {city}\n                            </span> \n\n                            <Icon\n                                type=\"down\"\n                                size=\"small\"\n                                style={{ fontSize: '16px', color: '#4ba96e' }}\n                            >\n                            </Icon>\n                        </h3>\n                    </Button>\n\n                    {\n                        updatedAt &&\n                        <Popover\n                            placement=\"bottom\"\n                            content={(\n                                <div>\n                                    Dados obtidos do OpenStreetMaps em <b>{updatedAt}</b>.\n                                    <Button\n                                        size=\"small\"\n                                        icon=\"redo\"\n                                        onClick={this.props.forceUpdate}\n                                        style={{marginLeft: '0.25em'}}\n                                    >\n                                    </Button>\n                                </div>\n                            )}\n                            arrowPointAtCenter={true}\n                        >\n                            <Icon type=\"info-circle\" style={{ marginLeft: '8px' }}/>\n                        </Popover>\n                    }\n                </div>\n                \n                <div>\n                    <Button\n                        size=\"large\"\n                        type=\"link\"\n                        onClick={this.info}\n                    >\n                        Sobre\n                    </Button>\n\n                    <Divider type=\"vertical\" />\n\n                    <Button\n                        size=\"large\"\n                        type=\"link\"\n                        onClick={this.props.downloadData}\n                        disabled={isDownloadUnavailable}\n                        style={{ opacity: isDownloadUnavailable ? .5 : 1}}\n                    >\n                        <Icon type=\"download\" /> Baixar dados\n                    </Button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TopBar;","import React, { Component } from 'react';\n\nimport light from './img/light.png';\nimport normal from './img/normal.png';\nimport satelite from './img/satelite.png';\n\nimport './MapStyleSwitcher.css'\n\nclass MapStyleSwitcher extends Component {\n    state = { selected: 0 };\n\n    options = [\n        {\n            img: normal,\n            // url: 'mapbox://styles/mapbox/streets-v11'\n            url: 'mapbox://styles/cmdalbem/cjgmxgkbw000n2rqtucat5zjz'\n        },\n        {\n            img: light,\n            url: 'mapbox://styles/cmdalbem/cjxseldep7c0a1doc7ezn6aeb'\n        },\n        {\n            img: satelite,\n            url: 'mapbox://styles/cmdalbem/cjxsdwb907bfi1cqevxio2bst'\n        },\n    ];\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state !== prevState) {\n            const selected = this.options[this.state.selected]\n            this.props.onMapStyleChange(selected.url)\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"switcher-bar\">\n                {\n                    this.options.map( (option, i) =>\n                        <div\n                            onClick={() => this.setState({ selected: i })}\n                            className={this.state.selected === i ? 'selected' : ''}\n                            key={option.img}\n                        >\n                            <img src={option.img} alt=\"\"/>\n                        </div>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default MapStyleSwitcher;","import React, { Component } from 'react';\n\nimport { Switch, Tooltip } from 'antd';\n\nimport './LayersPanel.css';\n\n\nclass LayersPanel extends Component {\n    onChange(id, newVal) {\n        this.props.onLayersChange(id, newVal)\n    }\n\n    render() {\n        return (\n            <div className=\"layers-panel\">\n                {\n                    this.props.layers &&\n                    this.props.layers.map(l =>\n                        <Tooltip\n                            placement=\"left\"\n                            title={l.description}\n                            arrowPointAtCenter={true}\n                            key={l.name}\n                        >\n                            <div\n                                className=\"layer-row\"\n                                onClick={this.onChange.bind(this, l.id, !l.isActive)}\n                            >\n                                <div>\n                                    <span\n                                        className=\"layer-miniature\" \n                                        style={{\n                                            height: l.style.lineWidth * 2,\n                                            background: l.style.lineStyle === 'solid' ?\n                                                l.style.lineColor\n                                                : `repeating-linear-gradient(90deg, ${l.style.lineColor}, ${l.style.lineColor} 3px, white 3px, white 6px)`,\n                                            borderColor: l.style.borderColor,\n                                            borderStyle: l.style.borderStyle,\n                                            borderWidth: l.style.borderWidth ? l.style.borderWidth/2 : '0',\n                                            borderLeft: 'none',\n                                            borderRight: 'none'\n                                    }}\n                                    ></span>\n\n                                    <span className=\"layer-name\">\n                                        {l.name}\n                                    </span>\n                                </div>\n\n                                <Switch size=\"small\" checked={l.isActive}/>\n                            </div>\n                        </Tooltip>\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default LayersPanel;","import { saveAs } from 'file-saver';\n\n\nexport function doesAContainsB(a, b) {\n    if (a && b) {\n        return a.getNorth() >= b.getNorth()\n            && a.getSouth() <= b.getSouth()\n            && a.getEast() >= b.getEast()\n            && a.getWest() <= b.getWest();\n    } else {\n        return null;\n    }\n}\n\n// Thanks https://stackoverflow.com/questions/19721439/download-json-object-as-a-file-from-browser\nexport function downloadObjectAsJson(data, fileName) {\n    const blob = new Blob([JSON.stringify(data)], {\n        type: 'application/json',\n        name: fileName\n    }); \n    saveAs(blob, fileName);\n}\n\nexport function createPolygonFromBBox(bbox) {\n    return {\n        'type': 'Feature',\n        'geometry': {\n            'type': 'Polygon',\n            'coordinates': [\n                [\n                    bbox.getNorthWest().toArray(),\n                    bbox.getNorthEast().toArray(),\n                    bbox.getSouthEast().toArray(),\n                    bbox.getSouthWest().toArray(),\n                    bbox.getNorthWest().toArray()\n                ]\n            ]\n        }\n    };\n}\n\n// Thanks https://medium.com/@mhagemann/the-ultimate-way-to-slugify-a-url-string-in-javascript-b8e4a0d849e1\nexport function slugify(str) {\n  const a = 'àáäâãåăæçèéëêǵḧìíïîḿńǹñòóöôœøṕŕßśșțùúüûǘẃẍÿź·/_,:;'\n  const b = 'aaaaaaaaceeeeghiiiimnnnooooooprssstuuuuuwxyz------'\n  const p = new RegExp(a.split('').join('|'), 'g')\n  return str.toString().toLowerCase()\n    .replace(/\\s+/g, '-') // Replace spaces with -\n    .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\n    .replace(/&/g, '-and-') // Replace & with ‘and’\n    .replace(/[^\\w-]+/g, '') // Remove all non-word characters\n    .replace(/--+/g, '-') // Replace multiple - with single -\n    .replace(/^-+/, '') // Trim - from start of text\n    .replace(/-+$/, '') // Trim - from end of text\n}\n\nconst typeSizes = {\n    \"undefined\": () => 0,\n    \"boolean\": () => 4,\n    \"number\": () => 8,\n    \"string\": item => 2 * item.length,\n    \"object\": item => !item ? 0 : Object\n        .keys(item)\n        .reduce((total, key) => sizeOf(key) + sizeOf(item[key]) + total, 0)\n};\n\nexport const sizeOf = value => typeSizes[typeof value](value);","/* eslint-disable no-loop-func */\nimport osmtogeojson from 'osmtogeojson'\n\nimport $ from 'jquery'\n\nimport { notification } from 'antd';\n\nimport { DEFAULT_BORDER_WIDTH } from './constants.js'\nimport { slugify } from './utils.js'\n\nimport * as layers from './layers.json';\n\nconst servers = [\n    'https://overpass.kumi.systems/api/interpreter',\n    'https://overpass-api.de/api/interpreter',\n    'http://overpass.openstreetmap.fr/api/interpreter',\n    'http://overpass.osm.ch/api/interpreter',\n    'https://overpass.nchc.org.tw'\n];\n\nclass OSMController {\n    static getQuery(constraints) {\n        const bbox = constraints.bbox;\n        // const area = constraints.area.split(',')[0];\n        const areaId = constraints.areaId;\n\n        const body = layers.default.map(l =>\n            l.filters.map(f =>\n                'way'\n                + (typeof f[0] === 'string' ?\n                    `[\"${f[0]}\"=\"${f[1]}\"]`\n                    :\n                    f.map(f_inner =>\n                        `[\"${f_inner[0]}\"=\"${f_inner[1]}\"]`\n                    ).join(\"\"))\n                 + (bbox ? \n                    `(${bbox});\\n`\n                    :\n                    `(area.a);\\n`)\n            ).join(\"\")\n        ).join(\"\");\n\n        return `\n            [out:json][timeout:500];\n            ${!bbox && `area(${areaId})->.a;`}\n            (\n                ${body}\n            );\n            out body geom;\n        `;\n    }\n\n    static massageLayersData() {\n        layers.default.forEach(l => {\n            // Omitted values\n            l.style.lineStyle = l.style.lineStyle || 'solid';\n            l.isActive = l.isActive !== undefined ? l.isActive : true;\n\n            if (l.style.borderColor) {\n                l.style.borderStyle = l.style.borderStyle || 'solid';\n                l.style.borderWidth = l.style.borderWidth || DEFAULT_BORDER_WIDTH;\n            }\n            \n            // Generate an ID based on name\n            l.id = slugify(l.name);\n        });\n\n        return layers.default;\n    }\n\n    static getLayers() {\n        return this.massageLayersData();\n    }\n\n    static getData(constraints) {\n        return new Promise((resolve, reject) => {\n            let geoJson;\n\n            $.getJSON(\n                `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURI(constraints.area)}`,\n                nominatimData => {\n                    console.debug('nominatimData', nominatimData);\n\n                    // Source: https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#By_area_.28area.29\n                    let areaId\n                    if (constraints.area === 'Vitória, Espirito Santo, Brazil') {\n                        areaId = 3601825817;\n                    } else {\n                        areaId = 3600000000 + nominatimData[0].osm_id;\n                    }\n\n                    const query = OSMController.getQuery({ areaId: areaId});\n                    \n                    console.debug('generated query: ', query);\n\n                    const encodedQuery = encodeURI(query);\n\n                    let requests = [];\n                    for (let i = 0; i < servers.length; i++) {\n                        const endpoint = servers[i] + '?data=' + encodedQuery;\n                        \n                        console.debug(i + ' OSM server: ' + servers[i]);\n\n                        requests[i] = $.getJSON(\n                            endpoint,\n                            data => {\n                                if (data.elements.length > 0) {\n                                    console.debug('SUCCESS! @ ' + i);\n                                    for (let r = 0; r < requests.length; r++) {\n                                        if (r !== i) {\n                                            console.debug('Aborting ' + r);\n                                            requests[r].abort();\n                                        }\n                                    }\n    \n                                    console.debug('osm data: ', data);\n                                    geoJson = osmtogeojson(data, { flatProperties: true });\n                                    console.debug('converted to geoJSON: ', geoJson);\n                                    \n                                    resolve({\n                                        geoJson: geoJson\n                                    });\n                                } else {\n                                    console.debug(`Server ${i} returned an empty result.`);\n\n                                    // Check if I'm the last one\n                                    let isLastRemainingRequest = true;\n                                    for (let r = 0; r < requests.length; r++) {\n                                        if (r !== i) {\n                                            if (requests[r].status === undefined) {\n                                                isLastRemainingRequest = false;\n                                            }\n                                        }\n                                    }\n                                    if (isLastRemainingRequest) {\n                                        console.debug('I was the last one, so probably the result is empty.');\n                                        resolve({ geoJson: null });\n                                    }\n                                }\n                            }).fail(e => {\n                                if (e.statusText !== 'abort') {\n                                    console.error(`Servidor ${i} deu erro:`, e);\n                                }\n                            });\n                    }\n                    \n                    // console.error(\"Deu erro! Saca só:\", e);\n                    // notification['error']({\n                    //     message: 'Erro',\n                    //     description:\n                    //         `Ops, erro na API do Overpass (erro ${e.status}). Abra o console para ver mais detalhes.`,\n                    // });\n                    // reject();\n\n                }).fail(e => {\n                    console.error(\"Deu erro! Saca só:\", e);\n                    notification['error']({\n                        message: 'Erro',\n                        description:\n                            'Ops, erro na API do Nominatim. Abra o console para ver mais detalhes.',\n                    });\n\n                    reject();\n                });\n        });\n    }\n}\n\nexport default OSMController;","import pako from 'pako';\n// import { gzip } from 'zlib';\n\nconst DEBUG = false;\n\n\nexport function gzipDecompress(data) {\n    return JSON.parse(pako.inflate(data), { to: 'string' });\n}\n\nexport function gzipCompress(data) {\n    const compressed = pako.deflate(JSON.stringify(data), { to: 'string' });\n\n    // Test if compression went OK\n    // const decompressed = JSON.parse(pako.inflate(compressed), { to: 'string' });\n    // console.log(decompressed);\n\n    return compressed;\n}\n\nexport function cleanUpOSMTags(data) {\n    data.features.forEach(feature => {\n        Object.keys(feature.properties).forEach(propertyKey => {\n            if (propertyKey !== 'id' &&\n                propertyKey !== 'name' &&\n                propertyKey !== 'type')\n                delete feature.properties[propertyKey];\n        });\n    });\n}\n\nexport function computeTypologies(data, layers) {\n    data.features.forEach(feature => {\n        if (DEBUG) {\n            console.debug(`${feature.properties.id} (${feature.properties.name})`);\n        }\n\n        if (!feature.properties.type) {\n            layers.forEach(layer => {\n                let match = false;\n                layer.filters.forEach(filter => {\n                    let partsToMatch;\n                    if (typeof filter[0] === 'object') {\n                        partsToMatch = [false, false];\n                    } else {\n                        partsToMatch = [false];\n                    }\n\n                    Object.keys(feature.properties).forEach(propertyKey => {\n                        if (typeof filter[0] === 'object') {\n                            if ((propertyKey === filter[0][0] &&\n                                feature.properties[propertyKey] === filter[0][1])) {\n                                partsToMatch[0] = true;\n                            }\n\n                            if ((propertyKey === filter[1][0] &&\n                                feature.properties[propertyKey] === filter[1][1])) {\n                                partsToMatch[1] = true;\n                            }\n                        } else {\n                            if ((propertyKey === filter[0] &&\n                                feature.properties[propertyKey] === filter[1])) {\n                                partsToMatch[0] = true;\n                            }\n                        }\n                    });\n\n                    if ((typeof filter[0] === 'object' && partsToMatch[0] && partsToMatch[1])\n                        || partsToMatch[0]) {\n                        feature.properties.type = layer.name;\n                        match = true;\n                        // console.debug(`.  .  → ${feature.properties.name} (${feature.properties.id}) = ${layer.name}`);\n                    }\n\n                    // console.debug(`.  .  ${filter} ${match ? '✓' : ''}`);\n                });\n\n                if (DEBUG) {\n                    console.debug(`.  ${layer.name} ${match ? '👍' : ''}`);\n                }\n            });\n        }\n    });\n}","import { get, set } from 'idb-keyval';\n\nimport firebase from 'firebase';\n\nimport { slugify, sizeOf } from './utils.js'\nimport { cleanUpOSMTags, gzipCompress } from './geojsonUtils.js'\n\n\nconst DISABLE_LOCAL_STORAGE = true;\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDUbMY3UuyJ9vVVBblhUR9L1B3TV6a3eRU\",\n    authDomain: \"ciclomapa-app.firebaseapp.com\",\n    databaseURL: \"https://ciclomapa-app.firebaseio.com\",\n    projectId: \"ciclomapa-app\",\n    storageBucket: \"ciclomapa-app.appspot.com\",\n    messagingSenderId: \"377722964538\",\n    appId: \"1:377722964538:web:bc0fada0b3db0587514303\"\n};\n\nclass Storage {\n    db;\n    buffer;\n    \n    constructor() {\n        firebase.initializeApp({\n            apiKey: firebaseConfig.apiKey,\n            authDomain: firebaseConfig.authDomain,\n            projectId: firebaseConfig.projectId\n        });\n\n        this.db = firebase.firestore();\n\n        this.db.collection(\"cities\").get().then((querySnapshot) => {\n            console.log('[Firestore] Documents found:');\n            querySnapshot.forEach((doc) => {\n                console.debug('• ' + doc.id);\n            });\n        });\n    }\n\n    compressJson(data) {\n        console.log('Before: ', sizeOf(data));\n\n        // Minimize size by cleaning clearing OSM tags\n        // @todo DOESNT WORK because Mapbox needs the OSM tags to render the layers\n        // cleanUpOSMTags(data);\n        \n        // Compress with gzip\n        const compressed = gzipCompress(data);\n\n        console.log('After: ', sizeOf(compressed));\n\n        return compressed;\n    }\n\n    saveToFirestore(name, jsonStr, updatedAt, part) {\n        let slug = slugify(name);\n\n        if (part === 2) {\n            slug += 2;\n        }\n\n        return this.db.collection('cities').doc(slug).set({\n            name: name,\n            geoJson: jsonStr,\n            updatedAt: updatedAt,\n            part: part || ''\n        });\n    }\n\n    save(name, geoJson, updatedAt) {\n        // Save to Local Storage\n        set(name, {\n            geoJson: geoJson,\n            updatedAt: updatedAt\n        });\n\n        // Save to Firestore\n        try {\n            const jsonStr = JSON.stringify(geoJson);\n\n            // geoJson = this.compressJson(geoJson);\n            this.saveToFirestore(name, jsonStr, updatedAt)\n                .then(() => {\n                    console.debug(\"[Firebase] Document written successfully.\");\n                }).catch(error => {\n                    // console.error(\"[Firebase] Error adding document: \", error);\n                    console.debug('[Firestore] Failed saving full data, splitting in 2...')\n\n                    const part1 = jsonStr.slice(0, Math.ceil(jsonStr.length/2));\n                    const part2 = jsonStr.slice(Math.ceil(jsonStr.length/2));\n\n                    this.saveToFirestore(name, part1, updatedAt, 1) \n                    .then(() => {\n                        console.debug(\"[Firebase] Document written successfully.\");\n                    }).catch(error => {\n                        console.error(\"[Firebase] Error adding document: \", error);\n                    });        \n \n                    this.saveToFirestore(name, part2, updatedAt, 2)\n                    .then(() => {\n                        console.debug(\"[Firebase] Document written successfully.\");\n                    }).catch(error => {\n                        console.error(\"[Firebase] Error adding document: \", error);\n                    });        \n\n                });\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    getDataFromDB(slug, resolve, reject) {\n        this.db.collection(\"cities\").doc(slug).get().then(doc => {\n            if (doc.exists) {\n                let data = doc.data();\n\n                console.debug(\"[Firebase] Document data:\", data);\n\n                // Decompress gzip\n                // data.geoJson = gzipDecompress(data.geoJson)\n\n                if (data.part === 1) {\n                    this.buffer = data.geoJson; \n                    return this.getDataFromDB(slug + '2', resolve, reject);\n                } else if (data.part === 2) {\n                    data.geoJson = this.buffer + data.geoJson;\n                }\n\n                // Massage data\n                data.geoJson = JSON.parse(data.geoJson);\n                data.updatedAt = data.updatedAt.toDate();\n\n                resolve(data);\n            } else {\n                console.debug(\"[Firebase] No document for: \", slug);\n                resolve();\n            }\n        }).catch(error => {\n            console.error(`[Firebase] Error getting document: ${slug}`, error);\n            reject();\n        });\n    }\n\n    load(name) {\n        const slug = slugify(name);\n\n        return new Promise((resolve, reject) => {\n            if (!DISABLE_LOCAL_STORAGE) {\n                get(name).then( local => {\n                    if (local) {\n                        resolve(local);\n                    } else {\n                        this.getDataFromDB(slug, resolve, reject);\n                    }\n                })\n            } else {\n                this.getDataFromDB(slug, resolve, reject);\n            }\n        });\n    }\n}\n\nexport default Storage;","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport { notification } from 'antd';\nimport \"antd/dist/antd.css\";\n\nimport Map from './Map.js'\nimport Spinner from './Spinner.js'\nimport CitySwitcherBackdrop from './CitySwitcherBackdrop.js'\nimport TopBar from './TopBar.js'\nimport MapStyleSwitcher from './MapStyleSwitcher.js'\nimport LayersPanel from './LayersPanel.js'\nimport OSMController from './OSMController.js'\nimport Storage from './Storage.js'\nimport { DEFAULT_LAT, DEFAULT_LNG, OSM_DATA_MAX_AGE_MS } from './constants.js'\nimport { downloadObjectAsJson } from './utils.js'\nimport { computeTypologies, cleanUpOSMTags } from './geojsonUtils.js'\n\nimport './App.css';\n\nclass App extends Component {\n    geoJson;\n    storage;\n\n    constructor(props) {\n        super(props);\n\n        this.updateData = this.updateData.bind(this);\n        this.onMapStyleChange = this.onMapStyleChange.bind(this);\n        this.onMapMoved = this.onMapMoved.bind(this);\n        this.onLayersChange = this.onLayersChange.bind(this);\n        this.downloadData = this.downloadData.bind(this);\n        this.forceUpdate = this.forceUpdate.bind(this);\n\n        const urlParams = this.getParamsFromURL();\n        this.state = {\n            geoJson: null,\n            loading: false,\n            layers: OSMController.getLayers(),\n            mapStyle: 'mapbox://styles/cmdalbem/cjgmxgkbw000n2rqtucat5zjz',\n            zoom: urlParams.z || 13,\n            area: '',\n            center: [\n                parseFloat(urlParams.lng) || DEFAULT_LNG,\n                parseFloat(urlParams.lat) || DEFAULT_LAT]\n        };\n\n        this.storage = new Storage();\n\n        if (this.state.area) {\n            this.updateData();\n        }\n    }\n\n    getParamsFromURL() {\n        const possibleParams = ['z', 'lat', 'lng'];\n        const urlParams = new URLSearchParams(this.props.location.search);\n        let paramsObj = {}\n\n        possibleParams.forEach( p => {\n            let value = urlParams.get(p);\n            if (value) {\n                paramsObj[p] = value;\n            }\n        })\n\n        return paramsObj;\n    }\n\n    isDataFresh(data) {\n        const now = new Date();\n        const dataLastUpdate = new Date(data.updatedAt);\n\n        return now - dataLastUpdate < OSM_DATA_MAX_AGE_MS;\n    }\n\n    forceUpdate() {\n        this.updateData(true);\n    }\n\n    getDataFromOSM(area) {\n        OSMController.getData({ area: area })\n            .then(data => {\n                // Persist data\n                const now = new Date();\n                this.storage.save(area, data.geoJson, now);\n\n                this.setState({\n                    geoJson: data.geoJson,\n                    dataUpdatedAt: now,\n                    loading: false\n                });\n            }).catch(e => {\n                this.setState({\n                    error: true\n                });\n            });\n    }\n\n    updateData(force) {\n        if (this.state.area) {\n            if (force) {\n                this.setState({ loading: true });\n                this.getDataFromOSM(this.state.area);\n            } else if (this.state.area === 'Brasília, Distrito Federal, Brazil'){\n                // Super special case for Brasilia because it's so damn big\n                //   More at: https://docs.mapbox.com/help/troubleshooting/working-with-large-geojson-data/#store-geojson-at-url\n                this.setState({\n                    geoJson: './ciclomapa-brasilia.geojson',\n                    dataUpdatedAt: new Date('Sun Sep 29 2019 19:04:25 GMT-0300 (Brasilia Standard Time)')\n                });\n            } else {\n                // Try to retrieve previously saved data for this area\n                this.storage.load(this.state.area, force)\n                    .then(data => {\n                        if (data && this.isDataFresh(data)) {\n                            console.debug('Database data is fresh.');\n                            this.setState({\n                                geoJson: data.geoJson,\n                                dataUpdatedAt: new Date(data.updatedAt)\n                            });\n                        } else { \n                            console.debug(`Couldn't find data for area ${this.state.area} or it isn't fresh, hitting OSM...`);\n                            this.setState({ loading: true });\n                            this.getDataFromOSM(this.state.area);\n                        }\n                    }).catch(e => {\n                        notification['error']({\n                            message: 'Erro',\n                            description:\n                                'Ocorreu um erro ao acessar o banco de dados.',\n                        });\n                    });\n            }\n        } else {\n            this.setState({ loading: false });\n        }\n    }\n\n    onMapStyleChange(newMapStyle) {\n        this.setState({ mapStyle: newMapStyle});\n    }\n\n    onLayersChange(id, newVal) {\n        let newLayers = Object.assign([], this.state.layers);\n        let modifiedLayer = newLayers.filter(l => l.id === id)[0];\n        modifiedLayer.isActive = newVal;\n\n        this.setState({ layers: newLayers });\n    }\n\n    downloadData() {\n        computeTypologies(this.state.geoJson, this.state.layers);\n        cleanUpOSMTags(this.state.geoJson);\n        downloadObjectAsJson(this.state.geoJson, `ciclomapa-${this.state.area}`);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.location !== prevProps.location) {\n            this.onRouteChanged();\n        }\n\n        if (this.state.area !== prevState.area) {\n            console.debug(`Changed area from ${prevState.area} to ${this.state.area}`);\n            \n            this.updateData();\n\n            // Only redo the query if we need new data\n            // if (!doesAContainsB(largestBoundsYet, newBounds)) {\n            //     this.updateData();\n            //     largestBoundsYet = newBounds;\n\n            //     if (DEBUG_BOUNDS_OPTIMIZATION) {\n            //         this.updateDebugPolygon(largestBoundsYet, 1);\n            //     }\n            // }\n        }\n\n        if (this.state.geoJson !== prevState.geoJson) {\n            if (!this.state.geoJson || (this.state.geoJson.features && this.state.geoJson.features.length === 0)) {\n                notification['warning']({\n                    message: 'Ops',\n                    description:\n                        'Não há dados cicloviários para esta cidade.',\n                });\n\n                // this.setState({\n                //     isDownloadUnavailable: true\n                // });\n            } else {\n                // this.setState({\n                //     isDownloadUnavailable: false\n                // });\n            }\n        }\n        \n        if (this.state.zoom !== prevState.zoom ||\n            this.state.lat !== prevState.lat ||\n            this.state.lng !== prevState.lng) {\n                let params = '?';\n                params += `lat=${this.state.lat.toFixed(7)}`;\n                params += `&lng=${this.state.lng.toFixed(7)}`;\n                params += `&z=${this.state.zoom.toFixed(2)}`;\n                this.props.history.push({\n                    search: params\n                })\n        }\n    }\n\n    onRouteChanged() {\n        // @todo Fix infinite loop\n        // this.setState(this.getParamsFromURL());\n    }\n\n    onMapMoved(newState) {\n        // Ignore new area changes from Map\n        // if (this.state.area) {\n        //     delete newState.area;\n        // }\n\n        this.setState(newState);\n    }\n\n    render() {\n        return (\n            <div>\n                <TopBar\n                    title={this.state.area}\n                    lastUpdate={this.state.dataUpdatedAt}\n                    downloadData={this.downloadData}\n                    // isDownloadUnavailable={this.state.isDownloadUnavailable}\n                    onMapMoved={this.onMapMoved}\n                    forceUpdate={this.forceUpdate}\n                />\n\n                <CitySwitcherBackdrop/>\n\n                <Map\n                    data={this.state.geoJson}\n                    layers={this.state.layers}\n                    style={this.state.mapStyle}\n                    zoom={this.state.zoom}\n                    center={this.state.center}\n                    updateData={this.updateData}\n                    onMapMoved={this.onMapMoved}\n                />\n\n                <MapStyleSwitcher onMapStyleChange={this.onMapStyleChange}/>\n \n                <LayersPanel\n                    layers={this.state.layers}\n                    onLayersChange={this.onLayersChange}\n                />\n\n                {\n                    this.state.loading &&\n                    <Spinner area={this.state.area} error={this.state.error}/>\n                }\n            </div>\n        );\n    }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}